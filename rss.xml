<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Deathdealer's Blog]]></title><description><![CDATA[deathdealer's blog build by GatsbyJS]]></description><link>https://blog.deathdealer.cn</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 14 Sep 2022 10:41:18 GMT</lastBuildDate><item><title><![CDATA[十大手冲（2022）]]></title><description><![CDATA[P99 德国，瓦尔特（WALTHER） PX4 Storm 意大利，伯莱塔（BERETTA） HK-USP 德国，黑克勒-科赫（Heckler & Koch） FN Five Seven 比利时，又称57式（噗），赫尔斯塔尔国营工厂（Fabrique Nationale） S&W…]]></description><link>https://blog.deathdealer.cn/other/top10-pistol/</link><guid isPermaLink="false">https://blog.deathdealer.cn/other/top10-pistol/</guid><pubDate>Wed, 14 Sep 2022 21:37:32 GMT</pubDate><content:encoded>&lt;h3&gt;P99&lt;/h3&gt;
&lt;p&gt;德国，瓦尔特（WALTHER）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220914180025715.png&quot; alt=&quot;image-20220914180025715&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;PX4 Storm&lt;/h3&gt;
&lt;p&gt;意大利，伯莱塔（BERETTA）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220914180213392.png&quot; alt=&quot;image-20220914180213392&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;HK-USP&lt;/h3&gt;
&lt;p&gt;德国，黑克勒-科赫（Heckler &amp;#x26; Koch）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220914180550437.png&quot; alt=&quot;image-20220914180550437&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;FN Five Seven&lt;/h3&gt;
&lt;p&gt;比利时，又称57式（噗），赫尔斯塔尔国营工厂（Fabrique Nationale）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220914181422349.png&quot; alt=&quot;image-20220914181422349&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;S&amp;#x26;W Military &amp;#x26; Police&lt;/h3&gt;
&lt;p&gt;美国，史密夫韦森（Smith &amp;#x26; Wesson）军警型&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220914181623554.png&quot; alt=&quot;image-20220914181623554&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;CZ-75&lt;/h3&gt;
&lt;p&gt;捷克共和国，乌尔斯基·布罗德兵工厂&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220914182033316.png&quot; alt=&quot;image-20220914182033316&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;P226&lt;/h3&gt;
&lt;p&gt;德国，西格绍尔（SIG SAUER）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220914182325438.png&quot; alt=&quot;image-20220914182325438&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;BERETTA 92&lt;/h3&gt;
&lt;p&gt;意大利，伯莱塔（BERETTA）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220914182518574.png&quot; alt=&quot;image-20220914182518574&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;P320&lt;/h3&gt;
&lt;p&gt;德国， 西格绍尔（SIG SAUER）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220914182628451.png&quot; alt=&quot;image-20220914182628451&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;Glock 17&lt;/h3&gt;
&lt;p&gt;奥地利，格洛克（Glock）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220914182724829.png&quot; alt=&quot;image-20220914182724829&quot; style=&quot;zoom:50%;&quot;&gt;</content:encoded></item><item><title><![CDATA[合法水弹枪]]></title><description><![CDATA[LDT撸蛋堂（激趣） 和激趣是一个东西，激趣这个牌子是当年撸蛋堂和星角落搞的，星角落已亡 HK416 尼龙齿轮￥528，金属齿轮￥578（原型为德国hk公司hk416d突击步枪） MP5 弹匣版本/弹鼓版本￥628（原型为德国hk公司mp5冲锋枪） 乐辉 MCX ￥76…]]></description><link>https://blog.deathdealer.cn/other/guns/</link><guid isPermaLink="false">https://blog.deathdealer.cn/other/guns/</guid><pubDate>Tue, 22 Mar 2022 21:37:32 GMT</pubDate><content:encoded>&lt;h3&gt;LDT撸蛋堂（激趣）&lt;/h3&gt;
&lt;p&gt;和激趣是一个东西，激趣这个牌子是当年撸蛋堂和星角落搞的，星角落已亡&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HK416 尼龙齿轮&lt;strong&gt;￥528&lt;/strong&gt;，金属齿轮&lt;strong&gt;￥578&lt;/strong&gt;（原型为德国hk公司hk416d突击步枪）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322190215436.png&quot; alt=&quot;image-20220322190215436&quot; style=&quot;zoom:33%;&quot;&gt;
&lt;p&gt;MP5 弹匣版本/弹鼓版本&lt;strong&gt;￥628&lt;/strong&gt;（原型为德国hk公司mp5冲锋枪）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322190315521.png&quot; alt=&quot;image-20220322190315521&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;/blockquote&gt;
&lt;h3&gt;乐辉&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;MCX &lt;strong&gt;￥768&lt;/strong&gt;（原型是西格绍尔公司mcx突击步枪，将在2022年复产，据说会上尼龙波）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322185801409.png&quot; alt=&quot;image-20220322185801409&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;p&gt;MPX &lt;strong&gt;￥728&lt;/strong&gt;（原型西格绍尔公司mpx冲锋枪）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322190626667.png&quot; alt=&quot;image-20220322190626667&quot; style=&quot;zoom:45%;&quot;&gt;
&lt;p&gt;SLRAK &lt;strong&gt;￥588&lt;/strong&gt;（原型为slr定制ak）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322195523051.png&quot; alt=&quot;image-20220322195523051&quot; style=&quot;zoom:65%;&quot;&gt;
&lt;p&gt;AUG &lt;strong&gt;￥358&lt;/strong&gt;（原型奥地利斯太尔公司Aug突击步枪）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322195923101.png&quot; alt=&quot;image-20220322195923101&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;p&gt;SIG552 &lt;strong&gt;￥598&lt;/strong&gt;（原型sig公司sig552突击步枪 ps：这货以mp40为基础设计我都迷惑）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322200301963.png&quot; alt=&quot;image-20220322200301963&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;p&gt;短剑 &lt;strong&gt;￥388&lt;/strong&gt;（不用说了维克托不会有人不知道吧）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322200513443.png&quot; alt=&quot;image-20220322200513443&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;p&gt;MP9 &lt;strong&gt;￥438&lt;/strong&gt;（斯太尔公司推出的mp9冲锋枪，乐辉厂家控价）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322200717344.png&quot; alt=&quot;image-20220322200717344&quot; style=&quot;zoom:40%;&quot;&gt;
&lt;/blockquote&gt;
&lt;h3&gt;小月亮&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ARP9 4.0 &lt;strong&gt;￥720&lt;/strong&gt;（原型应该是某个反物质）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322201055253.png&quot; alt=&quot;image-20220322201055253&quot; style=&quot;zoom:42%;&quot;&gt;
&lt;p&gt;左轮 屯货的版本在&lt;strong&gt;￥78&lt;/strong&gt;这样（把玩精品）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;司骏&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;MK18 二代&lt;strong&gt;￥328&lt;/strong&gt;，三代&lt;strong&gt;￥668&lt;/strong&gt;（军规mk18没啥说的）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322202250472.png&quot; alt=&quot;image-20220322202250472&quot; style=&quot;zoom:55%;&quot;&gt;
&lt;p&gt;M4 高配&lt;strong&gt;￥388&lt;/strong&gt;（这个也是，满大街的m4cqb没啥说的） m4cqb都一个样子直接省略图了&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322202039174.png&quot; alt=&quot;image-20220322202039174&quot; style=&quot;zoom:40%;&quot;&gt;
&lt;p&gt;HK416D &lt;strong&gt;￥398-￥468&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;奇点&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;TAR21 &lt;strong&gt;￥1900&lt;/strong&gt;（传说中fn公司授权的他二姨模具）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322202838815.png&quot; alt=&quot;image-20220322202838815&quot; style=&quot;zoom:60%;&quot;&gt;
&lt;/blockquote&gt;
&lt;h3&gt;锦明&lt;/h3&gt;
&lt;p&gt;核爆之后，就没什么优势了，特别是什么人给你们推荐j8什么的，j8已经不适应现在的环境了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;终结者 10元一斤都别要&lt;/p&gt;
&lt;p&gt;惩戒者 考古文物&lt;/p&gt;
&lt;p&gt;格洛克X3 弹匣版&lt;strong&gt;￥128&lt;/strong&gt;（格洛克18c）&lt;/p&gt;
&lt;p&gt;格洛克G43-1 &lt;strong&gt;￥165&lt;/strong&gt;，G43-2&lt;strong&gt;￥198&lt;/strong&gt;（格洛克g43）&lt;/p&gt;
&lt;p&gt;SCAR &lt;strong&gt;￥200&lt;/strong&gt;（fn推出的scar，应该是mk16版本）&lt;/p&gt;
&lt;p&gt;MP5 弹匣版&lt;strong&gt;￥200&lt;/strong&gt;（同ldt）、MP5 弹鼓版&lt;strong&gt;￥210&lt;/strong&gt;（同ldt）&lt;/p&gt;
&lt;p&gt;J8 &lt;strong&gt;￥200&lt;/strong&gt;（m4cqb第二次出现）&lt;/p&gt;
&lt;p&gt;J9 &lt;strong&gt;￥315&lt;/strong&gt; （m4a1这个应该都熟）&lt;/p&gt;
&lt;p&gt;J10 &lt;strong&gt;￥378&lt;/strong&gt; 黑色/沙色/新款沙色ACR-R（acr突击步枪没啥说的，可以学我们龙酱改191）&lt;/p&gt;
&lt;p&gt;J11 &lt;strong&gt;￥365&lt;/strong&gt; 战术版/木纹版《战术板四不像，木纹就是ak47》&lt;/p&gt;
&lt;p&gt;J12 &lt;strong&gt;￥290&lt;/strong&gt;（原型ak74u突击步枪）&lt;/p&gt;
&lt;p&gt;J13 &lt;strong&gt;￥250&lt;/strong&gt;（原型hk公司推出的hk416c突击步枪，伞兵用的）&lt;/p&gt;
&lt;p&gt;J15 &lt;strong&gt;￥628&lt;/strong&gt;（德国hk公司推出的g36c突击步枪）&lt;/p&gt;
&lt;p&gt;J16 &lt;strong&gt;￥390&lt;/strong&gt;（同ldt都是416d不过是面包拖，第二次出现了）&lt;/p&gt;
&lt;p&gt;J17 &lt;strong&gt;￥448&lt;/strong&gt;（好像是加利尔ACE突击步枪 ，这个价格都迷惑不说了，这么丑应该不会有人想买吧 ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;兵锋BF&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;MK17 &lt;strong&gt;￥588/￥668&lt;/strong&gt;（和明朝是一个东西，fn公司推出的mk17突击步枪也就是scar不过762口径）&lt;/p&gt;
&lt;p&gt;P90 无电池&lt;strong&gt;￥228&lt;/strong&gt;，黑/粉色（这玩意品控最近有点差）&lt;/p&gt;
&lt;p&gt;MP7 &lt;strong&gt;￥198&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;97式 &lt;strong&gt;￥198&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;HLF恒利丰&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ARP &lt;strong&gt;￥488&lt;/strong&gt;（同小月亮第二次了）&lt;/p&gt;
&lt;p&gt;UMP45 &lt;strong&gt;￥268&lt;/strong&gt;（hk公司ump45冲锋枪）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;CYMA司马&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;SCAR 黑色/沙色&lt;strong&gt;￥358&lt;/strong&gt;（mk16版本）&lt;/p&gt;
&lt;p&gt;M4丐版 黑色&lt;strong&gt;￥218&lt;/strong&gt;，沙色&lt;strong&gt;￥228&lt;/strong&gt;（m4cqb第三次了）&lt;/p&gt;
&lt;p&gt;AK &lt;strong&gt;￥298&lt;/strong&gt;（ak47）&lt;/p&gt;
&lt;p&gt;MP5 &lt;strong&gt;￥298&lt;/strong&gt;（据大佬说很拉胯）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;精击&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;SLR 基础&lt;strong&gt;￥500&lt;/strong&gt;，金齿&lt;strong&gt;￥528&lt;/strong&gt;（一个挺不错的短突）&lt;/p&gt;
&lt;p&gt;SLR3.0 &lt;strong&gt;558&lt;/strong&gt;（基本上就是换了个拖，然后鱼骨加长）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322203325313.png&quot; alt=&quot;image-20220322203325313&quot;&gt;&lt;/p&gt;
&lt;p&gt;SR16 &lt;strong&gt;￥960&lt;/strong&gt;（虽然有人开车到860））&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322203215475.png&quot; alt=&quot;image-20220322203215475&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;仁祥&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;AK74u/AK102 &lt;strong&gt;￥558&lt;/strong&gt;（ak74u/ak102）&lt;/p&gt;
&lt;p&gt;AK47s/AKM 木纹托/折叠托（ak47s和47）低配金齿&lt;strong&gt;￥428&lt;/strong&gt;，顶配金齿金管&lt;strong&gt;￥498&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;沙鹰 &lt;strong&gt;￥148&lt;/strong&gt;（ 裸水的沙漠之鹰）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;STD斯泰迪&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1911 &lt;strong&gt;￥98&lt;/strong&gt;《电手之王》《10L容量弹夹》&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322204048865.png&quot; alt=&quot;image-20220322204048865&quot;&gt;&lt;/p&gt;
&lt;p&gt;SLR &lt;strong&gt;￥398&lt;/strong&gt;你能找到库存也可以反正我找不到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;SKD斯科迪&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;SKD G18 &lt;strong&gt;￥148&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SKD G18s &lt;strong&gt;￥268&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SKD M92F &lt;strong&gt;￥248&lt;/strong&gt;（18s就是换了aa滑的18c，92f就是伯莱塔92f）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;森屿（也就是北斗）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;M24 &lt;strong&gt;￥528&lt;/strong&gt;（m24，传说中的反物质改水，不过最近没啥货了，据说是反响不大，厂家没有意向做了）&lt;/p&gt;
&lt;p&gt;F4 &lt;strong&gt;￥688&lt;/strong&gt;（部分配件直接给了mk8就是下面那个）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322204422517.png&quot; alt=&quot;image-20220322204422517&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;FJS峰家盛&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;M4CQB &lt;strong&gt;￥238&lt;/strong&gt;（哟m4cqb又是你啊）&lt;/p&gt;
&lt;p&gt;MK8 &lt;strong&gt;￥398&lt;/strong&gt;（见到最低368，2021.12.27推出）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;火牛&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;M249 无电池&lt;strong&gt;￥758&lt;/strong&gt;，三色陆军/空军/黑版（m249没啥说的）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;泽华&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;M249 四代无电池&lt;strong&gt;￥238&lt;/strong&gt;（同上）&lt;/p&gt;
&lt;p&gt;巴雷特 不带电池&lt;strong&gt;￥228&lt;/strong&gt;，短管加15提拔加18（比东方汇还还原一点，并且可以全自动的m82a1）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;捷鹰&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;水不抛MSR &lt;strong&gt;￥568&lt;/strong&gt;  、水抛MSR &lt;strong&gt;￥578&lt;/strong&gt;、软抛MSR &lt;strong&gt;￥430&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322204746710.png&quot; alt=&quot;image-20220322204746710&quot;&gt;&lt;/p&gt;
&lt;p&gt;水不抛AWM &lt;strong&gt;￥360&lt;/strong&gt;、水抛AWM &lt;strong&gt;￥495&lt;/strong&gt;、软抛AWM &lt;strong&gt;￥330&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322205049270.png&quot; alt=&quot;image-20220322205049270&quot;&gt;&lt;/p&gt;
&lt;p&gt;水不抛SVD &lt;strong&gt;￥268&lt;/strong&gt;、水抛SVD &lt;strong&gt;￥368&lt;/strong&gt;、软抛SVD &lt;strong&gt;￥348&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322205134905.png&quot; alt=&quot;image-20220322205134905&quot;&gt;&lt;/p&gt;
&lt;p&gt;水抛M24 &lt;strong&gt;￥398&lt;/strong&gt;、软抛M24 &lt;strong&gt;￥328&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最顶上是东方汇，中间是鹰awm，下面是msr，东方汇在下面往下滑一下就行&lt;/p&gt;
&lt;p&gt;m24有全黑&lt;/p&gt;
&lt;p&gt;鹰之星就是小捷鹰，全abs塑料的东西不推荐&lt;/p&gt;
&lt;h3&gt;东方汇&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;巴雷特 &lt;strong&gt;￥638&lt;/strong&gt;（不能半自动的巴雷特m82a1）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;兵宝&lt;/h3&gt;
&lt;p&gt;没什么买的了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;M24 软蛋&lt;strong&gt;￥268&lt;/strong&gt;（鸡苗大的像块砖）&lt;/p&gt;
&lt;p&gt;G26 &lt;strong&gt;￥19.9&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;乖巧虎&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;98k &lt;strong&gt;￥298&lt;/strong&gt;、积木98k &lt;strong&gt;￥198&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;M40 黑&lt;strong&gt;￥298&lt;/strong&gt;，沙&lt;strong&gt;￥298&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;莫辛纳甘 软弹&lt;strong&gt;￥388&lt;/strong&gt;（莫辛纳甘的瞄准镜要400）&lt;/p&gt;
&lt;p&gt;莫辛纳甘 专用激光头&lt;strong&gt;￥158&lt;/strong&gt;，专用感应靶&lt;strong&gt;￥128&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;UDL&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;2011 白色&lt;strong&gt;￥178&lt;/strong&gt;，黑色&lt;strong&gt;￥198&lt;/strong&gt;（这个价控的就不太好，实在太贵了）&lt;/p&gt;
&lt;p&gt;1014 黑/白色&lt;strong&gt;￥178&lt;/strong&gt;（注意！注意tti的刻字，有一个闪电标的不是udl）&lt;/p&gt;
&lt;p&gt;温彻斯特1887 &lt;strong&gt;￥218&lt;/strong&gt;（新推出的木纹板价格）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;壮森&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;M870 &lt;strong&gt;￥388&lt;/strong&gt;（盗版的AKAr1，盗版的不错）改水套餐，水蛋壳加内管￥78&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;红莲&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;蜜獾 &lt;strong&gt;￥388&lt;/strong&gt;（性能比较一般）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bbs.nga.cn/read.php?tid=25817293&quot;&gt;https://bbs.nga.cn/read.php?tid=25817293&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20220322210733838.png&quot; alt=&quot;image-20220322210733838&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Javascript2021年大事记]]></title><description><![CDATA[一月 StateofJS 2020调查结果出炉 Snowpack 3.0发布 React初创成员从Facebook离职 二月 npm 7.0 发布 Vite 2.0发布 三月 Nodejs团队开始思考Nodejs下一个10年的发展规划  jQuery发布3.6.0版本  V…]]></description><link>https://blog.deathdealer.cn/basic/javascript_2021_monthbymonth/</link><guid isPermaLink="false">https://blog.deathdealer.cn/basic/javascript_2021_monthbymonth/</guid><pubDate>Fri, 24 Dec 2021 21:12:13 GMT</pubDate><content:encoded>&lt;h4&gt;一月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://2020.stateofjs.com/zh-Hans/&quot;&gt;StateofJS 2020调查结果出炉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.snowpack.dev/posts/2021-01-13-snowpack-3-0&quot;&gt;Snowpack 3.0&lt;/a&gt;发布&lt;/li&gt;
&lt;li&gt;React初创成员从Facebook离职&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;二月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.blog/2021-02-02-npm-7-is-now-generally-available/&quot;&gt;npm 7.0&lt;/a&gt; 发布&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/yyx990803/announcing-vite-2-0-2f0a&quot;&gt;Vite 2.0&lt;/a&gt;发布&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;三月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Nodejs团队开始思考Nodejs下一个10年的&lt;a href=&quot;https://nodejs.medium.com/next-10-years-of-node-js-understanding-the-needs-of-the-node-js-constituencies-2f95a1df6a6f&quot;&gt;发展规划&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.jquery.com/2021/03/02/jquery-3-6-0-released/&quot;&gt;jQuery发布3.6.0版本&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;V8加速了它的&lt;a href=&quot;https://v8.dev/blog/faster-releases&quot;&gt;发布周期&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tc39.es/ecma262/2021/&quot;&gt;ES2021候选规范&lt;/a&gt;发布&lt;/li&gt;
&lt;li&gt;V8引擎发布了&lt;a href=&quot;https://v8.dev/blog/v8-release-90&quot;&gt;9.0版本&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Deno成立了一家&lt;a href=&quot;https://deno.com/blog/the-deno-company&quot;&gt;公司&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;四月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/the-node-js-collection/node-js-16-available-now-7f5099a97e70&quot;&gt;Node.js 16&lt;/a&gt; 发布&lt;/li&gt;
&lt;li&gt;Nodejs开始支持&lt;a href=&quot;https://dmitripavlutin.com/ecmascript-modules-nodejs/&quot;&gt;ESM规范&lt;/a&gt;模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;五月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Rome的创始人创建公司并融到一些钱，开始雇人全职搞&lt;a href=&quot;https://rome.tools/&quot;&gt;Rome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;六月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.medium.com/introducing-undici-4-1e321243e007&quot;&gt;Undici 4&lt;/a&gt; 发布，它是Nodejs中更新更优秀的Http客户端&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html&quot;&gt;React 18&lt;/a&gt; 揭开了神秘的面纱&lt;/li&gt;
&lt;li&gt;ES2021被完全批准和采用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;七月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;低代码环境 &lt;a href=&quot;https://nodered.org/blog/2021/07/20/version-2-0-released&quot;&gt;Node-RED 2.0&lt;/a&gt; 发布&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;八月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;维基百科基金会&lt;a href=&quot;https://lists.wikimedia.org/hyperkitty/list/wikitech-l@lists.wikimedia.org/thread/SOZREBYR36PUNFZXMIUBVAIOQI4N7PDU/&quot;&gt;选用Vue&lt;/a&gt;作为其前端框架&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://javascriptweekly.com/link/118026/web&quot;&gt;Vue 3.2&lt;/a&gt; 发布&lt;/li&gt;
&lt;li&gt;Ruby团队在RubyOnRails框架中考虑了一种处理JavaScript的&lt;a href=&quot;https://world.hey.com/dhh/modern-web-apps-without-javascript-bundling-or-transpiling-a20f2755&quot;&gt;新方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;九月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Node.js实装了名为&lt;a href=&quot;https://nodejs.org/dist/latest-v16.x/docs/api/corepack.html&quot;&gt;Corepack&lt;/a&gt;的实验性质包管理器，目标是替代npm&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;十月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/blog/release/v17.0.0/&quot;&gt;Node 17&lt;/a&gt; 发布&lt;/li&gt;
&lt;li&gt;React全新的&lt;a href=&quot;https://beta.reactjs.org&quot;&gt;文档站点&lt;/a&gt;揭开神秘面纱&lt;/li&gt;
&lt;li&gt;jQuery Mobile被&lt;a href=&quot;https://blog.jquery.com/2021/10/07/jquery-maintainers-continue-modernization-initiative-with-deprecation-of-jquery-mobile/&quot;&gt;废弃&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://parceljs.org/blog/v2/&quot;&gt;Parcel 2&lt;/a&gt; 发布&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://remix.run/&quot;&gt;Remix&lt;/a&gt;拿到了300万美元的融资&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/blog/whats-new-in-gatsby-4/&quot;&gt;Gatsby 4&lt;/a&gt; 发布&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;十一月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;React18进入&lt;a href=&quot;https://github.com/reactwg/react-18/discussions/112&quot;&gt;Beta&lt;/a&gt;阶段，离正式版不远了&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296&quot;&gt;Angular 13&lt;/a&gt; 发布&lt;/li&gt;
&lt;li&gt;Remix宣布&lt;a href=&quot;https://github.com/remix-run&quot;&gt;开源&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;十二月&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/create-react-app/releases/tag/v5.0.0&quot;&gt;Create React App 5.0&lt;/a&gt; 发布&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[webpack.config.js的智能提示]]></title><description><![CDATA[有两种方法打开的语法提示 1. 使用定义 在上面引用webpack的配置定义即可 以下是有效的： 以下是无效的，注意一定要在module.exports上面一行，中间跨越了其它代码就不起作用了。 来自于. 2. 使用Schema文件 这种方式适用于以为配置文件的webpack…]]></description><link>https://blog.deathdealer.cn/basic/webpack-hint/</link><guid isPermaLink="false">https://blog.deathdealer.cn/basic/webpack-hint/</guid><pubDate>Tue, 07 Dec 2021 13:50:13 GMT</pubDate><content:encoded>&lt;p&gt;有两种方法打开&lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt;的语法提示&lt;/p&gt;
&lt;h3&gt;1. 使用&lt;code class=&quot;language-text&quot;&gt;Typescript&lt;/code&gt;定义&lt;/h3&gt;
&lt;p&gt;在&lt;code class=&quot;language-text&quot;&gt;module.exports&lt;/code&gt;上面引用webpack的配置定义即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以下是有效的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/** @type {import(&apos;webpack&apos;).Configuration} */&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 提示有效&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;以下是无效的，&lt;strong&gt;注意一定要在module.exports上面一行，中间跨越了其它代码就不起作用了。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/** @type {import(&apos;webpack&apos;).Configuration} */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 不提示&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Configuration&lt;/code&gt;来自于&lt;a href=&quot;https://www.npmjs.com/package/@types/webpack&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@types/webpack&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;2. 使用Schema文件&lt;/h3&gt;
&lt;p&gt;这种方式适用于以&lt;code class=&quot;language-text&quot;&gt;webpack.config.json&lt;/code&gt;为配置文件的webpack工程（如果你的工程用的webpack.config.js就不适用了）&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;$schema&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./node_modules/webpack/schemas/WebpackOptions.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;mode&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;development&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 其它配置&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不推荐这种方式配置，因为json配置文件失去了&lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt;的灵活性和可编程性。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Rendering教程（6） - Refs]]></title><description><![CDATA[原文地址 https://alexsidorenko.com/blog/react-render-refs 先抛出一个问题：如何在按钮点击3次之后禁用它？（同时前两点击时不能触发re-render）  使用refs…]]></description><link>https://blog.deathdealer.cn/react/react-render-refs/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/react-render-refs/</guid><pubDate>Wed, 01 Dec 2021 19:35:28 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://alexsidorenko.com/blog/react-render-refs/&quot;&gt;原文地址&lt;/a&gt; &lt;a href=&quot;https://alexsidorenko.com/blog/react-render-refs&quot;&gt;https://alexsidorenko.com/blog/react-render-refs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先抛出一个问题：如何在按钮点击3次之后禁用它？（同时前两点击时不能触发re-render）&lt;/p&gt;
&lt;p&gt;&lt;video src=&quot;https://alexsidorenko.com/7722fd8845a91058ff5310d5811d76ad/initial.mp4&quot; autoplay=&quot;autoplay&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;使用refs保存数据&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;当你想让组件『记住』某些信息，又不想这些信息&lt;a href=&quot;https://beta.reactjs.org/learn/render-and-commit&quot;&gt;触发新的渲染&lt;/a&gt;的话，你可以使用&lt;code class=&quot;language-text&quot;&gt;ref&lt;/code&gt; — 它就像一个神秘的『口袋』，你可以把组件的信息存放其中。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://beta.reactjs.org/learn/referencing-values-with-refs&quot;&gt;React Docs - Referencing Values with Refs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面的示例用&lt;code class=&quot;language-text&quot;&gt;refs&lt;/code&gt;取代&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;来保存点击次数：&lt;/p&gt;
&lt;p&gt;&lt;video src=&quot;https://alexsidorenko.com/2d83e932382e8667de76c2e939c6f4b1/refs.mp4&quot; autoplay=&quot;autoplay&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;噗，&lt;code class=&quot;language-text&quot;&gt;refs&lt;/code&gt;的值更新了，但是按钮仍然可以点击，为啥呢？&lt;/p&gt;
&lt;h2&gt;组件渲染和DOM更新&lt;/h2&gt;
&lt;p&gt;要想禁用按钮，则必须更新DOM。React只有当&lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt;函数输出不同的内容时才更新DOM； React不会更新任何DOM，直到React组件渲染。而且，由于改变&lt;code class=&quot;language-text&quot;&gt;refs&lt;/code&gt;值不会导致组件重新渲染，所以按钮一直处于可点击状态。&lt;/p&gt;
&lt;p&gt;为了进一步演示效果，我们给它添加一个父组件，如下：&lt;/p&gt;
&lt;p&gt;&lt;video src=&quot;https://alexsidorenko.com/043414bb36580b69ab5313bbe54ecda6/parent.mp4&quot; autoplay=&quot;autoplay&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;默认情下，当渲染React组件时会递归的重新渲染其子组件。这就是为什么当更新&lt;code class=&quot;language-text&quot;&gt;Parent&lt;/code&gt; 组件的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;时，会同时渲染 &lt;code class=&quot;language-text&quot;&gt;Parent&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;Component&lt;/code&gt;。所以当 &lt;code class=&quot;language-text&quot;&gt;Component&lt;/code&gt; 更新时，React根据条件禁用了按钮。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很明显我们不能依赖父组件的更新来禁用按钮，接下来我们直接在&lt;code class=&quot;language-text&quot;&gt;Component&lt;/code&gt;中实现同样的行为。&lt;/p&gt;
&lt;h2&gt;更新&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;触发组件的重渲染&lt;/h2&gt;
&lt;p&gt;我们可以通过再次引入&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;来触发组件的重新渲染。但是我们又不能让组件在前两次点击时重新渲染，所以我们把点击次数&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;悄咪咪的保存在&lt;code class=&quot;language-text&quot;&gt;refs&lt;/code&gt;中。我们将新增一个&lt;code class=&quot;language-text&quot;&gt;butttonStatus&lt;/code&gt;变量，专门负责更新按钮的状态。 我们只在点击第3次时，将 &lt;code class=&quot;language-text&quot;&gt;butttonStatus&lt;/code&gt; 的值更新为disabled&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;buttonStatus&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setButtonStatus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;buttonStatus &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;disabled&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setButtonStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;disabled&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;video src=&quot;https://alexsidorenko.com/ca5a768e0862635aef1ce77ee3ea00a3/state.mp4&quot; autoplay=&quot;autoplay&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;文中的例子是为了演示&lt;code class=&quot;language-text&quot;&gt;refs&lt;/code&gt;的机制。 谨记：不必要的渲染并不总是坏的，没有必要纠结于消除每一次不必要的渲染。实际上，在实际的场景中，为了简单起见，仅仅依赖&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;而使得渲染3次组件反而更有意义（为啥？简单呗）。当然，在你的应用中可能会遇到不同的场景，这时候你应该已经知道可以通过&lt;code class=&quot;language-text&quot;&gt;refs&lt;/code&gt;的强大功能来优化你的组件行为了~&lt;/p&gt;
&lt;p&gt;全文完&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Introduce to EyeDropper API]]></title><description><![CDATA[EyeDropper API是什么  EyeDropper，没错！吸管工具，凡是做过前端的人都有过安装一个吸管工具用来吸取设计稿中某个颜色值的经历，今后这个工具浏览器会原生支持了，并且提供全套的API供我们使用。 EyeDropper API是 Capabilities…]]></description><link>https://blog.deathdealer.cn/basic/eyedropper-api/</link><guid isPermaLink="false">https://blog.deathdealer.cn/basic/eyedropper-api/</guid><pubDate>Sat, 30 Oct 2021 09:24:13 GMT</pubDate><content:encoded>&lt;h3&gt;EyeDropper API是什么&lt;/h3&gt;
&lt;p&gt; EyeDropper，没错！吸管工具，凡是做过前端的人都有过安装一个吸管工具用来吸取设计稿中某个颜色值的经历，今后这个工具浏览器会原生支持了，并且提供全套的API供我们使用。&lt;/p&gt;
&lt;p&gt;EyeDropper API是 &lt;a href=&quot;https://web.dev/fugu-status/&quot;&gt;Capabilities Project&lt;/a&gt; 项目的一部分，目前仍然在开发中。这篇博客会在随着实现的过程随时更新。&lt;/p&gt;
&lt;h3&gt;和&lt;code class=&quot;language-text&quot;&gt;type=&amp;#39;color&amp;#39;&lt;/code&gt;的区别&lt;/h3&gt;
&lt;p&gt;现有的HTML5中，&lt;code class=&quot;language-text&quot;&gt;&amp;lt; input type=&amp;#39;color&amp;#39; /&amp;gt;&lt;/code&gt;也可以吸取任意地方的颜色，它和EyeDropper API有什么不一样？主要是&lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt;提供的功能太多了，如果我只需要一个吸管工具的话，放置一个&lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt;有点小题大作， EyeDropper API提供了一种轻量级的吸色解决方案。&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20211030094832772.png&quot; alt=&quot;image-20211030094832772&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;当前状态&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Step&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;1. EyeDropper API的解释&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/WICG/eyedropper-api&quot;&gt;完成&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2. 初始化的草案和规范&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://wicg.github.io/eyedropper-api/&quot;&gt;完成&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3. 收集反馈&amp;#x26;设计迭代&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://web.dev/eyedropper/#feedback&quot;&gt;进行中&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;4. Origin Trial&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;5. &lt;strong&gt;启动&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;Chromium 95&lt;/strong&gt; (只有桌面版可用)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;EyeDropper API使用方法&lt;/h3&gt;
&lt;h4&gt;特征检测和浏览器支持&lt;/h4&gt;
&lt;p&gt;首先，判断当前浏览器是否支持EyeDropper&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;EyeDropper&apos;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// EyeDropper API可用&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：目前基于Chromium的浏览器（Chrome和Edge)从95版本开始支持EyeDropper API&lt;/p&gt;
&lt;h4&gt;API的使用&lt;/h4&gt;
&lt;p&gt;先创建 &lt;code class=&quot;language-text&quot;&gt;EyeDropper&lt;/code&gt; 的实例对象，然后调用该实例的 &lt;code class=&quot;language-text&quot;&gt;open()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; eyeDropper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EyeDropper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; eyeDropper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// The user selected a pixel, here is its color:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; colorHexValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sRGBHex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// The user escaped the eyedropper mode.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 调用&lt;code class=&quot;language-text&quot;&gt;open()&lt;/code&gt; 方法会唤起一个吸管的UI，同时返回一个&lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;，当用户吸取屏幕上的任意颜色后&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;，接着通过访问resolve后的&lt;code class=&quot;language-text&quot;&gt;sRGBHex&lt;/code&gt; 属性可以获取用户吸取的颜色值， (&lt;code class=&quot;language-text&quot;&gt;格式是#RRGGBB&lt;/code&gt;)；用户如果按&lt;code class=&quot;language-text&quot;&gt;esc&lt;/code&gt;键，进入&lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt;状态。&lt;/p&gt;
&lt;p&gt;除了&lt;code class=&quot;language-text&quot;&gt;esc&lt;/code&gt;之外，也可以通过编程方式取消吸色：把 &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/AbortController&quot;&gt;AbortController&lt;/a&gt; 的&lt;code class=&quot;language-text&quot;&gt;signal&lt;/code&gt;对象传递给 &lt;code class=&quot;language-text&quot;&gt;open()&lt;/code&gt; 方法，如下所示：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; abortController &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AbortController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; eyeDropper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;signal&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; abortController&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;signal&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 取消吸色&lt;/span&gt;
abortController&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结以上API，提取了一个共通函数:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sampleColorFromScreen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;abortController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; eyeDropper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EyeDropper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; eyeDropper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;signal&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; abortController&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;signal&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sRGBHex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WICG/eyedropper-api&quot;&gt;Public explainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://captainbrosset.github.io/eyedropper-demos/&quot;&gt;EyeDropper API Demo&lt;/a&gt; | &lt;a href=&quot;https://github.com/captainbrosset/eyedropper-demos&quot;&gt;EyeDropper API Demo source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=897309&quot;&gt;Chromium tracking bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=897309&quot;&gt;ChromeStatus.com entry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3ctag/design-reviews/issues/587&quot;&gt;TAG Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lists.webkit.org/pipermail/webkit-dev/2021-July/031929.html&quot;&gt;WebKit position request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/standards-positions/issues/557&quot;&gt;Mozilla position request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/a/chromium.org/g/blink-dev/c/rdniQ0D5UfY/m/Aywn9XyyAAAJ&quot;&gt;Intent to Ship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/eyedropper/&quot;&gt;Picking colors of any pixel on the screen with the EyeDropper API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Typescript：Type和Interface的异同点]]></title><description><![CDATA[image-20211009164409456]]></description><link>https://blog.deathdealer.cn/typescript/type-vs-interface/</link><guid isPermaLink="false">https://blog.deathdealer.cn/typescript/type-vs-interface/</guid><pubDate>Sat, 09 Oct 2021 16:43:33 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20211009164409456.png&quot; alt=&quot;image-20211009164409456&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React常见反模式]]></title><description><![CDATA[原文地址：https://isamatov.com/react-antipatterns，以下是我的翻译 React反模式以及如何避免 以下是React…]]></description><link>https://blog.deathdealer.cn/react/react-antipattern/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/react-antipattern/</guid><pubDate>Wed, 06 Oct 2021 10:33:23 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://isamatov.com/react-antipatterns%EF%BC%8C%E4%BB%A5%E4%B8%8B%E6%98%AF%E6%88%91%E7%9A%84%E7%BF%BB%E8%AF%91&quot;&gt;https://isamatov.com/react-antipatterns，以下是我的翻译&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;React反模式以及如何避免&lt;/h3&gt;
&lt;p&gt;以下是React应用中最为常见的反模式，以及修正的方法。如果不能在项目早期识别并避免使用这些反模式的话，它们会让代码库变得如同梦魇一般。&lt;/p&gt;
&lt;h3&gt;反模式1：把所有的东西都放在Redux中&lt;/h3&gt;
&lt;p&gt;Redux非常赞，它会在幕后进行性能优化，并且让我们在React应用中可以很方便的操作和获取全局状态。问题在于很多初学Redux的开发者，会像使用黑魔法一样使用redux去解决他们所遇到的任何问题。&lt;/p&gt;
&lt;p&gt;这种做法存在一些缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码将失去本意，如果所有的东西都塞到Redux里，基本不可能搞清楚应用到底是局部作用域抑或是全局作用域的。修改代码因此会变得非常棘手，因为不确定修改会不会影响到应用的其它部分。&lt;/li&gt;
&lt;li&gt;当使用Redux处理频繁发生的事件（如追踪表单输入）时，性能会下降。由于Redux会影响应用的全局状态，这必然会导致更多的重新渲染。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;准则：只在Redux中存放真正需要全局访问的数据，例如用户Session或应用主题。&lt;/strong&gt;其它内容可以在应用中特定的部分用&lt;code class=&quot;language-text&quot;&gt;Contxt API&lt;/code&gt;来替代。&lt;/p&gt;
&lt;h3&gt;反模式2：把所有的东西都放在&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;中&lt;/h3&gt;
&lt;p&gt;新手的另外一个问题是没有充分理解和使用&lt;code class=&quot;language-text&quot;&gt;Derived State&lt;/code&gt;的概念。&lt;/p&gt;
&lt;p&gt;应用中有很多变量是可以即时计算出来的。例如，有一个存储&lt;code class=&quot;language-text&quot;&gt;checkbox&lt;/code&gt;项目列表的数组，你是不需要在State中保存 &lt;code class=&quot;language-text&quot;&gt;checkedCount&lt;/code&gt;的值的， 可以通过遍历这个数组并过滤出已选择的项目的方式推导出&lt;code class=&quot;language-text&quot;&gt;checkedCount&lt;/code&gt; 的值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准则: 在保存变量到State之前，问问自己，我是否能够基于已经存储过的变量，通过某种方式的计算推导出来呢？”&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;反模式3：到处通过展开运算符传递Props&lt;/h3&gt;
&lt;p&gt;我经常在React应用中会看到这种技巧。&lt;/p&gt;
&lt;p&gt;React应用中可以通过&lt;code class=&quot;language-text&quot;&gt;{...props}&lt;/code&gt;向子组件传递&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;，这种方式看起来很简洁，你甚至会觉得你的代码很精练。但是真相是，随着时间的推移，你的代码将会变得不可预测，难以理解。&lt;/p&gt;
&lt;p&gt;当你四处使用展开运算符传递&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;时，无法一目了然地知道子组件实际上需要哪些&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;。 重构变得几乎不可能。即使只是很小的重构，可能也会遇上一堆的麻烦事情。此外追踪组件树上的BUG会变得异常困难。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准则：一般来说要避免展开运算符传递props。&lt;/strong&gt; （例外情况：容器组件或者高阶组件（HOC）可以合理使用展开运算符）&lt;/p&gt;
&lt;h3&gt;反模式4：在组件中定义组件&lt;/h3&gt;
&lt;p&gt;在组件中定义组件，如下所示：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OuterComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;InnerComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hello world &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InnerComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在组件中定义组件，有以下两个弊端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码变得紧密耦合。内部组件完全依赖外部组件的闭包环境。&lt;/li&gt;
&lt;li&gt;性能下降。外部组件每次渲染时，都会重新创建子组件的实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;准则：避免在组件中定义组件&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;反模式5：给组件传递过多的信息&lt;/h3&gt;
&lt;p&gt;组件除了必要的信息，其它的信息知道的越少越好。在决定传递多少数据的时候，要牢记&lt;code class=&quot;language-text&quot;&gt;Smart&lt;/code&gt;组件（智能组件）和&lt;code class=&quot;language-text&quot;&gt;Presentational&lt;/code&gt;组件（纯展示组件）的差异。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Presentational&lt;/code&gt;组件是纯展示组件，仅仅是输出&lt;code class=&quot;language-text&quot;&gt;HTML&lt;/code&gt;，它不保存任何&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;，不处理任何业务逻辑。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Smart&lt;/code&gt;组件通常会处理&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;和业务逻辑，通过请求API、操作Redux等方式给展示组件提供数据。 &lt;/p&gt;
&lt;p&gt;对纯展示组件，你只需要传递它渲染所必需的数据即可。&lt;code class=&quot;language-text&quot;&gt;Presentational&lt;/code&gt;组件不需要自己决定渲染哪些内容，这些逻辑应该由&lt;code class=&quot;language-text&quot;&gt;Smart&lt;/code&gt;组件来处理。举个栗子，代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useSelector &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getUsers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getCurrentUser &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./selectors/users&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PresentationalComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; userFound &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;userFound&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Welcome &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;userFound&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SmartComponet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;getUsers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currentUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;getCurrentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PresentationalComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当你检查父组件时，不清楚子组件是否包含条件渲染的逻辑。我们可以重新组织一下，让代码看起来更清晰。下面的示例中由&lt;code class=&quot;language-text&quot;&gt;Smart&lt;/code&gt;组件来处理条件渲染的逻辑。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useSelector &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getUsers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getCurrentUser &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./selectors/users&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PresentationalComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Welcome &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SmartComponet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;getUsers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currentUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;getCurrentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; userFound &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;userFound &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PresentationalComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;userFound&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尽可能的传递基本类型的数组给纯展示组件。这样做有益于简化今后的性能优化。下面的示例代码传递了整个&lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt; 对象：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PresentationalComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; user &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Welcome &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Your last login was on &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果可以，尽量给&lt;code class=&quot;language-text&quot;&gt;PresentationalComponent&lt;/code&gt;传递基本类型的数据，如&lt;code class=&quot;language-text&quot;&gt;firstName&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;lastName&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;date&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PresentationalComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; firstName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; date &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Welcome &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;firstName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;lastName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Your last login was on &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样修改一下，通过&lt;code class=&quot;language-text&quot;&gt;React.memo&lt;/code&gt;的加持，可以显著减少组件重新渲染的次数，从而提高性能。因为React按引用对比对象，按值对比原始类型。（可以查看我翻译的另外一篇博客：&lt;a href=&quot;https://blog.deathdealer.cn/react/react-render-props/%EF%BC%89&quot;&gt;https://blog.deathdealer.cn/react/react-render-props/）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总结一下向组件传递过多信息的问题如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;难以区分&lt;code class=&quot;language-text&quot;&gt;Smart&lt;/code&gt;组件和&lt;code class=&quot;language-text&quot;&gt;Presentational&lt;/code&gt;组件。&lt;/p&gt;
&lt;p&gt;主要的业务逻辑应该由&lt;code class=&quot;language-text&quot;&gt;Smart&lt;/code&gt;组件来负责处理，&lt;code class=&quot;language-text&quot;&gt;Presentational&lt;/code&gt;组件只负责输出HTML源码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能劣化&lt;/p&gt;
&lt;p&gt;当你向组件传递过多的&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;时，每次&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;变化都会重新渲染，这样也会导致很多冗余的渲染。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;反模式6：过度地性能优化&lt;/h3&gt;
&lt;p&gt;有时候开发者在还没有遇到性能问题时就开始优化性能。这是错误的实践，原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;复杂和过度设计的代码&lt;/p&gt;
&lt;p&gt;在问题还没有出现时，就试着去解决问题，代码过于复杂将会是必然结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浪费时间&lt;/p&gt;
&lt;p&gt;工作不饱和，有这时间还不如去开发新的功能，或者去解决更重要的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据我的经验，在React应用中正确的区别&lt;code class=&quot;language-text&quot;&gt;Smart&lt;/code&gt;组件和&lt;code class=&quot;language-text&quot;&gt;Presentational&lt;/code&gt;组件可以解决大约&lt;code class=&quot;language-text&quot;&gt;90%&lt;/code&gt;的性能问题。&lt;/p&gt;
&lt;h3&gt;反模式7：巨大的组件树&lt;/h3&gt;
&lt;p&gt;虽然放在最后一个讲，但绝非最不重要的一个反模式是：巨大的组件树（原作者指的是return后面的jsx部分)&lt;/p&gt;
&lt;p&gt;通常地，这个问题会在你没有花费时间去分离业务逻辑代码和界面展示代码时浮现出来。下面是示例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useSelector &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useHistory &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router-dom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getUsers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getCurrentUser &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./selectors/users&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; trackAction &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./tracker&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Avatar &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./UserAvatar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LargeComponentTree&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isAuthenticated&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; avatar&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; history &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useHistory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isAuthenticated &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; avatar &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;avatar&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isExpired &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Avatar&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isAuthenticated &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        	&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Welcome! &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;last&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        	&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Your last login was on &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;settings&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;trackAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Settings button clicked.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          Settings
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;my_page&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;trackAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;MyPage button clicked.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          My Page
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;logout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;trackAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Logout button clicked.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          Logout
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很恶心，对吧？ 我们很难读懂这里要干啥，有几个可以改进的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将很长的条件语句重构为独立的变量；&lt;/li&gt;
&lt;li&gt;将整个组件分割为更小的纯展示组件；&lt;/li&gt;
&lt;li&gt;将几个箭头函数移到组件树外面去；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优化过后的代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useSelector &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useHistory &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router-dom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getUsers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getCurrentUser &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./selectors/users&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; trackAction &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./tracker&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Avatar &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./UserAvatar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 将整个组件分割为更小的纯展示组件&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Greeting&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; last&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; date&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    	&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Welcome! &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;first&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;last&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    	&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Your last login was on &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LargeComponentTree&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isAuthenticated&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; avatar&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; history &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useHistory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// 将很长的条件语句重构为独立的变量；&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; showAvatar &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; isAuthenticated &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; avatar &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;avatar&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isExpired&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// 将几个箭头函数移到组件树外面去&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;route&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; actionName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;trackAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;actionName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;showAvatar &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Avatar&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isAuthenticated &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Greeting&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;last&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;settings&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Settings button clicked.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          Settings
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;my_page&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Settings button clicked.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          My Page
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;logout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Logout button clicked.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          Logout
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;组件树看起来好多了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准则：保持组件树的简结清爽，这样更容易看出组件应该渲染什么，以及什么时候渲染。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;在这篇博客中，我们了解了React中最常见的反模式，并了解了如何避免它们。在项目初始时就下意识地避免这些反模式，将来可以很轻松的完成重构。关于如何写出整洁的React代码，请参考我的另一篇博客&lt;a href=&quot;https://isamatov.com/simple-tips-for-writing-clean-react-components/&quot;&gt;Tips for writing clean React code &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感谢阅读！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[用Hooks实现关注点分离]]></title><description><![CDATA[原文地址，以下是我的翻译 如果你用过一段时间的React，你一定听说过容器组件和纯展示组件，或是或。这些术语描述了一种将React组件的UI层和业务逻辑分离的模式。 UI层和业务逻辑分离并不是React独有的：关注点分离是一种7…]]></description><link>https://blog.deathdealer.cn/react/hooks-separation-of-concerns/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/hooks-separation-of-concerns/</guid><pubDate>Wed, 08 Sep 2021 16:56:13 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://felixgerschau.com/react-hooks-separation-of-concerns/&quot;&gt;原文地址&lt;/a&gt;，以下是我的翻译&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你用过一段时间的React，你一定听说过&lt;strong&gt;容器组件&lt;/strong&gt;和&lt;strong&gt;纯展示组件&lt;/strong&gt;，或是&lt;code class=&quot;language-text&quot;&gt;smart组件&lt;/code&gt;或&lt;code class=&quot;language-text&quot;&gt;dumb组件&lt;/code&gt;。这些术语描述了一种将React组件的UI层和业务逻辑分离的&lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&quot;&gt;模式&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;UI层和业务逻辑分离并不是React独有的：关注点分离是一种70年代就存在的设计原则，例如后端通常会把访问数据库的代码和业务逻辑代码进行分离。&lt;/p&gt;
&lt;p&gt;所以在React中，我们通过把所有业务逻辑写在容器组件里，然后把数据通过&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;向纯展示组件传递这种方式来实现关注点分离的目的。随着Hooks的引入，现在又有了一种新的方法：&lt;em&gt;自定义Hooks&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;为什么要将业务逻辑和组件解耦？&lt;/h3&gt;
&lt;p&gt;在将业务逻辑和组件解耦之前，我们需要知道为什么要这么做。&lt;/p&gt;
&lt;p&gt;以每个函数（或组件）只负责一件事的方式来组织我们的代码，这样做的好处是更容易修改和维护。(Dave和 Andrew在&lt;strong&gt;《程序员修练之道》&lt;/strong&gt;这种书里称这种方式为 &lt;a href=&quot;https://felixgerschau.com/pragmatic-programmer-20th-anniversary-favorite-topic-summary/#orthogonality&quot;&gt;『正交性』&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;应用到React中后，我们的组件看起来更简洁，更有条理。比如说：我们在编辑UI之前无需修改任何业务逻辑。&lt;/p&gt;
&lt;p&gt;这样组织代码不仅使其看起来更好，而且使修改更新容易，因为Hooks不会影响UI，反之亦然。&lt;/p&gt;
&lt;p&gt;测试也更加容易实现：如果有必要的话完全可以撇开UI，只对业务逻辑进行单独的测试。然而，对我来说，最重要的优点还是如何组织我的代码。&lt;/p&gt;
&lt;h3&gt;如何用&lt;code class=&quot;language-text&quot;&gt;Hooks&lt;/code&gt;解耦业务逻辑&lt;/h3&gt;
&lt;p&gt;为了解耦业务逻辑，首先我们需要创建一个自定义Hooks。以下面这个组件为例，它用来计算指数值，界面如下图所示：&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210909092932982.png&quot; alt=&quot;image-20210909092932982&quot; style=&quot;zoom:40%;&quot;&gt;
&lt;p&gt;可以到这里看源码&lt;a href=&quot;https://codepen.io/fgerschau/pen/OJmMYoG&quot;&gt;Codepen&lt;/a&gt;，主要的代码如下所示：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ExponentCalculator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setBase&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;exponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setExponent&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; exponent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleBaseChange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setBase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleExponentChange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setExponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;blue-wrapper&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;handleBaseChange&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;handleExponentChange&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;exponent&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看起来已经不错了，但为了能继续写下去，你可以&lt;em&gt;想像&lt;/em&gt; 一下这里还有N多其它复杂的逻辑。&lt;/p&gt;
&lt;p&gt;第1步，我们先把业务逻辑移到&lt;strong&gt;自定义Hook&lt;/strong&gt;里面，然后在组件中调它。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useExponentCalculator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setBase&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;exponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setExponent&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; exponent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleBaseChange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setBase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleExponentChange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setExponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    exponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    handleBaseChange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    handleExponentChange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ExponentCalculator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    exponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    handleExponentChange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    handleBaseChange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useExponentCalculator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以把这个hook移到单独的文件中，这样看起来更加【关注点分离】&lt;/p&gt;
&lt;p&gt;此外，可以进一步把自定义的hook拆分成更细分且可重复使用的函数。这个示例中，把 &lt;code class=&quot;language-text&quot;&gt;calculateExponent&lt;/code&gt;提取出来。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// useExponentCalculator.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;calculateExponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; exponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; base &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; exponent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useExponentCalculator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setBase&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;exponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setExponent&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calculateExponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; exponent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试这个函数比测试第1个示例中的整个组件要容易的多。我们可以使用任何nodejs的测试框架来测试它，甚至不支持React都行。&lt;/p&gt;
&lt;p&gt;现在我们的组件和自定义Hooks中有了框架特定（React）的代码，而业务逻辑代码则写在稍后会定义的函数中（框架无关） &lt;/p&gt;
&lt;h3&gt;最佳实践&lt;/h3&gt;
&lt;h4&gt;命名&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;我喜欢用组件的名称来命令自定义Hook，通常是&lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt;+&lt;code class=&quot;language-text&quot;&gt;组件名&lt;/code&gt;这样的形式 (例如：&lt;code class=&quot;language-text&quot;&gt;useExponentCalculator&lt;/code&gt;)。然后文件名和Hook名相同。&lt;/li&gt;
&lt;li&gt;你可能想要遵循不同的命名约定，但建议在项目中最好保持一致。&lt;/li&gt;
&lt;li&gt;如果能复用自定义Hook的部分代码，通常可以将它移动到&lt;code class=&quot;language-text&quot;&gt;src/hooks&lt;/code&gt;目录下另一个文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;不要过度拆分&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;务实一些，如果组件只有几行代码，也没有必要分离业务逻辑了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;CSS-in-JS&lt;/h4&gt;
&lt;p&gt;如果你用了 CSS-in-JS 库 (&lt;code class=&quot;language-text&quot;&gt;useStyles&lt;/code&gt;)，你可能还想将此代码移动到另一个文件。&lt;/p&gt;
&lt;p&gt;可以将它移动到与钩子相同的文件中。但是，如果文件变得太大，最好把它放在组件之上的同一个文件里（定义在组件代码上面），也可以把它移到它自己的文件中。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无论你是否认为自定义Hooks改善了你的代码，最终取决于个人喜好。如果你的项目代码并没有包含太多的业务逻辑，也就没必要进行拆分了。&lt;/li&gt;
&lt;li&gt;自定义Hooks只是代码模块化的一种方法，如果可能的话，我还强烈建议将组件拆分成更小的，可重用的代码块&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[React Children Utilities]]></title><description><![CDATA[原文地址，下面是我的翻译 摘要 这篇博客，我们将会讨论和学习如何对进行遍历。特别是我们会深入研究一下React提供的方法，它可以确保遍历时的性能和准确性。 前言 React…]]></description><link>https://blog.deathdealer.cn/react/children-iteration-methods/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/children-iteration-methods/</guid><pubDate>Tue, 31 Aug 2021 23:05:13 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2021/08/react-children-iteration-methods/&quot;&gt;原文地址&lt;/a&gt;，下面是我的翻译&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt; 这篇博客，我们将会讨论和学习如何对&lt;code class=&quot;language-text&quot;&gt;React children&lt;/code&gt;进行遍历。特别是我们会深入研究一下React提供的&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt;方法，它可以确保遍历&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;时的性能和准确性。&lt;/p&gt;
&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;React开发者用的最明显最多的&lt;code class=&quot;language-text&quot;&gt;prop&lt;/code&gt;可能就是&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;了，大部分情况下，其实不需要知道和理解&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;长啥样。但有时候我们可能会用另外的&lt;code class=&quot;language-text&quot;&gt;element/component&lt;/code&gt;封装&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;，或者对它们进行排序，或者获取部分切片（slice），这些情况下，就必须要知道&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;长啥样了。&lt;/p&gt;
&lt;p&gt;这篇博客主要是学习一下React工具方法 &lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt; ，它可以让我们观察和遍历 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; , 同时也会介绍它的一些缺点以及如何克服这些缺点。如果你了解React的基础知识并且知道一点点&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;，那这篇博客就是为你准备的。&lt;/p&gt;
&lt;h3&gt;遍历子组件&lt;/h3&gt;
&lt;p&gt;在使用React时，大多数时候我们不会接触&lt;code class=&quot;language-text&quot;&gt;children prop&lt;/code&gt;，而只是会直接在React组件中使用它，如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;mt-10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但有时候却必须遍历&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;，这样我们就可以增强或更改子组件，而不必让子组自己去搞事情。 一共典型的场景是在父组件在遍历的过程中把索引（数组下标）信息传递给子组件，如下面代码所示：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Children&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cloneElement &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Breadcrumbs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arrayChildren &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        listStyle&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        display&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;flex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arrayChildren&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;child&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isLast &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; arrayChildren&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isLast &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;BreadcrumbItem child no. &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
            should be passed a &apos;link&apos; prop&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;
                &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                  display&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;inline-block&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                  textDecoration&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; marginRight&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5px&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cloneElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    isLast&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; marginRight&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5px&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cloneElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                  isLast&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isLast &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; marginRight&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5px&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                &gt;
              &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; isLast&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; isLast &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;black&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Breadcrumbs&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://goibibo.com/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Goibibo
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://goibibo.com/hotels/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Hotels
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
       A Fancy Hotel Name
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Breadcrumbs&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过 &lt;a href=&quot;https://codesandbox.io/embed/sm-article-21-lt6le?fontsize=14&amp;#x26;hidenavigation=1&amp;#x26;theme=dark&quot;&gt;Codesandbox&lt;/a&gt; 来体验一下上面的代码，我们做了以下几件事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用 &lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt; 方法确保 &lt;code class=&quot;language-text&quot;&gt;children prop&lt;/code&gt; 始终是一个数组。如果我们不这么做的话，在获取 &lt;code class=&quot;language-text&quot;&gt;children.length&lt;/code&gt; 时可能会崩掉，因为 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 可能是对象，也可能是数组，甚至可能是函数。此外，如果在&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;上调用数组的 &lt;code class=&quot;language-text&quot;&gt;.map&lt;/code&gt; 方法也可能会崩。&lt;/li&gt;
&lt;li&gt;在父组件 &lt;code class=&quot;language-text&quot;&gt;Breadcrumbs&lt;/code&gt; 中通过调用&lt;code class=&quot;language-text&quot;&gt;React.Children.map&lt;/code&gt;方法来遍历它的子组件。&lt;/li&gt;
&lt;li&gt;我们在迭代器（遍历函数）中使用了 &lt;code class=&quot;language-text&quot;&gt;index&lt;/code&gt;  (&lt;code class=&quot;language-text&quot;&gt;React.Children.map&lt;/code&gt;的第二个参数) ，因此，我们可以判断&lt;code class=&quot;language-text&quot;&gt;child&lt;/code&gt;是不是最后一个。&lt;/li&gt;
&lt;li&gt;如果是最后一个子组件，我们会克隆这个子组件并将&lt;code class=&quot;language-text&quot;&gt;isLast&lt;/code&gt;传给它，这样它就可以基于&lt;code class=&quot;language-text&quot;&gt;isLast&lt;/code&gt;应用一些样式。&lt;/li&gt;
&lt;li&gt;如果不是最后一个子组件，我们则必须确保这些子组件必须有&lt;code class=&quot;language-text&quot;&gt;link&lt;/code&gt;这个属性，否则会抛出一个错误。我们同样像第4步一样克隆一个子组件，并把&lt;code class=&quot;language-text&quot;&gt;isLast&lt;/code&gt;传给它，此外还会把它包裹在&lt;code class=&quot;language-text&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;标签里。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;Breadcrumbs&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;BreadcrumbItem&lt;/code&gt; 的使用者不需要关心哪一个子组件需要传&lt;code class=&quot;language-text&quot;&gt;link&lt;/code&gt;，也不需要关心如何应用样式， &lt;code class=&quot;language-text&quot;&gt;Breadcrumbs&lt;/code&gt; 组件内部会自动处理这些事情。&lt;/p&gt;
&lt;p&gt;这种隐式传递&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;的模式&lt;strong&gt;和/或&lt;/strong&gt;在父组件中将  &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;及&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt; 更新函数作为&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;传递给子组件的模式叫作 &lt;a href=&quot;https://kentcdodds.com/blog/compound-components-with-react-hooks/&quot;&gt;复合组件模式&lt;/a&gt;。 你可能对React Router的&lt;code class=&quot;language-text&quot;&gt;Switch&lt;/code&gt;组件中的这种模式比较熟悉，它把&lt;code class=&quot;language-text&quot;&gt;Route&lt;/code&gt;组件作为子组件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// react-router文档中的示例（https://reactrouter.com/web/api/Switch）&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Route&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Switch &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-router&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; routes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Switch&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;exact&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Home&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/about&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;About&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/:user&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;NoMatch&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Switch&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在已经确定的是，有时候需要调用&lt;code class=&quot;language-text&quot;&gt;React.Children.map&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt;方法遍历它的 &lt;code class=&quot;language-text&quot;&gt;children props&lt;/code&gt; , 我们先回顾一下其中之一：&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;React.Children.toArray&lt;/h3&gt;
&lt;p&gt;先看一个例子，看看它能做什么，它在哪里可能有用&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Debugger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    Children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; children&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fruits &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;orange&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mango&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Debugger&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://css-tricks.com/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0 10px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          CSS Tricks
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://smashingmagazine.com/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0 10px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          Smashing Magazine
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          fruits&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fruit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fruit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;margin&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;10px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fruit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Debugger&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过 &lt;a href=&quot;https://codesandbox.io/embed/sm-article-22-hhuws?fontsize=14&amp;#x26;hidenavigation=1&amp;#x26;theme=dark&quot;&gt;Codesandbox &lt;/a&gt;来体验上面的代码。示例中的 &lt;code class=&quot;language-text&quot;&gt;Debugger&lt;/code&gt; 组件在渲染方面除了原样返回&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;组件以外什么都没做。 渲染之外则打印了 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 和&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray(children)&lt;/code&gt;的值。&lt;/p&gt;
&lt;p&gt;如果你打开浏览器的开发者控制台，你就可以看到两者的不同之处：&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210831165816562.png&quot; alt=&quot;image-20210831165816562&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;ul&gt;
&lt;li&gt;第一个 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 的结构和值如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  Object1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 第一个&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;标签：&lt;span class=&quot;token constant&quot;&gt;CSS&lt;/span&gt; Tricks
  Object2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 第二个&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;标签：Smashing Magazine
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    Object3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; fruits第&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;个元素：apple
    Object4&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; fruits第&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;个元素：orange
    Object5  &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; fruits第&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;个元素：mango
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;第二个 &lt;code class=&quot;language-text&quot;&gt;React.Children.toArray(children)&lt;/code&gt; 的结构和值如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  Object1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 第一个&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;标签：&lt;span class=&quot;token constant&quot;&gt;CSS&lt;/span&gt; Tricks
  Object2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 第二个&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;标签：Smashing Magazine
  Object3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; fruits第&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;个元素：apple
  Object4&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; fruits第&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;个元素：orange
  Object5&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; fruits第&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;个元素：mango
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过&lt;a href=&quot;https://zh-hans.reactjs.org/docs/react-api.html#reactchildrentoarray&quot;&gt;React的文档&lt;/a&gt;来理解发生的事情：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt; 将 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 这个复杂的数据结构以数组的方式扁平展开并返回，并为每个子节点分配一个 key。当你想要在渲染函数中操作子节点的集合时，它会非常实用，特别是当你想要在向下传递 &lt;code class=&quot;language-text&quot;&gt;this.props.children&lt;/code&gt; 之前对内容重新排序或获取子集时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分解一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;以数组形式扁平化并返回&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 复杂的数据结构&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正如上面示例所看到的，&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt;会把 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; （复杂的数组结构，前面提到过它可能是对象，数组甚至是函数）转化成一个扁平的数组并返回。此外有个 &lt;a href=&quot;https://github.com/facebook/react/issues/6889#issuecomment-221858162&quot;&gt;Issue&lt;/a&gt; 解释了它的行为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它 (&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt;) 并不会把子组件取出来并扁平化他们，这没有任何意义。它会扁平化嵌套的数组或对象，例如 &lt;code class=&quot;language-text&quot;&gt;[[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;],[&amp;#39;c&amp;#39;, [&amp;#39;d&amp;#39;]]]&lt;/code&gt; 会被扁平化成&lt;code class=&quot;language-text&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;]&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;为每个元素分配一个key&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还是以上面的为例，下面是&lt;code class=&quot;language-text&quot;&gt;console.log(children)&lt;/code&gt; 展开一个元素后的内容：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  $$&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;react&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  key&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    href&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://smashingmagazine.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    children&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Smashing Magazine&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    style&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0 10px&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  ref&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// … &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是&lt;code class=&quot;language-text&quot;&gt;console.log(React.Children.toArray(children))&lt;/code&gt; 展开一个元素后的内容&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  $$&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;react&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  key&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    href&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://smashingmagazine.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    children&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Smashing Magazine&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    style&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0 10px&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  ref&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// … &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正如你看到的，除了扁平化 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 以外，会为每一个子元素添加一个唯一的&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;属性，React文档如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray()&lt;/code&gt; 在拉平展开子节点列表时，更改 key 值以保留嵌套数组的语义。也就是说，&lt;code class=&quot;language-text&quot;&gt;toArray&lt;/code&gt; 会为返回数组中的每个 key 添加前缀，以使得每个元素 key 的范围都限定在此函数入参数组的对象内。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为 &lt;code class=&quot;language-text&quot;&gt;.toArray&lt;/code&gt; 方法可能会改变&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;的顺序和位置，所以必须为每个元素分配一个唯一的&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;，以便React在协调（一致性比较）和渲染时进行优化。（参考 &lt;a href=&quot;https://reactjs.org/docs/reconciliation.html#recursing-on-children&quot;&gt;reconciliation and rendering optimization&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;重点关注一下 &lt;em&gt;&lt;code class=&quot;language-text&quot;&gt;使得每个元素 key 的范围都限定在此函数入参数组的对象内&lt;/code&gt;&lt;/em&gt;，请看第2个数组中的每个元素的&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; (对应 &lt;code class=&quot;language-text&quot;&gt;console.log(React.Children.toArray(children))&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token number&quot;&gt;.0&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; first link
&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; second link
&lt;span class=&quot;token number&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;$&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; first fruit
&lt;span class=&quot;token number&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;$&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; second fruit
&lt;span class=&quot;token number&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;$&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; third fruit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;fruits&lt;/code&gt;是原始&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;中的一个嵌套数组，它们的&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;都以 &lt;code class=&quot;language-text&quot;&gt;.2&lt;/code&gt;作为前缀。 &lt;code class=&quot;language-text&quot;&gt;.2&lt;/code&gt;对应的事实是他们也是数组的一部分。后缀 &lt;code class=&quot;language-text&quot;&gt;:$1&lt;/code&gt; ,&lt;code class=&quot;language-text&quot;&gt;:$2&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:$3&lt;/code&gt;对应&lt;code class=&quot;language-text&quot;&gt;fruits&lt;/code&gt; 产生的&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;元素，如果我们用数组索引作为&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;，相应的我们会分配到 &lt;code class=&quot;language-text&quot;&gt;:0&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:1&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:2&lt;/code&gt; 这样的后缀。&lt;/p&gt;
&lt;p&gt;假设&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;中有三层嵌套，如下所示：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Debugger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; retVal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    Children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;retVal&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;\n&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; retVal
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arrayOfReactElements &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;3&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Third&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Debugger&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;arrayOfReactElements&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Debugger&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分配的&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;$&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;$&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过 &lt;a href=&quot;https://codesandbox.io/embed/sm-article-23-5fwrd?fontsize=14&amp;#x26;hidenavigation=1&amp;#x26;theme=dark&quot;&gt;Codesandbox &lt;/a&gt;来体验上面的代码， &lt;code class=&quot;language-text&quot;&gt;$1&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;$2&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;$3&lt;/code&gt; 后缀是因为我们给React组件显式地指定了&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; 否则React 会报怨缺少&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从上面的内容中，我们可以得出&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt;的两个用例。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果业务中需要 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 必须是一个数组，可以用&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray(children)&lt;/code&gt; 替代，哪怕&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;是对象或者函数，它也能完美的工作。&lt;/li&gt;
&lt;li&gt;如果你必须对&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;进行排序、过滤、切片等，你可以信赖 &lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt; 可以始终为所有的子组件生成唯一的&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;问题&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt;也有一些问题，代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Children
          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;child&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://css-tricks.com&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0 10px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Google
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://smashingmagazine.com&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0 10px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          Smashing Magazine
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://arihantverma.com&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0 10px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Arihant’s Website&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过 &lt;a href=&quot;https://codesandbox.io/embed/sm-article-24-dqld3?fontsize=14&amp;#x26;hidenavigation=1&amp;#x26;theme=dark&quot;&gt;Codesandbox&lt;/a&gt;体验上述代码。 如果观察&lt;code class=&quot;language-text&quot;&gt;React.Fragment(&amp;lt;&amp;gt;...&amp;lt;/&amp;gt;)&lt;/code&gt;的子节点，你就会发现 &lt;code class=&quot;language-text&quot;&gt;li&lt;/code&gt; 标签中一下子渲染出两个&lt;code class=&quot;language-text&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;标签。如下图所示：&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210831204750481.png&quot; alt=&quot;image-20210831204750481&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;p&gt;这是因为 &lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt;不会遍历&lt;code class=&quot;language-text&quot;&gt;React.Fragment&lt;/code&gt;（ &lt;a href=&quot;https://github.com/facebook/react/issues/6889&quot;&gt;参考这个Issue&lt;/a&gt; ）。那我们可以做些什么呢？幸运的是啥也不用做。因为有一个开源的库 &lt;a href=&quot;https://github.com/grrowl/react-keyed-flatten-children&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;react-keyed-flatten-children&lt;/code&gt;&lt;/a&gt;替我们做了这些事情。&lt;/p&gt;
&lt;p&gt;用伪代码（实际的代码用注释来对应到下面6点）说明一下这个库做了什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这是一个函数，它只需要一个&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;作为必要的参数；&lt;/li&gt;
&lt;li&gt;遍历 &lt;code class=&quot;language-text&quot;&gt;React.Children.toArray(children)&lt;/code&gt; 并将子元素收集到累加器数组中；&lt;/li&gt;
&lt;li&gt;遍历的过程中，如果子节点是&lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt;或&lt;code class=&quot;language-text&quot;&gt;number&lt;/code&gt;，直接把值存入累加器数组中；&lt;/li&gt;
&lt;li&gt;如果子节点是有效的React组件，则先克隆一份，并分配一个适合的key，然后存入累加器数组中；&lt;/li&gt;
&lt;li&gt;如果子节点是&lt;code class=&quot;language-text&quot;&gt;React.Fragment&lt;/code&gt;，函数把&lt;code class=&quot;language-text&quot;&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;&lt;/code&gt;的&lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;作为参数来调用自身 (递归调用) ，然后将递归调用的结果存入累加器数组中；&lt;/li&gt;
&lt;li&gt;在进行上述步骤时，会记录遍历的深度，所以&lt;code class=&quot;language-text&quot;&gt;React.Fragment&lt;/code&gt;的子节点会分配正确的&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;。嵌套数组的&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;也会进行相同的处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Children&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  isValidElement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  cloneElement
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; isFragment &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-is&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; type &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ReactNode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  ReactChild&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/*************** 1. ***************/&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;flattenChildren&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 唯一必须的参数&lt;/span&gt;
  children&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ReactNode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// only used for debugging&lt;/span&gt;
  depth&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// is not required, start with default = []&lt;/span&gt;
  keys&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ReactChild&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/*************** 2. ***************/&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ReactChild&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nodeIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isFragment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/*************** 5. ***************/&lt;/span&gt;
        acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token function&quot;&gt;flattenChildren&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            depth &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;/*************** 6. ***************/&lt;/span&gt;
            keys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; nodeIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/*************** 4. ***************/&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isValidElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;cloneElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;token comment&quot;&gt;/*************** 6. ***************/&lt;/span&gt;
              key&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; keys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;/*************** 3. ***************/&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; node &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;string&quot;&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; node &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;number&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; acc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/*************** Acculumator Array ***************/&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对同样的示例，我们通过这个函数来解决之前的问题，代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; flattenChildren &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-keyed-flatten-children&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Fragment &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;flattenChildren&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          children
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;child&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://css-tricks.com&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0 10px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Google
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Fragment&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://smashingmagazine.com&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0 10px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          Smashing Magazine
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://arihantverma.com&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0 10px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Arihant’s Website&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Fragment&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过 &lt;a href=&quot;https://codesandbox.io/embed/sm-article-25-b76gn?fontsize=14&amp;#x26;hidenavigation=1&amp;#x26;theme=dark&quot;&gt;Codesandbox&lt;/a&gt; 查看最终的结果，&lt;strong&gt;It works！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个函数的github仓库里有 &lt;a href=&quot;https://github.com/grrowl/react-keyed-flatten-children/blob/master/index.spec.tsx&quot;&gt;7 个测试用例&lt;/a&gt; ，通过阅读这些测试用例来推导这个函数的功能也是很有意思的。&lt;/p&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;Children&lt;/code&gt; 工具类长期存在的问题&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React.Children&lt;/code&gt; 是一个有缺陷的抽象，并且处理维护模式。&lt;/p&gt;
&lt;p&gt;— &lt;a href=&quot;https://github.com/reactjs/rfcs/pull/61#issuecomment-431247764&quot;&gt;丹大师&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;code class=&quot;language-text&quot;&gt;Children&lt;/code&gt;工具类的方法改变 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 行为的问题是：它在组件只有1层嵌套时才能工作。如果当我们把 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 包裹在另外一个组件时，就会失去可组合性。还是以第1个面包屑的示例来解释我在说啥：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Children&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cloneElement &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Breadcrumbs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        listStyle&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        display&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;flex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;child&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isLast &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// if (! isLast &amp;amp;&amp;amp; ! child.props.link ) {&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//   throw new Error(`&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//     BreadcrumbItem child no.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//     ${index + 1} should be passed a &apos;link&apos; prop`&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//   )&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// } &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;
                &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                  display&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;inline-block&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                  textDecoration&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; marginRight&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5px&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cloneElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    isLast&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; marginRight&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5px&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cloneElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                  isLast&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isLast &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; marginRight&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5px&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; isLast&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; isLast &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;black&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;BreadcrumbItemCreator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://smashingmagazine.com&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    Smashing Magazine
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Breadcrumbs&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://goibibo.com/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Goibibo
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://goibibo.com/hotels/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Goibibo Hotels
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;

      &amp;lt;!-- 再包裹一层 --&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItemCreator&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        A Fancy Hotel Name
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BreadcrumbItem&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Breadcrumbs&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://codesandbox.io/embed/sm-article-26-7067h?fontsize=14&amp;#x26;hidenavigation=1&amp;#x26;theme=dark&quot;&gt;Codesandbox &lt;/a&gt; 看一下效果吧。尽管新的组件 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;BreadcrumbItemCreator /&amp;gt;&lt;/code&gt; 正常渲染了，但是是因为&lt;code class=&quot;language-text&quot;&gt;Breadcrumb&lt;/code&gt; 组件没有办法获取到&lt;code class=&quot;language-text&quot;&gt;link&lt;/code&gt;属性，所以没办法以&lt;code class=&quot;language-text&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;形式来包裹&lt;code class=&quot;language-text&quot;&gt;child&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，React团队亲自下场推出了一个实验性的API： &lt;a href=&quot;https://www.npmjs.com/package/react-call-return&quot;&gt;react-call-return&lt;/a&gt;（&lt;strong&gt;现在已经失效了&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=60MfXWyQhRE&quot;&gt;Ryan Florence的视频&lt;/a&gt; 解释了问题的细节以及 &lt;code class=&quot;language-text&quot;&gt;react-call-return&lt;/code&gt; 是如何解决这个问题的。因为这个npm包从未在任何版本的React中发布过，所以他们计划从这个包中汲取灵感，开发出可用于生产环境的解决方案。 &lt;a href=&quot;https://github.com/reactjs/rfcs/pull/61#issuecomment-584402735&quot;&gt;可以参考丹大师的这个Comment&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;最后总结一下，我们学到了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;React.Children&lt;/code&gt; 的两个工具类 ：如何使用 &lt;code class=&quot;language-text&quot;&gt;React.Children.map&lt;/code&gt; 方法来构建复合组件，并深入学习了另一个方法&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;学习了 &lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt; 是如何把 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; （可能是对象，数组或函数）转换成扁平化数组的方式。这样就可以按需操作，如排序、过滤，切片等；&lt;/li&gt;
&lt;li&gt;学习了 &lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt; 不会遍历&lt;code class=&quot;language-text&quot;&gt;React Fragments&lt;/code&gt;内的子组件&lt;/li&gt;
&lt;li&gt;学习了一个开源npm包 &lt;code class=&quot;language-text&quot;&gt;react-keyed-flatten-children&lt;/code&gt; ，并且学习了它是如何解决第3点问题的方法。&lt;/li&gt;
&lt;li&gt;了解到 &lt;code class=&quot;language-text&quot;&gt;Children&lt;/code&gt; 工具类处于维护模式，因为他们不能很好的组合。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kentcdodds.com/blog/compound-components-with-react-hooks/&quot;&gt;Compound components with react hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/6889#issuecomment-221858162&quot;&gt;React.Children.toArray array flattening github issue explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/reconciliation.html#recursing-on-children&quot;&gt;React reconciliation: Recursing on children&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/6889&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;React.Children.toArray&lt;/code&gt; doesn’t traverse into fragments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/grrowl/react-keyed-flatten-children&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;react-keyed-flatten-children&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/grrowl/react-keyed-flatten-children/blob/master/index.spec.tsx&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;react-keyed-flatten-children&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/grrowl/react-keyed-flatten-children/blob/master/index.spec.tsx&quot;&gt;tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/react-call-return&quot;&gt;react-call-return&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=60MfXWyQhRE&quot;&gt;Ryan Florence’s Video explaining react-call-return&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reactjs/rfcs/pull/61#issuecomment-584402735&quot;&gt;React team’s plan to replace &lt;code class=&quot;language-text&quot;&gt;Children&lt;/code&gt; utilities with something more composable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mxstbr.blog/2017/02/react-children-deepdive/&quot;&gt;Max Stoiber’s &lt;code class=&quot;language-text&quot;&gt;React Children&lt;/code&gt; Deep Dive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reactjs/rfcs/pull/61#issuecomment-431247764&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;React.Children&lt;/code&gt; is a leaky abstraction, and is in maintenance mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[React Element]]></title><description><![CDATA[React 就像一个孩子。在搞清楚这个世界的每一件小事之前，它都要向每一个你所解释的 【X是Y】 询问 【Y是什么】 元素是一个用来描述组件实例或 DOM 节点及其需要属性的普通对象 示例： 翻译成element就是： React 元素可以分为两类： DOM类型的元素 DOM…]]></description><link>https://blog.deathdealer.cn/react/react-element/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/react-element/</guid><pubDate>Thu, 26 Aug 2021 16:07:23 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;React 就像一个孩子。在搞清楚这个世界的每一件小事之前，它都要向每一个你所解释的 【X是Y】 询问 【Y是什么】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;元素是一个用来&lt;strong&gt;描述&lt;/strong&gt;组件实例或 DOM 节点及其需要属性的普通对象&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
  props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;greeting&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hello, world&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React.createElement()&lt;/code&gt;翻译成element就是：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;h1&quot;&lt;/span&gt;
  props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    className&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;greeting&quot;&lt;/span&gt;
    children&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, world&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React 元素可以分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DOM类型的元素&lt;/p&gt;
&lt;p&gt;DOM类型的元素使用像h1、div、p等DOM节点创建React 元素，可以直接渲染的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件类型的元素&lt;/p&gt;
&lt;p&gt;组件类型的元素使用 React 组件创建React元素，需要递归地最终转成DOM类型的元素才能渲染&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;React元素描述的是React虚拟DOM的结构，React会根据虚拟DOM渲染出页面的真实DOM。所有的元素组成的树就是&lt;code class=&quot;language-text&quot;&gt;element-tree&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh-hans.reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html&quot;&gt;React 组件，元素和实例&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[如何获取正确的setState之后的值]]></title><description><![CDATA[两种方法 在的回调函数中，可以获取到更新后的值 把放在中调用，可以立马获取到更新的值 重点讲第二种，因为在当前的React版本中还是可以的，未来可能会有问题。 React的三种渲染模式 legacy模式：，当前React使用的模式 blocking…]]></description><link>https://blog.deathdealer.cn/react/batched-update/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/batched-update/</guid><pubDate>Wed, 25 Aug 2021 21:43:13 GMT</pubDate><content:encoded>&lt;h3&gt;两种方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;的回调函数中，可以获取到更新后的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;值&lt;/li&gt;
&lt;li&gt;把&lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;放在&lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt;中调用，可以立马获取到更新的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重点讲第二种，因为在当前的React版本中还是可以的，未来可能会有问题。&lt;/p&gt;
&lt;h3&gt;React的三种渲染模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;legacy模式：&lt;code class=&quot;language-text&quot;&gt;ReactDOM.render(&amp;lt;App/&amp;gt;, rootNode)&lt;/code&gt;，当前React使用的模式&lt;/li&gt;
&lt;li&gt;blocking模式：&lt;code class=&quot;language-text&quot;&gt;ReactDOM.createBlockingRoot(rootNode).render(&amp;lt;App /&amp;gt;)&lt;/code&gt;，过渡到&lt;code class=&quot;language-text&quot;&gt;ConcurrentMode&lt;/code&gt;的一步，可以忽略&lt;/li&gt;
&lt;li&gt;concurrent模式：&lt;code class=&quot;language-text&quot;&gt;ReactDOM.createRoot(rootNode).render(&amp;lt;App /&amp;gt;)&lt;/code&gt;，未来稳定之后，是 React 的默认开发模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;源码&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 源码路径：react-reconciler/src/ReactFiberWorkLoop.old.js&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; batchedUpdates&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prevExecutionContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; executionContext&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  executionContext &lt;span class=&quot;token operator&quot;&gt;|=&lt;/span&gt; BatchedContext&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 这里的fn就是调用了setState的函数&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    executionContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prevExecutionContext&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      executionContext &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; NoContext &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__DEV__ &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ReactCurrentActQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isBatchingLegacy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;resetRenderTimer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;flushSyncCallbacksOnlyInLegacyMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;scheduleUpdateOnFiber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ....省略无关代码&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    lane &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; SyncLane &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// legacy模式的时候，泳道是同步的！&lt;/span&gt;
    executionContext &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; NoContext &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 如果放在setTimeout中执行setState,条件为true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fiber&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mode &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; ConcurrentMode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; NoMode &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__DEV__ &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ReactCurrentActQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isBatchingLegacy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;resetRenderTimer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 同步更新state值&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;flushSyncCallbacksOnlyInLegacyMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; root&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;结论&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Legacy模式：&lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;是异步执行的，但如果放在&lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt;中执行，&lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;是&lt;strong&gt;同步执行&lt;/strong&gt;的；&lt;/li&gt;
&lt;li&gt;Concurrent：&lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;始终是异步执行的，所以第二种方法可能会失效了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;演示地址&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/young-thunder-be5p9?file=/src/index.js&quot;&gt;codesandbox&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Rendering教程（5） - Context]]></title><description><![CDATA[原文地址 当组件消费的时候，如果值变了，组件会重新渲染。但是下面的示例中为什么  and  也重新渲染了？  组件树的结构为  Context和Rendering 第一篇Blog中，我们了解了React Rendering的行为。当组件重新渲染时，React…]]></description><link>https://blog.deathdealer.cn/react/react-render-context/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/react-render-context/</guid><pubDate>Tue, 24 Aug 2021 15:06:41 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://alexsidorenko.com/blog/react-render-context/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当组件消费&lt;code class=&quot;language-text&quot;&gt;Context&lt;/code&gt;的时候，如果&lt;code class=&quot;language-text&quot;&gt;context&lt;/code&gt;值变了，组件会重新渲染。但是下面的示例中为什么 &lt;code class=&quot;language-text&quot;&gt;Component A&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Component B&lt;/code&gt; 也重新渲染了？&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/1121&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/345403c36ea184fe348d0e3996725309/initial.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;组件树的结构为 &lt;code class=&quot;language-text&quot;&gt;App (ContextProvider) &amp;gt; A &amp;gt; B &amp;gt; C&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AppContext.Provider&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ComponentA&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AppContext.Provider&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ComponentA&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ComponentB&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ComponentB&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ComponentC&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Context和Rendering&lt;/h3&gt;
&lt;p&gt;第一篇Blog中，我们了解了React Rendering的行为。当组件重新渲染时，React会递归的重新渲染它的子组件， 并且会无视它们的&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;context&lt;/code&gt;。如果把上面示例中的&lt;code class=&quot;language-text&quot;&gt;context&lt;/code&gt;移除掉会发什么，请看下面示例：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/895&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/d9096d3e51b8bf32d6ba597e91c2793e/no-context.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;为了防止递归的重新渲染，我们可以使用&lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;，我们给一开始的示例再加上 &lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/1127&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/3347fc58a2f5a947c6cf4bba84244a4f/memo.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;所以 👇&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210824142052905.png&quot; alt=&quot;image-20210824142052905&quot; style=&quot;zoom:40%;&quot;&gt;
&lt;h3&gt;Context 和引用&lt;/h3&gt;
&lt;p&gt;实际应用中，会经常通过&lt;code class=&quot;language-text&quot;&gt;context&lt;/code&gt;传递更多的数据。有时候数据会依赖某些&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;的变量&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/1195&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/9e4b54f5eb5785ecff6c8bfd344f3439/text.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;我们只把 &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt;传递给了&lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt;，但当&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;更新时，消费的组件也重新渲染了。如何防止出现这种情况？&lt;/p&gt;
&lt;p&gt;提示： &lt;code class=&quot;language-text&quot;&gt;text&lt;/code&gt;是一个对象，它是非原始类型（non-primitive）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有的&lt;code class=&quot;language-text&quot;&gt;Consumer&lt;/code&gt;都是&lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt;的子孙节点，当&lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt;的&lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;变化时，会重新渲染&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/context.html#contextprovider&quot;&gt;React Docs - Context Provider&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 的值更新时，&lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;组件重新渲染，导致 &lt;code class=&quot;language-text&quot;&gt;text&lt;/code&gt; 变量重新声明和赋值（变成一个新的变量）。我们现在已经知道了原始类型和引用类型的区别。 &lt;code class=&quot;language-text&quot;&gt;{a: &amp;quot;lorem&amp;quot;, b: &amp;quot;ipsum&amp;quot;} !== {a: &amp;quot;lorem&amp;quot;, b: &amp;quot;ipsum&amp;quot;}&lt;/code&gt;意味着每一次App重新渲染时，即使&lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt;的值没有变，&lt;code class=&quot;language-text&quot;&gt;context&lt;/code&gt;的值也会发生变化。因此&lt;code class=&quot;language-text&quot;&gt;consumer&lt;/code&gt;也重新渲染了。为了防止出现这种情况，我们需要保证 &lt;code class=&quot;language-text&quot;&gt;text&lt;/code&gt; 变量一直维持相同对象的引用。之前的Blog中有介绍，我们可以使用 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;，所下所示：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/1195&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/732fa2873e4805de5f45ae3e1dde6dca/usememo.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;现在 &lt;code class=&quot;language-text&quot;&gt;text&lt;/code&gt; 变量只有在 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 依赖列表（a和b）发生变化时，才会重新定义并赋值。 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 不在依赖列表中，所以即使&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 变了， &lt;code class=&quot;language-text&quot;&gt;text&lt;/code&gt; 也不会发生任何变化，&lt;code class=&quot;language-text&quot;&gt;consumer&lt;/code&gt;也不会重新渲染。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Rendering教程（4） - useCallback]]></title><description><![CDATA[原文地址 我们经常会把匿名函数作为事件处理器传递给React组件。即使子组件被包裹，也会引起子组件的重新渲染  JS…]]></description><link>https://blog.deathdealer.cn/react/react-render-usecallback/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/react-render-usecallback/</guid><pubDate>Tue, 24 Aug 2021 13:22:02 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://alexsidorenko.com/blog/react-render-usecallback/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们经常会把匿名函数作为事件处理器传递给React组件。即使子组件被&lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;包裹，也会引起子组件的重新渲染&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/665&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/a74a21ec4b3136079f1597f02301f898/initial.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;h3&gt;JS中的函数&lt;/h3&gt;
&lt;p&gt;函数是一等公民&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一门编程语言的函数可以被当作变量一样用时，则称函数是这门语言的&lt;strong&gt;一等公民&lt;/strong&gt;。例如，在这门语言中，函数可以被当作参数传递给其他函数，可以作为另一个函数的返回值，还可以被赋值给一个变量。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Glossary/First-class_Function&quot;&gt;MDN - First-class Function&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当这样传递一个匿名函数时，很容易忽略&lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt;仅仅只是组件的一个&lt;code class=&quot;language-text&quot;&gt;prop&lt;/code&gt;，而函数也仅仅只是这个&lt;code class=&quot;language-text&quot;&gt;prop&lt;/code&gt;的值。如果把函数赋值给一个变量时，会更容易看出这一点，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/776&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/22835a82687aab5f649e792f80720ac4/declare-function.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;这种方式更加明显了，&lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt;存储了&lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt; 的值（函数）。无论什么时候这个值变了，子组件都会重新渲染。函数是非原始类型，只会进行引用的比较。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
a &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; b &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
a &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; a &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;父组件渲染时，&lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt;实际上会重新声明并被赋上新的引用值，因此子组件也触重新渲染。想要防止这种情况，需要每次都给 &lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt; prop传递相同的引用，这时候我们需要记住并缓存 &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;useCallback hook&lt;/h3&gt;
&lt;p&gt;之前的Blog中介绍了 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 在每次render时是如何重新计算和缓存值的。 &lt;code class=&quot;language-text&quot;&gt;useCallback&lt;/code&gt; 和它本质上是完全一样的，唯一的区别是&lt;code class=&quot;language-text&quot;&gt;useCallback&lt;/code&gt;返回的是函数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;useCallback(fn, deps) 等价于 useMemo(() =&gt; fn, deps).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh-hans.reactjs.org/docs/hooks-reference.html#usecallback&quot;&gt;React Docs - useCallback&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，如果想要缓存&lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt;的引用，只要把用 &lt;code class=&quot;language-text&quot;&gt;useCallback&lt;/code&gt;包裹一下就行了，先看下面的示例：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/778&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/3b1f1e02cc97c253db02a9169b9e9c38/empty-dependencies.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;可以看到子组件不再重新渲染了，但是&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;不管你点多少次按钮只更新了1次。这也是依赖列表的原因。  &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;和 &lt;code class=&quot;language-text&quot;&gt;useCallback&lt;/code&gt; 一样，只有在依赖列表中的项目发生变化时才会重新计算和更新缓存。 &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; 在第1次render时会被缓存。由于闭包的存在，即使&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;发生了变化，记忆的函数引用的也是之前的&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;值。在上面的示例中，引用的&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;始终是&lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;，因此 &lt;code class=&quot;language-text&quot;&gt;count + 1&lt;/code&gt; 始终是 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你不知道啥是&lt;code class=&quot;language-text&quot;&gt;闭包&lt;/code&gt;，请参考这篇文档 - &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;MDN -Closures&lt;/a&gt; 有很多消化的东西，请按需食用。一开始你可能很难理解闭包的概念，但理解闭包将给你React带来超能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了使&lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt;可以更新，可以把&lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt;放在依赖列表中。通过这种方法 &lt;code class=&quot;language-text&quot;&gt;useCallback&lt;/code&gt; 只要&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;变化时就会重新计算并返回一个持有最新词法作用域的 &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/778&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/cfc69f54ded494e3a7753bd21946fa3d/count-dependency.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;噗，又回到原点了。子组件也会一起跟着重新渲染，因为&lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt;每次都会随着&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;的改变而更新。为了解决这个问题，可以使用&lt;strong&gt;函数式更新&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;函数式更新&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果新的 state 需要通过使用先前的 state 计算得出，那么可以将函数传递给 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;。该函数将接收先前的 state，并返回一个更新后的值。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh-hans.reactjs.org/docs/hooks-reference.html#functional-updates&quot;&gt;React Docs - Functional Updates&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是函数式更新的示例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// State update&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Functional state update&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;prevCount&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; prevCount &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;函数式更新可以让我们把&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;从依赖列表中移除，而不用担心闭包的问题。函数 &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; 不会随着&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;改变而重新计算，而且 &lt;code class=&quot;language-text&quot;&gt;prevCount&lt;/code&gt; 会始终引用最新的值。&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/837&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/9401a1fb31656179d6294bf4ad068c2c/functional-update.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;完美解决！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Rendering教程（3） - useMemo]]></title><description><![CDATA[原文地址 快速示例： 子组件被 包裹，传递一个给它用于控制是否显示一个侧边栏（当用户的角色更新为”Admin…]]></description><link>https://blog.deathdealer.cn/react/react-render-usememo/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/react-render-usememo/</guid><pubDate>Mon, 23 Aug 2021 22:55:23 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://alexsidorenko.com/blog/react-render-usememo/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;快速示例：&lt;/p&gt;
&lt;p&gt;子组件被 &lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;包裹，传递一个&lt;code class=&quot;language-text&quot;&gt;options&lt;/code&gt;给它用于控制是否显示一个侧边栏（当用户的角色更新为”Admin”时，&lt;code class=&quot;language-text&quot;&gt;showSidebar=true&lt;/code&gt;否则为&lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;）。但从下图的效果来看，即使只是改变了用户名，子组件依然发生了重新渲染。如何防止这种情况的发生？&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/822&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/92b145bc405d8dd2f12ae45da9ee550d/quiz.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;是不是应该在计算 &lt;code class=&quot;language-text&quot;&gt;showSidebar&lt;/code&gt; 外面使用 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; ？且往下看&lt;/p&gt;
&lt;h3&gt;这是一个陷阱！&lt;/h3&gt;
&lt;p&gt;对不起，上面是一个蓄意误导的示例，简化一下来看为什么。&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/743&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/8312f160f6f8b92f2e3d04f508d3df5b/simple.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;即使直接将 &lt;code class=&quot;language-text&quot;&gt;showSidebar&lt;/code&gt;的值写死为&lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;，子组件仍旧会重新渲染。这是因为 &lt;code class=&quot;language-text&quot;&gt;options prop&lt;/code&gt; 是一个对象，从之前一篇Blog可知memo比较的是对象的引用而不是值。因此子组件会无视我们如何计算&lt;code class=&quot;language-text&quot;&gt;showSidebar&lt;/code&gt;的值，且始终会触发重新渲染，因为 &lt;code class=&quot;language-text&quot;&gt;options !== options&lt;/code&gt;。有两种方法可以防止这种情况的发生。&lt;/p&gt;
&lt;h3&gt;1. 拍平props&lt;/h3&gt;
&lt;p&gt;用&lt;code class=&quot;language-text&quot;&gt;boolean&lt;/code&gt;类型的变量 &lt;code class=&quot;language-text&quot;&gt;showSidebar&lt;/code&gt; 来存储原始值，当把 &lt;code class=&quot;language-text&quot;&gt;showSidebar&lt;/code&gt; 替代&lt;code class=&quot;language-text&quot;&gt;optoins&lt;/code&gt;直接传递给子组件时, 只有当这个&lt;code class=&quot;language-text&quot;&gt;boolean&lt;/code&gt;值发生变化时子组件才会触发重新渲染。&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/823&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/edd48000cdcb5d67252623f4c095ecd4/flatten.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;但有的时候你确实需要传入一个&lt;code class=&quot;language-text&quot;&gt;object prop&lt;/code&gt;，可能是因为架构要求这样做，也可能是在使用一个第三方的组件，当你别无选择的时候，应该怎么做？&lt;/p&gt;
&lt;h3&gt;2. useMemo&lt;/h3&gt;
&lt;p&gt;记住，能够提供完全相同引用的最简单方法，就是在React组件名部定义一个非原始类型的变量（在上一篇Blog中有提到）&lt;/p&gt;
&lt;p&gt;但是在我们的这个示例中，我们没办法在React组件外部去定义 &lt;code class=&quot;language-text&quot;&gt;options&lt;/code&gt; ，因为它依赖于组件的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;。这种情况下，我们可以利用 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;。 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;会缓存它的计算结果而不是每次render时都返回一个新的值, 它会返回旧的缓存的值，对于非原始类型来说总是会返回相同的对象引用。&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/817&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/9d2a5243004f14006eb5418484af6068/no-dependencies.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;options prop&lt;/code&gt;接受使用&lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;缓存下来的值，所以子组件不会再重新渲染。新的问题出现了，现在 &lt;code class=&quot;language-text&quot;&gt;options&lt;/code&gt; prop即使更新用户&lt;code class=&quot;language-text&quot;&gt;role&lt;/code&gt;的值也不会发生变化。这是因为我们给&lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 的第2个参数提供一个空的依赖列表（数组）&lt;/p&gt;
&lt;h3&gt;依赖列表&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;useMemo仅在依赖列表中的任意一个发生变化时，重新计算并更新缓存的值。这项优化帮助我们避免每次render时都进行一次高开销的计算。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh-hans.reactjs.org/docs/hooks-reference.html#usememo&quot;&gt;React docs - useMemo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为我们提供了一个空的依赖列表，所以&lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 不会在父组件重新渲染时重新计算&lt;code class=&quot;language-text&quot;&gt;showSidebar&lt;/code&gt;的值。可以通过将&lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt;对象添加到依赖列表中来修复这个问题，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/823&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/f56bff174cbf1c0f3c635b7ad2a4891e/user-dependency.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;现在一切又回到了原点。当和子组件毫无关联的属性 &lt;code class=&quot;language-text&quot;&gt;user.name&lt;/code&gt; 更新时子组件也触发重新渲染。为了解决这个问题，需要清楚 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 的依赖是如何工作的。&lt;/p&gt;
&lt;p&gt;每一次render &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 都会对依赖列表中的值进行浅比较(&lt;code class=&quot;language-text&quot;&gt;prevDependency === dependency&lt;/code&gt;)。如果任何一个依赖改变了，&lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;重新计算并更新缓存中的值。在之前的Blog中，简单介绍了 &lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;对原始类型和非原始类型值的浅比较机制，这一套机制对于 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;依然适用。&lt;/p&gt;
&lt;img src=&quot;https://alexsidorenko.com/static/3ec74161aaa95ab8357540790cecb86d/f058b/usememo-dependencies.png&quot; alt=&quot;test&quot; style=&quot;zoom:80%;&quot;&gt;
&lt;p&gt;示例中每一次状态的更新都是&lt;code class=&quot;language-text&quot;&gt;immutable&lt;/code&gt;的，意味着每次更新user对象的&lt;code class=&quot;language-text&quot;&gt;role&lt;/code&gt;或&lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt;属性，实际上是重新创建了一个新的对象。&lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;检测到 &lt;code class=&quot;language-text&quot;&gt;prevUser !== user&lt;/code&gt; ，所以进行了重新计算。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;updateName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请注意 &lt;code class=&quot;language-text&quot;&gt;user.role&lt;/code&gt;保存的是原始类型（string），就这意味着可以直接把它放到依赖列表中并且不用担心引用类型的比较。只有当&lt;code class=&quot;language-text&quot;&gt;user.role&lt;/code&gt; 的值更新了， &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 才会重新计算，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/823&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/42352d415e85a4ed08ef52bcc62f8e73/final.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;h3&gt;性能&lt;/h3&gt;
&lt;p&gt;这篇Blog中，我们探索了 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 作为一种提供稳定的非原始类型&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;的工具。 有极少数场景下， React可能会选择性遗忘缓存的值即使依赖列表中的值没有发生变化。但是只要你因为性能优化的原因使用它，就不会有什么问题，即使 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 重新计算缓存的值你的代码也能正常工作。在上面的示例中，即使React选择重新计算和缓存 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;，唯一无心发生的事也只是子组件重新渲染。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;你可以把 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 作为性能优化的手段，但不要把它当成语义上的保证。&lt;/strong&gt;将来，React 可能会选择“遗忘”以前的一些 memoized 值，并在下次渲染时重新计算它们，比如为离屏组件释放内存。先编写在没有 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 的情况下也可以执行的代码 —— 之后再在你的代码中添加 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;，以达到优化性能的目的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh-hans.reactjs.org/docs/hooks-reference.html#usememo&quot;&gt;React docs - useMemo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，请记住你不需要修复每一处不必要的重新渲染。有时候&lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;的性能损耗会超过它带来的收益。可以参考这篇文章： &lt;a href=&quot;https://kentcdodds.com/blog/usememo-and-usecallback&quot;&gt;When to useMemo and useCallback&lt;/a&gt; （ Kent C. Dodds.）&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Rendering教程（2） - Props]]></title><description><![CDATA[原文地址 子组件用memo包裹时，即使它的props没有变化，父组件重新渲染时为什么它仍然会重新渲染？  JS中有两种类型的值，理解它们的差异可以帮助我们更好的理解组件rendering 原始类型（Primitives） 第一种类型是将原始类型（，，，，，，）作为props…]]></description><link>https://blog.deathdealer.cn/react/react-render-props/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/react-render-props/</guid><pubDate>Mon, 23 Aug 2021 20:10:28 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://alexsidorenko.com/blog/react-render-props/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;子组件用memo包裹时，即使它的props没有变化，父组件重新渲染时为什么它仍然会重新渲染？&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/444&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/d91b67ddf615a785590f75ad157804ee/non-primitive-prop-rerenders-v3.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;JS中有两种类型的值，理解它们的差异可以帮助我们更好的理解组件rendering&lt;/p&gt;
&lt;h3&gt;原始类型（Primitives）&lt;/h3&gt;
&lt;p&gt;第一种类型是将原始类型（&lt;code class=&quot;language-text&quot;&gt;number&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;boolean&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;symbol&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;bigint&lt;/code&gt;）作为props&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/523&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/9b11be0c45b37887f2d0fd78f7fd66b2/primitive-value-v3.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;如果子组件被&lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;包裹，意味着只有当它的&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;变化时才会重新渲染。&lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;判断&lt;code class=&quot;language-text&quot;&gt;prpos&lt;/code&gt;是否变化的方法是对props进行一次浅比较（ &lt;code class=&quot;language-text&quot;&gt;prevProp === nextProp&lt;/code&gt;）因为 &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Alex&amp;quot;&lt;/code&gt;是一个原始类型（字符串）所以这个判断返回值是&lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;（即props没有发生变化），所以组件不会重新渲染。&lt;/p&gt;
&lt;h3&gt;非原始类型（Non-primitives）&lt;/h3&gt;
&lt;p&gt;第2种类型就是非原始类型，现在给&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;传递一个对象（非原始类型），为什么非原始类型就会使得子组件重新渲染呢？&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/444&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/d91b67ddf615a785590f75ad157804ee/non-primitive-prop-rerenders-v3.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;记住，&lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;能过进行浅比较来判定props是否改变。当比较两个非原始类型，例如： &lt;code class=&quot;language-text&quot;&gt;{display: &amp;quot;flex&amp;quot;} === {display: &amp;quot;flex&amp;quot;}&lt;/code&gt;, 结果是&lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在JavaScript中，对象是引用类型。两个不同的对象永远不会相等，即使他们有完全相同的属性和值。只有比较两个相同引用的对象，结果才会是true。具体如何比较对象，可以参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#%E6%AF%94%E8%BE%83%E5%AF%B9%E8%B1%A1&quot;&gt;MDN - Comparing Objects&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;引用&lt;/h3&gt;
&lt;p&gt;引用类型的变量是内存中的某个值的指针。如下图所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://alexsidorenko.com/static/feeeef14e54a1741e7b174f4450a5cf1/f058b/references.png&quot; alt=&quot;reference&quot;&gt;&lt;/p&gt;
&lt;p&gt;尽管&lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt;看起来完全一样，但是它两指向了内存中不同的值。 所以a===b返回&lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;，关于引用类型，可以参考 &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/apA.md#values-vs-references&quot;&gt;You Don’t Know JS (Values vs References)&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;知道了这些，我们该怎么防止子组件重新渲染？最简单的方法是在&lt;strong&gt;组件树之外&lt;/strong&gt;定义一个变量，然后将它作为props传递下去，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/585&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/47d025c8787e15b6561475091a65d1e0/declare-var-v3.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;用上面这种方法，当 &lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;比较props时，进行的比较是 &lt;code class=&quot;language-text&quot;&gt;style === style // true&lt;/code&gt; ，而不是 &lt;code class=&quot;language-text&quot;&gt;{display: &amp;quot;flex&amp;quot;} === {display: &amp;quot;flex&amp;quot;} // false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意：如果你是在父组件中定义的变量，上面的方法就会失效，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/584&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/31057d13093656291bfc4484ed7ad3ce/declare-var-inside-v3.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;这是因为每一次父组件渲染后， &lt;code class=&quot;language-text&quot;&gt;style&lt;/code&gt; 变量又被重新声明了（变成了一个新的对象引用）&lt;/p&gt;
&lt;h3&gt;匿名函数&lt;/h3&gt;
&lt;p&gt;函数和组件也是经常在React中用到的非原始类型。React中经常会传递匿名函数作为事件处理函数，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/442&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/29d4c89bab328ff06f23643da0f99d3c/anonymous-function-v3.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;函数也是非原始类型，因而会采用上节提到的相同的比较规则。如果想防止子组件重新渲染，则需要为&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;提供同一个引用对象，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/565&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/02b5ea5370b71cefd29049299f4ad3c1/anonymous-function-reference-v3.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;h3&gt;Memoization&lt;/h3&gt;
&lt;p&gt;实际的应用中，把非原始类型值其作为&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;传递时，可能会依赖于组件的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;和其它&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/446&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/e0880d4a6b3170f39d4787f64f8c79e9/memoization-v3.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;在这个示例中，不能将这个函数在React组件外部定义，而是必须在Parent组件内部定义（因为子组件想把某些值传给父组件）。但如何防止在每一次父组件re-render之后，子组件因为&lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt;重新声明并赋值而导致的重新渲染呢？这就是为什么React要提供 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;useCallback&lt;/code&gt; 两个Hook来&lt;strong&gt;记忆&lt;/strong&gt;这些&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;的值，且听下回分解。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Rendering教程（1） - It Always Re-renders]]></title><description><![CDATA[原文地址 先上图：  先看上图 👆，APP的父子结构是： ，代码如下： 组件A，B，C没有任何和，但是当重新渲染时他们仍然是会重新渲染的。 在正常的渲染过程中，React不会在乎子组件的是不是变化了，它会无条件地重新渲染子组件，因为父组件重新渲染了。 Mark Erikson…]]></description><link>https://blog.deathdealer.cn/react/react-render-always-rerenders/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/react-render-always-rerenders/</guid><pubDate>Mon, 23 Aug 2021 14:22:28 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://alexsidorenko.com/blog/react-render-always-rerenders/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先上图：&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/740&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/e683ce6a34ba9150a64731879649fb75/parent-rerender-new.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;先看上图 👆，APP的父子结构是： &lt;code class=&quot;language-text&quot;&gt;App &amp;gt; A &amp;gt; B &amp;gt; C&lt;/code&gt;，代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 只有App组件里维护了state&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ComponentA&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// A、B、C组件没有自己的state&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ComponentA&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ComponentB&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ComponentB&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ComponentC&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;组件A，B，C没有任何&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;，但是当&lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;重新渲染时他们仍然是会重新渲染的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在正常的渲染过程中，React不会在乎子组件的&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;是不是变化了，它会无条件地重新渲染子组件，因为父组件重新渲染了。&lt;/p&gt;
&lt;p&gt;Mark Erikson - &lt;a href=&quot;https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/#standard-render-behavior&quot;&gt;A (Mostly) Complete Guide to React Rendering Behavior&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了进一步演示上面的结论，我们给每个组件加上自己的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;来跟踪这一行为。&lt;/p&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/740&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/5026a216db461be8e241d5a23148ba0a/state-new.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;当&lt;code class=&quot;language-text&quot;&gt;C&lt;/code&gt;组件的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;变化时，只有&lt;code class=&quot;language-text&quot;&gt;C&lt;/code&gt;组件重新渲染。但是当&lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt;组件的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;变化时， &lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;C&lt;/code&gt;都重新渲染了。&lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt;重新渲染是因为它的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;更新了，而&lt;code class=&quot;language-text&quot;&gt;C&lt;/code&gt;的重新渲染则是因为它的父组件（B）重新渲染了。&lt;/p&gt;
&lt;p&gt;当&lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt;的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;更新时&lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt;会重新渲染了。&lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt;的重新渲染则是因为&lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt;，最后&lt;code class=&quot;language-text&quot;&gt;C&lt;/code&gt;的重新渲染则是因为&lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;如何避免重新渲染&lt;/h3&gt;
&lt;p&gt;在React中有好多方法可以避免不必要的&lt;code class=&quot;language-text&quot;&gt;re-render&lt;/code&gt;。本文会聚集于 &lt;code class=&quot;language-text&quot;&gt;React.memo&lt;/code&gt; 这种方式（其它方式将会在后续的文章中介绍）。如果你对 &lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;有兴趣，可以阅读一下丹大师的&lt;a href=&quot;https://overreacted.io/before-you-memo/&quot;&gt;Before you memo()&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这篇文章中也请记住这一点，我只会探索直接更新&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;或是父组件更新而导致的重新渲染，不会传递任何&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;（props变化的情况下一篇blog会讨论）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果用 &lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;包裹了组件，当父组件重新渲染时，他是不会重新渲染的。&lt;/p&gt;
&lt;p&gt; &lt;video style=&quot;aspect-ratio: 1360/850&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/080d4e7fbda8d86b1b1cae3ef4e68fbe/memo-1-new.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;注意：&lt;code class=&quot;language-text&quot;&gt;C&lt;/code&gt;组件因为&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;的更新而重新渲染，但是它的父组件B重新渲染后，它并没有重新渲染。&lt;/p&gt;
&lt;h3&gt;提升memo层级&lt;/h3&gt;
&lt;p&gt;把 &lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;的层级向上提升，看看会发生什么&lt;/p&gt;
&lt;p&gt; &lt;video style=&quot;aspect-ratio: 1360/850&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/28677def925378663b692d828e6d63a0/memo-2-new.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;A/B/C&lt;/code&gt;因为&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;更新导致的重新渲染，结论和之前一样。但是App的重新渲染不影响下面的子组件。结论是：&lt;strong&gt;用&lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;包裹的组件，会阻止它整个子树上的组件因为父组件（也就是这个用memo包裹的组件）更新而导致的重新渲染&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以你会看到这样的建议：（Contex tProvider组件应该使用&lt;code class=&quot;language-text&quot;&gt;React.memo&lt;/code&gt;）&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210823161114344.png&quot; alt=&quot;image-20210823161114344&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h3&gt;兄弟（相邻）组件如何？&lt;/h3&gt;
&lt;p&gt;&lt;video style=&quot;aspect-ratio: 1360/850&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://alexsidorenko.com/303d0e491afb2d055835688b36ba24ad/adjacent-new.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;兄弟组件也符合上面的规则，用 &lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt; 包裹的组件不会随着父组件更新而re-render，而且它的子组件树也不会重新渲染。&lt;/p&gt;
&lt;h3&gt;所有的组件都使用&lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;吗&lt;/h3&gt;
&lt;p&gt;假如 &lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;对提高性能有如此之大的效果，那用&lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt;来包裹一切组件有意义吗？答案是：并不是。但这个是下一篇Blog要写的东西了。&lt;/p&gt;
&lt;p&gt;此外，所果你有兴趣的话可以阅读一下这篇文章&lt;a href=&quot;https://kentcdodds.com/blog/fix-the-slow-render-before-you-fix-the-re-render&quot;&gt;Fix the slow render before you fix the re-render&lt;/a&gt; （Kent C. Dodds）&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hooks的实现原理]]></title><description><![CDATA[React Hooks: Not MAGIC, Just Arrays useState 的实现原理 先看useState的原型： 的输入是state的初始值，输出始终是一个元组，其中的会被用到，调用除了会设置新的state之外还会更新UI（通过调用函数实现） 绝大部分UI…]]></description><link>https://blog.deathdealer.cn/react/hooks-principle/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/hooks-principle/</guid><pubDate>Tue, 17 Aug 2021 13:48:13 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e&quot;&gt;React Hooks: Not MAGIC, Just Arrays&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;useState 的实现原理&lt;/h4&gt;
&lt;p&gt;先看useState的原型：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;setState&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initalState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt;的输入是state的初始值，输出始终是一个元组&lt;code class=&quot;language-text&quot;&gt;[state,state的setter函数]&lt;/code&gt;，其中的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;会被&lt;code class=&quot;language-text&quot;&gt;render函数&lt;/code&gt;用到，调用&lt;code class=&quot;language-text&quot;&gt;setter函数&lt;/code&gt;除了会设置新的state之外还会更新UI（通过调用&lt;code class=&quot;language-text&quot;&gt;render()&lt;/code&gt;函数实现）&lt;/p&gt;
&lt;p&gt;绝大部分UI组件不可能只有一个state变量，因此&lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt;会被多次调用，所以这些state会被保存到一个容器中，这个容器其实就是朴实无华的数组。具体过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。&lt;/li&gt;
&lt;li&gt;调用&lt;code class=&quot;language-text&quot;&gt;setter函数&lt;/code&gt;时，会将相应的&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;值更新，同时触发再次渲染的时候。&lt;strong&gt;cursor 被重置为 0&lt;/strong&gt;。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新，过程如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210817154008415.png&quot; alt=&quot;image-20210817154008415&quot; style=&quot;zoom:45%;&quot;&gt;
&lt;p&gt;最简易的使用数组模拟的useState实现代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; memoizedState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cursor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initialState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currentCursor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cursor
  &lt;span class=&quot;token comment&quot;&gt;// 第一次render时用初始值，后面都会使用容器中的值&lt;/span&gt;
  memoizedState&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;currentCursor&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memoizedState&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;currentCursor&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; initialState 
  
  &lt;span class=&quot;token comment&quot;&gt;// setter，应用了闭包&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    memoizedState&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;currentCursor&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newState
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//更新UI&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;cursor
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;memoizedState&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;currentCursor&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setState&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;真实的React实现肯定比上面模拟的复杂多了，但是本质也只是使用了&lt;code class=&quot;language-text&quot;&gt;单向链表&lt;/code&gt;替代&lt;code class=&quot;language-text&quot;&gt;数组&lt;/code&gt;，不需要再使用&lt;code class=&quot;language-text&quot;&gt;cursor&lt;/code&gt;来处理位置，而是使用&lt;code class=&quot;language-text&quot;&gt;next&lt;/code&gt;方法来串联起所有的hooks，如下图所示：&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210817153242989.png&quot; alt=&quot;image-20210817153242989&quot; style=&quot;zoom:45%;&quot;&gt;
&lt;h5&gt;Dispatcher&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;起到的作用与SpringMVC中的&lt;code class=&quot;language-text&quot;&gt;DispatcherServlet&lt;/code&gt;类似，是Hooks机制下对外统一暴露的控制器，渲染过程中，通过&lt;code class=&quot;language-text&quot;&gt;enableHooks&lt;/code&gt;标志位控制启用&lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;或&lt;code class=&quot;language-text&quot;&gt;DispatcherWithoutHooks&lt;/code&gt;，它的核心作用是防止hooks在异常的地方被调用了。&lt;/p&gt;
&lt;h5&gt;Hooks queue&lt;/h5&gt;
&lt;p&gt;Hooks的表现就是按照调用顺序被链接在一起的节点（nodes），React中每一个hook的节点不能再独立去看了，而应该把他们组织到一个&lt;code class=&quot;language-text&quot;&gt;queue&lt;/code&gt;中，如下所示：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  memoizedState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;foo&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  next&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    memoizedState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;bar&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    next&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      memoizedState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;baz&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      next&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据React源码中Hoos的TS定义，也可以清楚的看到这个Queue的模样：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hook&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  memoizedState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  baseState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  baseUpdate&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Update&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  queue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; UpdateQueue&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  next&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Hook &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比较有疑问的是&lt;code class=&quot;language-text&quot;&gt;baseState&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;baseUpdate&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;queue&lt;/code&gt;这三个东西是什么，可以看一下&lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt;的实现：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  initialState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Dispatch&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;BasicStateAction&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useReducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    basicStateReducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// useReducer has a special case to support lazy useState initializers&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initialState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里发现&lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt;竟然是&lt;code class=&quot;language-text&quot;&gt;useReducer&lt;/code&gt;特定的一种具体实现，难怪官网关于&lt;a href=&quot;https://zh-hans.reactjs.org/docs/hooks-reference.html#usereducer&quot;&gt;useReducer的说明&lt;/a&gt; 时说明了它是&lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt;的替代方案，当时没理解，现在懂了。&lt;/p&gt;
&lt;p&gt;回到Hook的定义，各个参数的意义就明确了。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hook&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  memoizedState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// hook更新后的缓存state&lt;/span&gt;
  baseState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;token comment&quot;&gt;// 其实就是initialState&lt;/span&gt;
  baseUpdate&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Update&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 最近一次调用更新state方法的action&lt;/span&gt;
  queue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; UpdateQueue&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 调度操作的队列，等待进入reducer&lt;/span&gt;
  next&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Hook &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// 下一个hook，通过它串联起所有hooks&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;参考链接&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6844904032708853767&quot;&gt;React Hooks 底层解析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/brickspert/blog/issues/26&quot;&gt;React Hooks 原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba&quot;&gt;Under the hood of React’s hooks system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L336&quot;&gt;React-ReactFiberHooks源码&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[解决VSCode中@tailwind无法解析问题]]></title><description><![CDATA[问题 默认情况下如果使用  指令去引入Tailwind的 , 和  样式时，会提示：，如下图所示： 虽然不影响最终使用，但是心里还是有个疙瘩。 解决方法 1. 最简单的插件大法 安装插件就可以了，简单粗暴。下载地址 2. Custom Data for CSS Language…]]></description><link>https://blog.deathdealer.cn/css/unknown-tailwind-rule/</link><guid isPermaLink="false">https://blog.deathdealer.cn/css/unknown-tailwind-rule/</guid><pubDate>Fri, 13 Aug 2021 15:55:20 GMT</pubDate><content:encoded>&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;默认情况下如果使用 &lt;code class=&quot;language-text&quot;&gt;@tailwind&lt;/code&gt; 指令去引入Tailwind的 &lt;code class=&quot;language-text&quot;&gt;base&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;components&lt;/code&gt;和 &lt;code class=&quot;language-text&quot;&gt;utilities&lt;/code&gt; 样式时，会提示：&lt;code class=&quot;language-text&quot;&gt;Unknown at rule @tailwind&lt;/code&gt;，如下图所示：&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210813160827793.png&quot; alt=&quot;image-20210813160827793&quot; style=&quot;zoom:45%;&quot;&gt;
&lt;p&gt;虽然不影响最终使用，但是心里还是有个疙瘩。&lt;/p&gt;
&lt;h4&gt;解决方法&lt;/h4&gt;
&lt;h5&gt;1. 最简单的插件大法&lt;/h5&gt;
&lt;p&gt;安装&lt;code class=&quot;language-text&quot;&gt;PostCSS Language Support&lt;/code&gt;插件就可以了，简单粗暴。&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=csstools.postcss&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;2. Custom Data for CSS Language Service&lt;/h5&gt;
&lt;p&gt;VSCode支持给CSS Language Service配置&lt;code class=&quot;language-text&quot;&gt;Custom Data（其实就是指这一个JSON文件的路径，然后在JSON文件里面配置）&lt;/code&gt;来解决这个问题（&lt;a href=&quot;https://github.com/Microsoft/vscode-css-languageservice/blob/main/docs/customData.md&quot;&gt;VSCode文档&lt;/a&gt;），VS Code启动时会加载 这些自定义的配置来增加对&lt;code class=&quot;language-text&quot;&gt;CSS文件&lt;/code&gt;的支持，如&lt;code class=&quot;language-text&quot;&gt;自定义CSS属性&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;@指令&lt;/code&gt; ,&lt;code class=&quot;language-text&quot;&gt;伪类和伪元素&lt;/code&gt;等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定&lt;code class=&quot;language-text&quot;&gt;custom data&lt;/code&gt;文件的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较遗憾的是目前根据VSCode仅支持&lt;code class=&quot;language-text&quot;&gt;workspace&lt;/code&gt;级别的设置，不支持&lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt;级别的设置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The file paths are relative to workspace and only workspace folder settings are considered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 当前工作区的.vscode/settings.json中，没有可以创建，有的话可以修改，增加如下配置&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;css.customData&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;.vscode/css_custom_data.json&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;创建&lt;code class=&quot;language-text&quot;&gt;css_custom_data.json&lt;/code&gt;文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;atDirectives&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@tailwind&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;使用`@tailwind`指令插入`base`, `components`, `utilities`样式&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;references&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tailwind Documentation&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://tailwindcss.com/docs/functions-and-directives#tailwind&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;按&lt;code class=&quot;language-text&quot;&gt;command+shift+p&lt;/code&gt;然后&lt;code class=&quot;language-text&quot;&gt;Reload Window&lt;/code&gt;即可生效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用效果&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210813165807291.png&quot; alt=&quot;image-20210813165807291&quot; style=&quot;zoom:45%;&quot;&gt;
&lt;p&gt;点击下面的链接还能跳到tailwind的官网文档&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[SSR、SSG、ISR、DPR简介]]></title><description><![CDATA[名词解释 CSR：Client Side Rendering，客户端渲染（大多数前端开发者集中的领域） SSR：Server Side Rendering，服务端渲染 SSG：Static Site Generation，静态站点生成（我的博客就是） ISR…]]></description><link>https://blog.deathdealer.cn/ssr-ssg-isr-dpr/</link><guid isPermaLink="false">https://blog.deathdealer.cn/ssr-ssg-isr-dpr/</guid><pubDate>Mon, 09 Aug 2021 10:14:45 GMT</pubDate><content:encoded>&lt;h4&gt;名词解释&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CSR：Client Side Rendering，客户端渲染（大多数前端开发者集中的领域）&lt;/li&gt;
&lt;li&gt;SSR：Server Side Rendering，服务端渲染&lt;/li&gt;
&lt;li&gt;SSG：Static Site Generation，静态站点生成（我的博客就是）&lt;/li&gt;
&lt;li&gt;ISR：Incremental Site Rendering，增量站点渲染&lt;/li&gt;
&lt;li&gt;DPR：Distributed Persistent Rendering，分布式持续渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;从SSR到SSG&lt;/h4&gt;
&lt;p&gt;SSR 最早是为了解决单页应用（SPA）的 SEO不友好、首屏渲染时间长等问题而诞生的，在服务端实时渲染用户看到的页面，能最大程度上提高用户的体验。完整的SSR过程如下图所示：&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210810222708422.png&quot; alt=&quot;image-20210810222708422&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h5&gt;SSR的弊端&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;需要部署额外的服务，消耗计算资源，日常也存在传统服务端同样的运维、监控告警等方面额外的人力。&lt;/li&gt;
&lt;li&gt;项目的可维护性会降低，不容易Debug，代码问题的追溯也会变得困难。&lt;/li&gt;
&lt;li&gt;前后端责任分工不明，不能很好的并行开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重新对 SSR 进行审视，服务端渲染出的页面，逻辑上讲可以分成下面两大块：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;变化不频繁，甚至不会变化的内容&lt;/strong&gt;：例如文章、列表页、详情页等，这些数据非常适合静态化；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变化比较频繁，或者千人千面的内容&lt;/strong&gt;：例如登录状态、实时评论、商品推荐等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如，在一篇文章的页面中，文章的主题内容是偏向于静态的，很少有改动，那么每次用户的页面请求，都通过服务端来渲染就变得非常不值得，因为每次服务端渲染出来大部分内容都是一样的！因此SSG应运而生。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SSG和SSR的不同之处在于发送给客户端的内容是在&lt;strong&gt;构建时生成&lt;/strong&gt;而不是在&lt;strong&gt;请求时生成&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;SSG的优点&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;可以把生成的静态内容分发到 CDN，速度快&lt;/li&gt;
&lt;li&gt;没有服务器&lt;/li&gt;
&lt;li&gt;数据有变化时，重新触发一次网站的异步渲染，然后推送新的内容到 CDN 即可。&lt;/li&gt;
&lt;li&gt;由于每次都是全站渲染，所以网站的版本可以很好的与 Git 的版本对应上，甚至可以做到原子化发布和回滚。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;SSG框架&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;GatsbyJS&lt;/a&gt;	&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nextjs.org/&quot;&gt;NextJS&lt;/a&gt;的SSG模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;从SSG到ISR&lt;/h4&gt;
&lt;p&gt;对于小型的应用和站点来说，增删改数据时，跑一次全量生成静态页面的成本是可以接受的。&lt;strong&gt;但对于有百万级及以上页面的大型网站而言，显然是不可能每次都做全量渲染的&lt;/strong&gt;为了解决这个问题，就有了ISR这种方案。&lt;/p&gt;
&lt;p&gt;既然全量预渲染整个网站是不现实的，那么我们可以做一个切分：&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;关键性的页面&lt;/strong&gt;（如网站首页、热点数据等）预渲染为静态页面，缓存至 CDN，保证最佳的访问性能；&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;非关键性的页面&lt;/strong&gt;（如流量很少的老旧内容）先响应 fallback 内容，然后浏览器渲染（CSR）为实际数据；同时对页面进行异步预渲染，之后缓存至 CDN，提升后续用户访问的性能。&lt;/p&gt;
&lt;img src=&quot;https://pic1.zhimg.com/80/v2-9268a31db4779be8dfa01fbfa13c1524_1440w.jpg&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;p&gt;页面的更新遵循 stale-while-revalidate 的逻辑，即始终返回 CDN 的缓存数据（无论是否过期）；如果数据已经过期，那么触发异步的预渲染，异步更新 CDN 的缓存。&lt;/p&gt;
&lt;img src=&quot;https://pic3.zhimg.com/80/v2-b4954ced325187f5894ab46e0eaf0c16_1440w.jpg&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;p&gt;这就是增量式更新（ISR）的概念，这个概念最早由 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//nextjs.org/blog/next-9-5%23stable-incremental-static-regeneration&quot;&gt;Next.js 在 9.5 版本中提出&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;ISR的弊端&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;对于没有预渲染的页面，用户首次访问将会看到一个 fallback 页面，此时服务端才开始渲染页面，直到渲染完毕。这就导致用户&lt;strong&gt;体验上的不一致&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对于已经被预渲染的页面，用户直接从 CDN 加载，&lt;strong&gt;但这些页面可能是已经过期的，甚至过期很久的&lt;/strong&gt;，只有在用户刷新一次，第二次访问之后，才能看到新的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决 ISR 的一系列问题，Netlify 在前段时间发起了一个新的提案：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jamstack/jamstack.org/discussions/549&quot;&gt;Distributed Persistent Rendering (DPR)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DPR 本质上讲，是对 ISR 的模型做了几处改动，并且搭配上 CDN 的能力：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去除了 fallback 行为，而是直接用 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.netlify.com/blog/2021/04/14/faster-builds-for-large-sites-on-netlify-with-on-demand-builders-now-in-early-access/&quot;&gt;On-demand Builder&lt;/a&gt;（按需构建器）来响应未经过预渲染的页面，然后将结果缓存至 CDN；&lt;/li&gt;
&lt;li&gt;数据页面过期时，不再响应过期的缓存页面，而是 CDN 回源到 Builder 上，渲染出最新的数据；&lt;/li&gt;
&lt;li&gt;每次发布新版本时，自动清除 CDN 的缓存数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;https://pic3.zhimg.com/80/v2-2e1ad7f07dcd5986606f763f62894aae_1440w.jpg&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;</content:encoded></item><item><title><![CDATA[前端埋点之曝光埋点]]></title><description><![CDATA[什么是曝光埋点 如果需要衡量流量的分发效率，或者需要衡量活动对用户的吸引力时，会涉及到一个点击效果的量化指标：点击率（CTR…]]></description><link>https://blog.deathdealer.cn/intersection-observer/</link><guid isPermaLink="false">https://blog.deathdealer.cn/intersection-observer/</guid><pubDate>Wed, 28 Jul 2021 09:52:44 GMT</pubDate><content:encoded>&lt;h4&gt;什么是曝光埋点&lt;/h4&gt;
&lt;p&gt;如果需要衡量流量的分发效率，或者需要衡量活动对用户的吸引力时，会涉及到一个点击效果的量化指标：点击率（CTR），点击率的计算公式如下所示：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;CTR&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 点击数 &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; 曝光数&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击数通过点击事件埋点很容获得，但是分母就比较困难了。如果直接采用页面的浏览次数作为分母，明显是不科学的，因为很可能活动区域用户压根就没看见或是看见了并没有停留。想要获取分母的数据，要用到本文所说的曝光埋点。&lt;code class=&quot;language-text&quot;&gt;曝光埋点&lt;/code&gt;用来统计页面某个区域被用户&lt;code class=&quot;language-text&quot;&gt;看到&lt;/code&gt;的次数，此外一般还需要加上有效浏览的限制，即该区域至少需要停留时长5秒以上。&lt;/p&gt;
&lt;h4&gt;传统方法&lt;/h4&gt;
&lt;p&gt;监听&lt;code class=&quot;language-text&quot;&gt;scroll&lt;/code&gt;事件，然后调用目标区域的&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;getBoundingClientRect()&lt;/code&gt;&lt;/a&gt;方法，得到它相对于&lt;code class=&quot;language-text&quot;&gt;viewport&lt;/code&gt;的坐标，再判断是否在&lt;code class=&quot;language-text&quot;&gt;viewport&lt;/code&gt;之内。这种方法比较简单，但是有个致命缺点，事件监听和调用 &lt;code class=&quot;language-text&quot;&gt;getBoundingClientRect()&lt;/code&gt; 都是在主线程上运行，因此频繁触发、调用可能会造成性能问题。用防抖来优化又极易造成在防抖的&lt;code class=&quot;language-text&quot;&gt;timeout&lt;/code&gt;时间段内目标区域脱离。所以传统的做法极其怪异且不优雅。&lt;/p&gt;
&lt;h4&gt;Observer API实现&lt;/h4&gt;
&lt;h5&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver&quot;&gt;IntersectionObserver&lt;/a&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IntersectionObserver&lt;/code&gt;&lt;strong&gt;接口&lt;/strong&gt; (从属于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API&quot;&gt;Intersection Observer API&lt;/a&gt;) 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport&quot;&gt;viewport&lt;/a&gt;)交叉状态的方法。祖先元素与视窗(&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport&quot;&gt;viewport&lt;/a&gt;)被称为&lt;strong&gt;根(root)。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里所谓的&lt;strong&gt;交叉状态&lt;/strong&gt;就是指和视口产生了交集，由于可见的本质就是目标元素与视口产生一个交叉区，所以这个 API又叫&lt;code class=&quot;language-text&quot;&gt;交叉观察器&lt;/code&gt;，可以简单且高性能的监视元素是否出现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;兼容性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 除IE之外（不出所料），现代浏览器已经全部很好的支持了&lt;code class=&quot;language-text&quot;&gt;IntersectionObserver&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210728105459323.png&quot; alt=&quot;image-20210728105459323&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;异步处理&lt;/strong&gt;消除了昂贵的DOM样式查询和连续的轮询；&lt;/li&gt;
&lt;li&gt;API配置丰富，可以实现除曝光埋点以外各种需要判断元素可见性的需求；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;概念和用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IntersectionObserver&lt;/code&gt;的基本用法是注册一个回调函数，当以下条件满足时调用该回调函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标元素与&lt;code class=&quot;language-text&quot;&gt;viewport&lt;/code&gt;或者指定的元素产生交集时；&lt;/li&gt;
&lt;li&gt;IntersectionObserver第一次监听元素时；&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 创建IntersectionObserver对象，需要传入相应参数和回调用函数&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; observer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 指定目标元素&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#advertisment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 监听目标元素&lt;/span&gt;
observer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;选项(options)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;root&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指定根元素，用于检查目标的可见性。必须是目标元素的父级元素。如果未指定或者为&lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;，则默认为浏览器视窗。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;rootMargin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根(&lt;strong&gt;root&lt;/strong&gt;)元素的外边距。类似于 CSS 中的  &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;margin&lt;/code&gt;&lt;/a&gt; 属性，比如 ”&lt;code class=&quot;language-text&quot;&gt;10px 20px 30px 40px&amp;quot;&lt;/code&gt; (top, right, bottom, left)。如果有指定root参数，则rootMargin也可以使用百分比来取值。该属性值是用作root元素和target发生交集时候的计算交集的区域范围，使用该属性可以控制root元素每一边的收缩或者扩张。默认值为0。&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210728144424498.png&quot; alt=&quot;image-20210728144424498&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;threshold&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以是单一的&lt;code class=&quot;language-text&quot;&gt;number&lt;/code&gt;也可以是&lt;code class=&quot;language-text&quot;&gt;number数组&lt;/code&gt;，target元素和root元素相交程度达到该值的时候&lt;code class=&quot;language-text&quot;&gt;IntersectionObserver&lt;/code&gt;注册的回调函数将会被执行。如果你只是想要探测当target元素的在root元素中的可见性超过50%的时候，你可以指定该属性值为0.5。如果你想要target元素在root元素的可见程度每多25%就执行一次回调，那么你可以指定一个数组[0, 0.25, 0.5, 0.75, 1]。&lt;/p&gt;
&lt;p&gt;默认值是&lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;(意味着只要有一个target像素出现在root元素中，回调函数将会被执行)。该值为&lt;code class=&quot;language-text&quot;&gt;1.0&lt;/code&gt;含义是当target完全出现在root元素中时候 回调才会被执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;回调函数(callback)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回调函数接收 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserverEntry&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;IntersectionObserverEntry&lt;/code&gt;&lt;/a&gt; 对象和观察者的列表：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; observer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boundingClientRect&lt;/td&gt;
&lt;td&gt;目标元素的边界信息，返回结果与&lt;code class=&quot;language-text&quot;&gt;getBoundingClientRect&lt;/code&gt; 相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;intersectionRatio&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;目标元素出现在可视区的比例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;isIntersecting&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1. 如果目标元素出现在root可视区，返回true。&lt;br&gt;2. 如果目标元素从root可视区消失，返回false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;intersectionRect&lt;/td&gt;
&lt;td&gt;root和目标元素的相交区域&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rootBounds&lt;/td&gt;
&lt;td&gt;交叉区域观察器(intersection observer)中的根.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;target&lt;/td&gt;
&lt;td&gt;目标元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;记录从 IntersectionObserver 的时间原点到交叉事件被触发的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表格中加粗的两个属性是比较常用的判断条件：&lt;strong&gt;isIntersecting&lt;/strong&gt;和&lt;strong&gt;intersectionRatio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意：回调函数将会在主线程中被执行。所以该函数执行速度要尽可能的快。如果有一些耗时的操作需要执行，建议使用 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Window.requestIdleCallback()&lt;/code&gt;&lt;/a&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其它API&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;unobserve()&lt;/p&gt;
&lt;p&gt;停止对指定目标元素的监听&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;takeRecords()&lt;/p&gt;
&lt;p&gt;返回所有观察目标的IntersectionObserverEntry对象数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;disconnect()&lt;/p&gt;
&lt;p&gt;使&lt;code class=&quot;language-text&quot;&gt;IntersectionObserver&lt;/code&gt;对象停止全部监听工作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;扩展应用&lt;/h4&gt;
&lt;p&gt;除了曝光埋点之外，交叉检测可以轻送实现以前很复杂的功能，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图片懒加载（LazyLoad）——当图片滚动到可见时才进行加载&lt;/li&gt;
&lt;li&gt;内容无限滚动（Infinity Scroll）——当用户滚动到接近内容底部（触底）时直接加载更多，而无需用户操作翻页，给用户一种网页可以无限滚动的错觉&lt;/li&gt;
&lt;li&gt;在用户看见某个区域时执行任务或播放视频等，当用户划走时开启小窗继续播放或停止播放。&lt;/li&gt;
&lt;li&gt;吸顶 —— 如果用css的&lt;code class=&quot;language-text&quot;&gt;position: sticky&lt;/code&gt;实现兼容性比较差。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Polyfill&lt;/h5&gt;
&lt;p&gt;如里需要在IE中兼容&lt;code class=&quot;language-text&quot;&gt;IntersectionObserver&lt;/code&gt;，需要引入&lt;a href=&quot;https://github.com/w3c/IntersectionObserver/tree/main/polyfill&quot;&gt;W3C官方Polyfill&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[前端埋点之数据上报方式]]></title><description><![CDATA[AJAX 和调用接口的方法一样，基于  封装发送埋点数据的API（不用的原因是考虑XHR兼容性最好），这种方式最简单容易理解，而且使用 POST 方式可以发送的数据量可以很大。缺点是会占用一定的客户端资源，而且需要处理跨域。 服务端跨域设置 Image请求 image…]]></description><link>https://blog.deathdealer.cn/data-analysis-track/</link><guid isPermaLink="false">https://blog.deathdealer.cn/data-analysis-track/</guid><pubDate>Tue, 27 Jul 2021 15:48:03 GMT</pubDate><content:encoded>&lt;h4&gt;AJAX&lt;/h4&gt;
&lt;p&gt;和调用接口的方法一样，基于 &lt;code class=&quot;language-text&quot;&gt;XMLHttpRequest&lt;/code&gt; 封装发送埋点数据的API（不用&lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt;的原因是考虑XHR兼容性最好），这种方式最简单容易理解，而且使用 POST 方式可以发送的数据量可以很大。缺点是会占用一定的客户端资源，而且需要处理跨域。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 1.创建XMLHttpRequest对象&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; xhr
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;XMLHttpRequest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  xhr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ActiveObject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 兼容IE6以下版本&lt;/span&gt;
  xhr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActiveXobject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Microsoft.XMLHTTP&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 跨域的时候不会带上cookie，如果需要带上cookie需要额外设置&lt;/span&gt;
xhr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;credentials &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 2.设置请求信息&lt;/span&gt;
xhr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;post&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;http://xxx.com/api/some&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 3.发送请求&lt;/span&gt;
xhr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// get请求不传body参数，只有post请求使用&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 4.接收响应(一般埋点数据上报不需要处理返回）&lt;/span&gt;
xhr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务端跨域设置&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Access-Control-Allow-Credentials&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//不能设为星号，必须指定明确的、与请求网页一致的域名。&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Access-Control-Allow-Origin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRequestHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;origin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Image请求&lt;/h4&gt;
&lt;p&gt;image 请求方式是通过将埋点数据转成字符串放在图片请求的&lt;code class=&quot;language-text&quot;&gt;queryString&lt;/code&gt;里，然后向服务端请求一个 1*1 px 大小的图片，设置它的 src 属性就可以发送数据。&lt;code class=&quot;language-text&quot;&gt;src&lt;/code&gt;属性天然是跨域的，且兼容所有浏览器，缺点是&lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt;  请求对上报的数据有限制，最大只能有几KB。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; img &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/track.png?data=xxxxxxxxxxxxxxx&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;sendBeacon&lt;/h4&gt;
&lt;p&gt;navigator.sendBeacon 是一个比较新的 API，浏览器通过异步的 post 方式发送数据到服务端。该方法在页面跳转、刷新、关闭页面时发送请求，可以保证数据发送不丢失，浏览器会对其进行调度以保证数据有效送达，并且不会阻塞页面的加载或卸载，引外也不受跨域限制。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendBeacon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;url：数据上报地址；&lt;/li&gt;
&lt;li&gt;data：埋点数据（支持类型：ArrayBufferView、Blob、DOMString 、 FormData ）；&lt;/li&gt;
&lt;li&gt;返回值：埋点数据加入传输队列成功时返回 true，否则返回 false；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sendBeacon&lt;/code&gt; 允许开发者发送少量数据到服务端，它的特点很明显：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在浏览器空闲的时候异步发送数据，不影响页面 JS和CSS Animation 等执行；&lt;/li&gt;
&lt;li&gt;页面在 unload 状态下，也会异步发送数据，不阻塞页面刷新和跳转等操作；&lt;/li&gt;
&lt;li&gt;能够被客户端优化发送，尤其在 Mobile 环境下，可以将 beacon 请求合并到其他请求上一起处理；&lt;/li&gt;
&lt;li&gt;只能判断出是否放入浏览器任务队列，不能判断是否发送成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;兼容性：&lt;/h5&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210727165805195.png&quot; alt=&quot;image-20210727165805195&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;p&gt;毫无意外除了IE，基本上现代浏览器都完美支持，所以需要做一个兼容性处理：先判断用户当前设备是否支持 sendBeacon，如果不支持，就会走 &lt;code class=&quot;language-text&quot;&gt;image&lt;/code&gt; 或 &lt;code class=&quot;language-text&quot;&gt;ajax&lt;/code&gt;方式将数据发送出去。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sendType &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;beacon&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sendBeacon &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;function&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    sendType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;image&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 后续代码根据sendType走到不同的上报逻辑&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;发送数据大小限制&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/beacon/&quot;&gt;标准&lt;/a&gt;没有明确大小限制，但是可以肯定的是数据大小是会有限制的，不一样的浏览器应该有所差异。有网友做了实验，可以参考：&lt;a href=&quot;http://www.voidcn.com/article/p-okdxpzox-bwh.html&quot;&gt;http://www.voidcn.com/article/p-okdxpzox-bwh.html&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;面对不同的埋点数据上报场景时，我们要选择不同的方式来上报数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果发送数据量较小，采用 &lt;code class=&quot;language-text&quot;&gt;image&lt;/code&gt; 方式上报给服务端更合适；&lt;/li&gt;
&lt;li&gt;如果发送数据量较大，采用 &lt;code class=&quot;language-text&quot;&gt;ajax&lt;/code&gt; 方式更合适；&lt;/li&gt;
&lt;li&gt;如果需要进行精准的统计信息，采用 &lt;code class=&quot;language-text&quot;&gt;sendBeacon&lt;/code&gt; 方式能最大程度保证数据上报的成功率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建议优先使用 &lt;code class=&quot;language-text&quot;&gt;sendBeacon&lt;/code&gt;来上报数据。在浏览器不支持sendBeacon的情况下使用 &lt;code class=&quot;language-text&quot;&gt;image&lt;/code&gt; 方式来上报。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[XSS攻击的防护（JS）]]></title><description><![CDATA[XSS 攻击是什么 Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。XSS 攻击通常指的是利用网页的漏洞，攻击者通过巧妙的方法注入 XSS 代码到网页，因为浏览器无法分辨哪些脚本是可信的，导致 XSS 脚本被执行。XSS…]]></description><link>https://blog.deathdealer.cn/react/react-xss-protection/</link><guid isPermaLink="false">https://blog.deathdealer.cn/react/react-xss-protection/</guid><pubDate>Fri, 23 Jul 2021 09:38:32 GMT</pubDate><content:encoded>&lt;h4&gt;XSS 攻击是什么&lt;/h4&gt;
&lt;p&gt;Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。XSS 攻击通常指的是利用网页的漏洞，攻击者通过巧妙的方法注入 XSS 代码到网页，因为浏览器无法分辨哪些脚本是可信的，导致 XSS 脚本被执行。XSS 脚本通常能够窃取用户数据并发送到攻击者的网站，或者冒充用户，调用目标网站接口并执行攻击者指定的操作。&lt;/p&gt;
&lt;h4&gt;XSS的分类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;反射型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把 XSS 脚本放在 HTTP 请求中当成普通数据发送给服务端&lt;/li&gt;
&lt;li&gt;服务端在 HTTP 请求中收到数据后处理完，又将该数据拼接在 HTML 中返回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XSS脚本存在于服务端的数据库，文件，缓存中&lt;/li&gt;
&lt;li&gt;用户访问接口或网页时服务器将XSS脚本在响应中返回，浏览器默认执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DOM型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端直接将 URL 中的数据不做处理并动态插入到 HTML 中，是纯粹的前端安全问题&lt;/li&gt;
&lt;li&gt;类似反射型，区别在于 DOM 型 XSS 不会和后台进行交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论使用哪种攻击方式，本质就是将恶意代码注入到应用中，浏览器无脑执行后被注入。&lt;/p&gt;
&lt;h4&gt;React中XSS的防护&lt;/h4&gt;
&lt;p&gt;React DOM 在渲染所有输入内容之前，默认会进行转义。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串，因此恶意代码无法成功注入，从而有效地防止了 XSS 攻击。但是有一个例外的场景，就是使用 &lt;code class=&quot;language-text&quot;&gt;dangerouslySetInnerHTML&lt;/code&gt; 显示的内容，React不会自动帮助转义，如果不加处理，一定会被XSS注入。&lt;/p&gt;
&lt;p&gt;推荐一个可以帮助我们转义标签的库：&lt;a href=&quot;https://github.com/cure53/DOMPurify&quot;&gt;DOMPurify&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; dompurify --save
&lt;span class=&quot;token comment&quot;&gt;# or&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; dompurify&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;p&gt;直接调用&lt;code class=&quot;language-text&quot;&gt;sanitize&lt;/code&gt;方法即可转义所有危险标签和属性&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; DOMPurify &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dompurify&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dirty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;img src=x onerror=alert(1)//&gt;&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createMarkup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;__html&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; DOMPurify&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sanitize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dirty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div dangerouslySetInnerHTML&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createMarkup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DOMPurify有很多选项可以设置（具体&lt;a href=&quot;https://github.com/cure53/DOMPurify#can-i-configure-dompurify&quot;&gt;参考文档&lt;/a&gt;），大部分情况下用默认的选项就可以了。&lt;/p&gt;
&lt;p&gt;PS：如果觉得用这个库是大炮打蚊子的话，也可以自己用&lt;code class=&quot;language-text&quot;&gt;replace&lt;/code&gt;去转义&lt;code class=&quot;language-text&quot;&gt;&amp;quot;&amp;lt;&amp;gt;&amp;amp;&amp;#39;&lt;/code&gt;等符号。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Chrome控制台加载第三方库]]></title><description><![CDATA[0x0 背景 经常需要在在引用某个库之前测试一下基本功能和API，又不想创建一个工程去，可以通过以下方支加载CDN上的JS文件 0x1 动态创建Script标签 第三方库的官网上一般会提供npm、直接下载、CDN等几种方式。比如著名的lodash，官网提供的CDN…]]></description><link>https://blog.deathdealer.cn/load-libary-console/</link><guid isPermaLink="false">https://blog.deathdealer.cn/load-libary-console/</guid><pubDate>Wed, 21 Jul 2021 11:18:23 GMT</pubDate><content:encoded>&lt;h5&gt;0x0 背景&lt;/h5&gt;
&lt;p&gt;经常需要在在引用某个库之前测试一下基本功能和API，又不想创建一个工程去&lt;code class=&quot;language-text&quot;&gt;npm i&lt;/code&gt;，可以通过以下方支加载CDN上的JS文件&lt;/p&gt;
&lt;h5&gt;0x1 动态创建Script标签&lt;/h5&gt;
&lt;p&gt;第三方库的官网上一般会提供npm、直接下载、CDN等几种方式。比如著名的lodash，官网提供的CDN是：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;http&quot;&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;https:&lt;/span&gt;//cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引用的方法是动态创建一个&lt;code class=&quot;language-text&quot;&gt;script&lt;/code&gt;标签&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; lodashCDN &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;script&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
lodashCDN&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;head&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lodashCDN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就直接在console中使用&lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt;来引用loadash了&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210721112705331.png&quot; alt=&quot;image-20210721112705331&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[常用Git命令速查（4）- Rebase]]></title><description><![CDATA[什么是Rebase(变基) 在 Git 中整合来自不同分支的修改主要有两种方法： 以及  , git rebase 和 git merge 作用基本是相同的，二者的一个重要的区别是历史提交本版的区别。git rebase可以使分支看起来像是没有经历过合并一样。 rebase…]]></description><link>https://blog.deathdealer.cn/git/git-rebase/</link><guid isPermaLink="false">https://blog.deathdealer.cn/git/git-rebase/</guid><pubDate>Sun, 30 May 2021 09:30:03 GMT</pubDate><content:encoded>&lt;h4&gt;什么是Rebase(变基)&lt;/h4&gt;
&lt;p&gt;在 Git 中整合来自不同分支的修改主要有两种方法：&lt;code class=&quot;language-text&quot;&gt;merge&lt;/code&gt; 以及 &lt;code class=&quot;language-text&quot;&gt;rebase&lt;/code&gt; , git rebase 和 git merge 作用基本是相同的，二者的一个重要的区别是历史提交本版的区别。git rebase可以使分支看起来像是没有经历过合并一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rebase&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210609203440812.png&quot; alt=&quot;image-20210609203440812&quot; style=&quot;zoom:45%;&quot;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;merge&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210609203516904.png&quot; alt=&quot;image-20210609203516904&quot; style=&quot;zoom:35%;&quot;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;使用 &lt;code class=&quot;language-text&quot;&gt;rebase&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;merge&lt;/code&gt; 的基本原则：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;下游分支更新上游分支内容的时候使用 &lt;code class=&quot;language-text&quot;&gt;rebase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上游分支合并下游分支内容的时候使用 &lt;code class=&quot;language-text&quot;&gt;merge&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如现有上游分支 master，基于 master 分支拉出来一个开发分支 dev，在 dev 上开发了一段时间后要把 master 分支提交的新内容更新到 dev 分支，此时切换到 dev 分支，使用 &lt;code class=&quot;language-text&quot;&gt;git rebase master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;等 dev 分支开发完成了之后，要合并到上游分支 master 上的时候，切换到 master 分支，使用 &lt;code class=&quot;language-text&quot;&gt;git merge dev&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Rebase使用场景一：合并提交记录&lt;/h4&gt;
&lt;p&gt;每次功能迭代开发，最终对多个 commit 进行合并处理，例如，合并最近的 n 次提交纪录，执行：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; rebase -i HEAD~n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时候，会自动进入 &lt;code class=&quot;language-text&quot;&gt;vi&lt;/code&gt; 编辑模式：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;pick cacc52da add: qrcode
pick f072ef48 update: indexeddb hack
pick 4e84901a feat: &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; indexedDB floder
pick 8f33126c feat: &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; test2.js

&lt;span class=&quot;token comment&quot;&gt;# Rebase 5f2452b2..8f33126c onto 5f2452b2 (4 commands)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Commands:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# p, pick = use commit&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# r, reword = use commit, but edit the commit message&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# e, edit = use commit, but stop for amending&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# s, squash = use commit, but meld into previous commit&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# x, exec = run command (the rest of the line) using shell&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# d, drop = remove commit&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# These lines can be re-ordered; they are executed from top to bottom.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# If you remove a line here THAT COMMIT WILL BE LOST.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# However, if you remove everything, the rebase will be aborted.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把前面的pick改成squash就可以合并记录，注意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要合并先前提交的东西，也就是已经提交远程分支的纪录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后续可以用&lt;code class=&quot;language-text&quot;&gt;rebase --abort&lt;/code&gt;放弃变基，&lt;code class=&quot;language-text&quot;&gt;rebase --edit-todo&lt;/code&gt;重新进入编辑模式，&lt;code class=&quot;language-text&quot;&gt;rebase --continue&lt;/code&gt;解变基冲突后继续&lt;/p&gt;
&lt;h4&gt;Rebase 使用场景二：分支合并&lt;/h4&gt;
&lt;p&gt;主要用于从上游分支合并代码到当前分支，比如从&lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt;拉来的个人开发分支&lt;code class=&quot;language-text&quot;&gt;feature&lt;/code&gt;，但是另外的同事对master进行了hotfix，此时你刚好急需把hotfix的代码拉到自己的特性分支上。如果用merge是没有问题的，不过会产生一条&lt;code class=&quot;language-text&quot;&gt;merge commit&lt;/code&gt;，污染特性分支的commit log，这时候可以用rebase来进行合并。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; rebase master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一面一条命令会依次：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git&lt;/code&gt; 会把 &lt;code class=&quot;language-text&quot;&gt;feature&lt;/code&gt; 分支里面的每个 &lt;code class=&quot;language-text&quot;&gt;commit&lt;/code&gt;都先取消掉；&lt;/li&gt;
&lt;li&gt;把上面的操作临时保存成 &lt;code class=&quot;language-text&quot;&gt;patch&lt;/code&gt; 文件，存在 &lt;code class=&quot;language-text&quot;&gt;.git/rebase&lt;/code&gt; 目录里；&lt;/li&gt;
&lt;li&gt;从&lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt;把最新代码更新到 &lt;code class=&quot;language-text&quot;&gt;feature&lt;/code&gt; 分支上；&lt;/li&gt;
&lt;li&gt;把上面保存的 &lt;code class=&quot;language-text&quot;&gt;patch&lt;/code&gt; 文件应用到 &lt;code class=&quot;language-text&quot;&gt;feature1&lt;/code&gt; 分支上；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样过后，最新代码也有了，commit记录也是完美继承过来，不会产生&lt;code class=&quot;language-text&quot;&gt;merge commit&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Rebase的风险&lt;/h4&gt;
&lt;p&gt;呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;换句话说：除非你可以肯定该需要变基的分支只有你自己使用，否则请谨慎操作。&lt;/p&gt;
&lt;p&gt;再换句话说：只要你的分支上需要 &lt;code class=&quot;language-text&quot;&gt;rebase&lt;/code&gt; 的所有 &lt;code class=&quot;language-text&quot;&gt;commits&lt;/code&gt; 历史还没有被 &lt;code class=&quot;language-text&quot;&gt;push&lt;/code&gt; 过，就可以安全地使用 &lt;code class=&quot;language-text&quot;&gt;git-rebase&lt;/code&gt;来操作&lt;/p&gt;</content:encoded></item><item><title><![CDATA[常用Git命令速查（3）- HEAD游离]]></title><description><![CDATA[什么是HEAD HEAD可以理解为一个指针，HEAD指针通常会指向一个分支（或者说指向一个分支指针），可以通过查看当前的指向 下图很好的表示了的指向 游离HEAD 如果用使用命令  切换分支，HEAD 就会移动到指定的分支上。但是也可以用将HEAD指向某个具体的Commit…]]></description><link>https://blog.deathdealer.cn/git/git-detached-head/</link><guid isPermaLink="false">https://blog.deathdealer.cn/git/git-detached-head/</guid><pubDate>Thu, 27 May 2021 13:50:03 GMT</pubDate><content:encoded>&lt;h4&gt;什么是HEAD&lt;/h4&gt;
&lt;p&gt;HEAD可以理解为一个指针，HEAD指针通常会指向一个分支（或者说指向一个分支指针），可以通过&lt;code class=&quot;language-text&quot;&gt;cat .git/HEAD&lt;/code&gt;查看当前的指向&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210527192214805.png&quot; alt=&quot;image-20210527192214805&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;p&gt;下图很好的表示了&lt;code class=&quot;language-text&quot;&gt;HEAD&lt;/code&gt;的指向&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210527192313864.png&quot; alt=&quot;image-20210527192313864&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h5&gt;游离HEAD&lt;/h5&gt;
&lt;p&gt;如果用使用命令 &lt;code class=&quot;language-text&quot;&gt;git checkout &amp;lt;branch_name&amp;gt;&lt;/code&gt; 切换分支，HEAD 就会移动到指定的分支上。但是也可以用&lt;code class=&quot;language-text&quot;&gt;git checkout &amp;lt;commit_id&amp;gt;&lt;/code&gt;将HEAD指向某个具体的Commit，此时HEAD指针就会处于名为一种&lt;code class=&quot;language-text&quot;&gt;detached&lt;/code&gt;（游离）状态，这时HEAD不再指向分支而是某次提交。命令行会提示：&lt;code class=&quot;language-text&quot;&gt;You are in ‘detached HEAD’ state.&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210528163917798.png&quot; alt=&quot;image-20210528163917798&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;h5&gt;游离HEAD使用场景&lt;/h5&gt;
&lt;p&gt;从上文的返回信息中就能知道游离HEAD的使用场景，如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout 56e0e92a973344edad0eb7883daca0577c99dadf
Note: switching to &lt;span class=&quot;token string&quot;&gt;&apos;56e0e92a973344edad0eb7883daca0577c99dadf&apos;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;

You are &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;detached HEAD&apos;&lt;/span&gt; state. You can &lt;span class=&quot;token function&quot;&gt;look&lt;/span&gt; around, &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; experimental
changes and commit them, and you can discard any commits you &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; so &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;now or later&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; by using -c with the switch command. Example:

  &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; switch -c &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;new-branch-name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

Or undo this operation with:

  &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; switch -

Turn off this advice by setting config variable advice.detachedHead to &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上述返回信息我们可以得知，我们当前检出了&lt;code class=&quot;language-text&quot;&gt;56e0e92a973344edad0eb7883daca0577c99dadf&lt;/code&gt;这个提交，现在我们处于分离头的状态，git建议我们，在分离头的状态下，我们可以随便看看，可以按照我们的想法，对当前目录中的文件进行一些实验性的修改，并且将这些实验性的修改创建成一些提交（其实这些提交会组成一条匿名分支），如果你最后后悔了，觉得实验不成功，修改后的结果并不是你想要的，那么我们可以在不影响任何其他分支和提交的情况下，丢弃这些实验性的提交（丢弃这条匿名分支），如果你觉得这些实验性的提交让你很满意，那么你就可以创建一个新的分支（其实是给这个匿名分支一个固定的名字），来永久性的保存这些提交。&lt;/p&gt;
&lt;h5&gt;游离HEAD的后续处理&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;丢弃这个匿名分支&lt;/p&gt;
&lt;p&gt;处于游离HEAD时，直接checkout到其它分支，就可以丢弃掉你在匿名分支上的所有改动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保留这个匿名分支&lt;/p&gt;
&lt;p&gt;有两种方法可以永久保存匿名分支的提交&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 创建一个新的分支以便来保存这些在分离头状态下创建的提交（HEAD会切换到新创建的分支）&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout -b &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;new_branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 从指定提交创建新分支（HEAD不会切换到新创建的分支）&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;new_branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;commit_id&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[团队协作项目中优雅的修改三方库]]></title><description><![CDATA[背景 团队协作的项目中使用的开源第三方库在使用过程中，如果不能满足业务需求，或是使用过程中发现了该包的bug。可以向原作者提Issue…]]></description><link>https://blog.deathdealer.cn/patch-package/</link><guid isPermaLink="false">https://blog.deathdealer.cn/patch-package/</guid><pubDate>Wed, 26 May 2021 14:42:32 GMT</pubDate><content:encoded>&lt;h5&gt;背景&lt;/h5&gt;
&lt;p&gt;团队协作的项目中使用的开源第三方库在使用过程中，如果不能满足业务需求，或是使用过程中发现了该包的bug。可以向原作者提Issue，然后坐等作者修复或开发即可。这样就需要等作者重新发布新版本，在快速迭代的项目中显然不现实。所以直接修改别人的源码大概率是最佳选择。&lt;/p&gt;
&lt;p&gt;修改别人的源码往往有这几个方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接在node_modules中找到源码并修改&lt;/p&gt;
&lt;p&gt;优点：简单粗暴、快速生效&lt;/p&gt;
&lt;p&gt;缺点：一旦重新安装就失效，也不方便在团队成员之间共享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fork源码并修复，然后提PR给作者&lt;/p&gt;
&lt;p&gt;优点：团队成员都可以共享&lt;/p&gt;
&lt;p&gt;缺点：等待周期很长&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;解决方案&lt;/h5&gt;
&lt;p&gt;通过patch-package生成patch文件（diff格式），通过npm script的&lt;code class=&quot;language-text&quot;&gt;postinstall&lt;/code&gt;钩子在npm install/yarn之后自动给依赖库打补丁的方法，达到和团队成员共享修改依赖库的目的&lt;/p&gt;
&lt;h5&gt;使用方法&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# NPM&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev patch-package
&lt;span class=&quot;token comment&quot;&gt;# Yarn&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; --dev patch-package&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成Patch&lt;/p&gt;
&lt;p&gt;在项目的node_modules中修改了依赖库的源码之后，回到项目根目录后执行：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ npx patch-package &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;package_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# NPM &gt; 5.2&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; patch-package &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;package_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# Yarn&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行完成后，会在根目录生成&lt;code class=&quot;language-text&quot;&gt;patches&lt;/code&gt;目录，并在该目录中生成&lt;code class=&quot;language-text&quot;&gt;&amp;lt;package_name&amp;gt;+&amp;lt;version&amp;gt;.patch&lt;/code&gt;格式的文件，然后需要把补丁文件提交到代码仓库中，方便团队共享。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;patch-package的选项：&lt;/p&gt;
&lt;p&gt;—use-yarn 默认会根据lockfile来决定使用npm还是yarn，如果两者都有就使用npm，可以通过这个参数启用yarn&lt;/p&gt;
&lt;p&gt;—exlcude &lt;regexp&gt; 创建补丁时，忽略匹配的路径&lt;/p&gt;
&lt;p&gt;—include &lt;regexp&gt; 创建补丁时，仅考虑匹配的路径，与exclude相反&lt;/p&gt;
&lt;p&gt;—patch-dir 指定存放补丁的目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你修改的是依赖的依赖，甚至是依赖的依赖的依赖等（嵌套依赖），可以用&lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt;分隔符分隔包名，例如：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ npx patch-package package/another-package/deep-pacakge&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新Patch&lt;/p&gt;
&lt;p&gt;和创建补丁的方法一样&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打补丁&lt;/p&gt;
&lt;p&gt;在&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;的&lt;code class=&quot;language-text&quot;&gt;scripts&lt;/code&gt;中加入&lt;code class=&quot;language-text&quot;&gt;postinstall&lt;/code&gt;，后续执行&lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt;或&lt;code class=&quot;language-text&quot;&gt;yarn&lt;/code&gt;后，会自动为依赖的第三方库打上补丁。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;postinstall&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;patch-pacakge&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;patch-package源码&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ds300/patch-package&quot;&gt;https://github.com/ds300/patch-package&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React心智模型]]></title><description><![CDATA[掌握一门语言、框架或工具的人和没有掌握的人之间最大的区别在于他们有没有清晰的心智模型。通过良好的心智模型，你可以直观地理解复杂问题并提出解决方案，而不是一步一步的去寻找答案。 无论你是React的老司机还是新手，拥有一个良好的心智模型是让你成为React…]]></description><link>https://blog.deathdealer.cn/a-visual-guide-to-react-mental-models/</link><guid isPermaLink="false">https://blog.deathdealer.cn/a-visual-guide-to-react-mental-models/</guid><pubDate>Tue, 25 May 2021 17:48:03 GMT</pubDate><content:encoded>&lt;p&gt;掌握一门语言、框架或工具的人和没有掌握的人之间最大的区别在于他们有没有清晰的心智模型。通过良好的心智模型，你可以直观地理解复杂问题并提出解决方案，而不是一步一步的去寻找答案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论你是React的老司机还是新手，拥有一个良好的心智模型是让你成为React老司机最快的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文将解释那些帮助我解决问题和降低复杂性的心智模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is the first part of a &lt;strong&gt;three part&lt;/strong&gt; series.&lt;/li&gt;
&lt;li&gt;Read the &lt;a href=&quot;https://obedparla.com/code/a-visual-guide-to-react-mental-models-part-2-use-state-use-effect-and-lifecycles/&quot;&gt;second part here, covering &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; and a component’s lifecycles&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;什么是心智模型?&lt;/h2&gt;
&lt;p&gt;心智模型是我们想象一个系统如何工作的方式。 我们通过理解系统的不同部分及其联系来构建心智模型，它很重要，因为它帮助我们理解世界，帮助我们解决问题。&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210525180948977.png&quot; alt=&quot;image-20210525180948977&quot; style=&quot;zoom:45%;&quot;&gt;
&lt;p&gt;A good example of a mental model is the internet: it’s a complex system with many interconnected parts, but think about the way you imagine it to work. I imagine it as many computers connected through many big servers, with many middlemen redirecting where each piece of information is stored.&lt;/p&gt;
&lt;p&gt;That’s an incomplete mental model but it’s good enough that I can work with it to solve problems and improve it if I ever need to, and that’s the gist of it: Mental models are meant to help us solve problems and understand the world.&lt;/p&gt;
&lt;h2&gt;Why Are Mental Models Important?&lt;/h2&gt;
&lt;p&gt;When I started building websites in 2014 I had a hard time understanding how it all worked. Building my blog with WordPress was easy, but I had no idea about hosting, servers, DNS, certificates, and much more.&lt;/p&gt;
&lt;p&gt;As I read articles and tried stuff out (and broke my server config more than once) I started to grasp the system, to get glimpses into how it all worked, until eventually it “clicked” and I felt comfortable working with it. My mind had built a mental model around this system that I could use to work with it.&lt;/p&gt;
&lt;p&gt;If someone had explained it by transferred their mental model to me, I would’ve understood it much faster. Here I’ll explain (and show) the mental models I use with React. It will help you understand React better and make you a better developer.&lt;/p&gt;
&lt;h2&gt;React Mental Models&lt;/h2&gt;
&lt;p&gt;React helps us build complex, interactive UIs more easily than ever before. It also encourages us to write code in a certain way, guiding us to create apps that are simpler to navigate and understand.&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210528170005430.png&quot; alt=&quot;image-20210528170005430&quot; style=&quot;zoom:45%;&quot;&gt;
&lt;p&gt;React itself is a mental model with a simple idea at its core: encapsulate portions of your app that rely on similar logic and UI and React will make sure that portion is always up kept up to date.&lt;/p&gt;
&lt;p&gt;Whether you’ve been working with React for years or are just starting, having a clear mental model is the best way to feel confident working with it. So for me to transfer my mental models to you I’ll start from first-principles and build on top of them.&lt;/p&gt;
&lt;h2&gt;It’s Functions All The Way Down&lt;/h2&gt;
&lt;p&gt;Let’s start by modeling the basic building blocks of JavaScript and React: functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A React component is just a function&lt;/li&gt;
&lt;li&gt;Components containing other components are functions calling other functions&lt;/li&gt;
&lt;li&gt;Props are the function’s arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is hidden away by JSX, the markup language React uses. Strip away JSX and React is a bunch of functions calling one another. JSX is in itself an applied mental model that makes using React simpler and more intuitive.&lt;/p&gt;
&lt;p&gt;Let’s look at each part individually.&lt;/p&gt;
&lt;h3&gt;A Component Is A Function That Returns JSX&lt;/h3&gt;
&lt;p&gt;React is used with JSX—JavaScript XML—a way to write what seems as HTML with all of JavaScript’s power. JSX offers a great applied mental model for using nested functions in a way that feels intuitive.&lt;/p&gt;
&lt;p&gt;Let’s ignore class components and focus on the far more common functional components. A &lt;em&gt;functional&lt;/em&gt; component is a function that behaves exactly like any other JavaScript function. React components always return JSX which is then executed and turned into HTML.&lt;/p&gt;
&lt;p&gt;This is what simple JSX looks like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Li&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token spread&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;RickRoll&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;wrapper&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Li&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Never give you up&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Li&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which compiled into pure JavaScript by Babel:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Li&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;li&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;RickRoll&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;div&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;div&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        className&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;wrapper&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;ul&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          Li&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&apos;Never give you up&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you find this code difficult to follow you’re not alone, and you will understand why the React team decided to use JSX instead.&lt;/p&gt;
&lt;p&gt;Now, notice how each component is a function calling another function, and each new component is the third argument for the &lt;code class=&quot;language-text&quot;&gt;React.createElement&lt;/code&gt; function. Whenever you write a component, it’s useful to keep in mind that it’s a normal JavaScript function.&lt;/p&gt;
&lt;p&gt;An important feature of React is that a component can have many children but only one parent. I found this a confusing until I realized it’s the same logic HTML has, where each element must be inside other elements, and can have many children. You can notice this in the code above, where there’s only one parent &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt; containing all the children.&lt;/p&gt;
&lt;h3&gt;Component’s Props Are The Same As A Function’s Arguments&lt;/h3&gt;
&lt;p&gt;When using a function we can use arguments to share information with that function. For React components we call these arguments &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; (funny story, I didn’t realize props is short for &lt;em&gt;properties&lt;/em&gt; for a long time).&lt;/p&gt;
&lt;p&gt;Under the hood, props behave &lt;em&gt;exactly&lt;/em&gt; like function arguments, the differences are that we interact with them through the nicer interface of JSX, and that React gives extra functionality to props such as &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Creating A Mental Model Around Functions&lt;/h2&gt;
&lt;p&gt;Using this knowledge let’s craft a mental model to intuitively understand functions!&lt;/p&gt;
&lt;p&gt;When I think about a function I imagine it as a box, and that box will do something whenever it’s called. It could return a value or not:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 30&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;logSum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 30&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since a component is a fancy function, that makes a component a box as well, with &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; as the ingredients the box needs to create the output.&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210528170114384.png&quot; alt=&quot;image-20210528170114384&quot; style=&quot;zoom:45%;&quot;&gt;
&lt;p&gt;When a component is executed it will run whatever logic it has, if any, and evaluate its JSX. Any tags will become HTML and any component will be executed, and the process is repeated until reaching the last component in the chain of children.&lt;/p&gt;
&lt;p&gt;Since a component can have many children but only one parent I imagine multiple components as a set of boxes, one inside another. Each box must be contained within a bigger box and can have many smaller boxes inside.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://obedparla.com/static/cf7892f6a3db2815d6c502fe74538e4a/1df45/box-inside-box.jpg&quot;&gt;&lt;img src=&quot;https://obedparla.com/static/cf7892f6a3db2815d6c502fe74538e4a/1df45/box-inside-box.jpg&quot; alt=&quot;One big box with many smaller boxes inside and text saying &amp;#x22;it&amp;#x27;s a box in another box&amp;#x22;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But the mental model of a box representing a component is not complete without understanding how it can interact with other boxes.&lt;/p&gt;
&lt;h2&gt;How To Think About Closures&lt;/h2&gt;
&lt;p&gt;Closures are a core concept in JavaScript. They enable complex functionality in the language, they’re super important to understand to have a good mental model around React.&lt;/p&gt;
&lt;p&gt;They’re also one of the features newcomers struggle with the most, so instead of explaining the technicalities I’ll demonstrate the mental model I have around closures.&lt;/p&gt;
&lt;p&gt;The basic description of a closure is that it’s a function. I imagine it as a box that keeps what’s inside of it from spilling out, while allowing the things outside of it from entering, like a semi-permeable box. But spilling out where?&lt;/p&gt;
&lt;p&gt;While the closure itself is a box, any closure will be inside bigger boxes, with the outermost box being the Window object.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://obedparla.com/static/952aebfcba6f1850f93b3bf6d15392f3/ce2e0/closures_window.jpg&quot;&gt;&lt;img src=&quot;https://obedparla.com/static/952aebfcba6f1850f93b3bf6d15392f3/ce2e0/closures_window.jpg&quot; alt=&quot;A box describing a mental model of a javascript closure, showing Window, scripts and React apps&quot;&gt;&lt;/a&gt;The window object encapsulates everything else&lt;/p&gt;
&lt;h3&gt;But What &lt;em&gt;Is&lt;/em&gt; A Closure?&lt;/h3&gt;
&lt;p&gt;A closure is a feature of JavaScript functions. If you’re using a function, you’re using a closure.&lt;/p&gt;
&lt;p&gt;As I’ve mentioned, a function is a box and that makes a closure a box too. Considering that each function can contain many others inside of it, then the closure is the ability of a function to use the information outside of it, while keeping the information it has inside from “spilling out”, or being used by the outer function.&lt;/p&gt;
&lt;p&gt;Speaking in terms of my mental model: I imagine the functions as boxes within boxes, and each smaller box can see the information of the outer box, or parent, but the big box cannot see the smaller one’s information. That’s as simple and accurate an explanation of closures as I can make.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://obedparla.com/static/96f403cd585425c1057214447165bbbe/01d85/data-flow.jpg&quot;&gt;&lt;img src=&quot;https://obedparla.com/static/96f403cd585425c1057214447165bbbe/7efee/data-flow.jpg&quot; alt=&quot;Visual representation of closures and the sharing of information between functions in a mental model, from a box view and a tree view&quot;&gt;&lt;/a&gt;Each function can only access its own information and the parent’s&lt;/p&gt;
&lt;p&gt;Closures are important because they can be exploited to create some powerful mechanics and React takes full advantage of this.&lt;/p&gt;
&lt;h3&gt;Closures In React&lt;/h3&gt;
&lt;p&gt;Each React component is also a closure. Within components, you can only pass props down from parent to child and the parent cannot see what’s inside the child, this is an intended feature to make our app’s data flow simpler to trace. To find where data comes from, we usually need to go up the tree to find which parent is sending it down.&lt;/p&gt;
&lt;p&gt;A great example of closures in React is updating a parent’s state through a child component. You’ve probably done this without realizing you were messing around with closures.&lt;/p&gt;
&lt;p&gt;To start, we know the parent can’t access the child’s information directly, but the child can access the parent’s. So we send down that info from parent to child through &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;. In this case, the information takes the shape of a function that updates the parent’s state.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      The count is &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ChildButtons onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;setCount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ChildButtons&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      Increase count
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      Decrease count
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When an &lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt; happens in a &lt;code class=&quot;language-text&quot;&gt;button&lt;/code&gt;, that will execute the function received from props &lt;code class=&quot;language-text&quot;&gt;props.onClick&lt;/code&gt;, and update the value using &lt;code class=&quot;language-text&quot;&gt;props.count&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The insight here lies in the way we’re updating a parent’s state through a child, in this case, the &lt;code class=&quot;language-text&quot;&gt;props.onClick&lt;/code&gt; function. The reason this works is that the function was &lt;em&gt;declared&lt;/em&gt; within the &lt;code class=&quot;language-text&quot;&gt;Parent&lt;/code&gt; component’s scope, within its closure, so it will have access to the parent’s information. Once that function is called in a child, it still lives in the same closure.&lt;/p&gt;
&lt;p&gt;This can be hard to grasp, so the way I imagine it is as a “tunnel” between closures. Each has its own scope, but we can create a one-way communication tunnel that connects both.&lt;/p&gt;
&lt;p&gt;Once we understand how closures affect our components, we can take the next big step: React state.&lt;/p&gt;
&lt;h2&gt;Fitting React’s State Into Our Mental Model&lt;/h2&gt;
&lt;p&gt;React’s philosophy is simple: it handles &lt;em&gt;when&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; to render elements, and developers control &lt;em&gt;what&lt;/em&gt; to render. State is our tool to decide that what.&lt;/p&gt;
&lt;p&gt;When state changes, its component renders and therefore re-executes all the code within. We do this to show new, updated information to the user.&lt;/p&gt;
&lt;p&gt;In my mental model state is like a special property inside the box. It’s independent of everything else that happens within it. It will get a default value on the first render and always be up to date with the latest value.&lt;/p&gt;
&lt;p&gt;Each variable and function is created on every render, which means their values are also brand new. Even if a variable’s value never changes, it is recalculated and reassigned every time. That’s not the case with state, it only changes when there’s a request for it to change via a &lt;code class=&quot;language-text&quot;&gt;set state&lt;/code&gt; event.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://obedparla.com/static/acd86ef0ea8a3fe610df603769e68ad9/44313/state-in-box.jpg&quot;&gt;&lt;img src=&quot;https://obedparla.com/static/acd86ef0ea8a3fe610df603769e68ad9/44313/state-in-box.jpg&quot; alt=&quot;React component state visualized as a part of a bigger box with props coming in from outside&quot;&gt;&lt;/a&gt;State is a special, independent part of the box; with props coming from outside&lt;/p&gt;
&lt;p&gt;State follows a simple rule: Whenever it changes it will re-rendered the component and its children. Props follow the same logic, if a prop changes, the component will re-render, however, we can control state by modifying it, props are more static and usually change as a reaction to a state change.&lt;/p&gt;
&lt;h2&gt;The Rendering Mental Model: Understanding React’s Magic&lt;/h2&gt;
&lt;p&gt;I consider rendering to be React’s most confusing part because a lot of things happen during rendering that sometimes isn’t obvious by looking at the code. That’s why having a clear mental model helps.&lt;/p&gt;
&lt;p&gt;The way I imagine rendering with my imaginary boxes is two-fold: the first render brings the box into existence, that’s when the state is initialized. The second part is when it re-renders, that’s the box being recycled, most of it is brand new but some important elements of it remain namely state.&lt;/p&gt;
&lt;p&gt;On every render, everything inside a component is created, including variables and functions, that’s why we can have variables storing a calculation’s results, since they will be recalculated on every render. It’s also why functions are not reliable as values, due to their reference (the function’s value, per se) being different every render.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Thumbnail&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;withIcon &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AmazingIcon &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imgUrl&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alt&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above will give a different result depending on the props the component receives. The reason React &lt;em&gt;must&lt;/em&gt; re-render on every prop change is that it wants to keep the user up to date with the latest information.&lt;/p&gt;
&lt;p&gt;However, the state doesn’t change on re-renders, its value is maintained. That’s why the box is “recycled” instead of created brand new every time. Internally, React is keeping track of each box and making sure its state is always consistent. That’s how React knows when to update a component.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://obedparla.com/static/78de62863da9bd4c40c588c294167031/ea2ac/react-rendering-mental-model.jpg&quot;&gt;&lt;img src=&quot;https://obedparla.com/static/78de62863da9bd4c40c588c294167031/7efee/react-rendering-mental-model.jpg&quot; alt=&quot;Mental model of a React component re-rendering when props change&quot;&gt;&lt;/a&gt;When props (or state) changes, a new render happens and the component’s output can change&lt;/p&gt;
&lt;p&gt;By imagining a box being recycled I can understand what’s going on inside of it. For simple components, it’s easy to grasp, but the more complex a component becomes, the more props it receives, the more state it maintains, the more useful a clear mental model becomes.&lt;/p&gt;
&lt;h2&gt;A Complete React Mental Model: Putting It All Together.&lt;/h2&gt;
&lt;p&gt;Now that I’ve explained all the different parts of the puzzle separately, let’s put it all together. Here’s the complete mental model I use for React components, directly translated from how I imagine them into words.&lt;/p&gt;
&lt;p&gt;I imagine a React component as a box that contains all of its information within its walls, including its children, which are more boxes.&lt;/p&gt;
&lt;p&gt;And like a box in the real world, it can have other boxes inside of it and these boxes can, in turn, contain more boxes. That way each box/component must have a single parent, and a parent can have many children.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://obedparla.com/static/d6c8afaef3597fd26d9174e070be1ce3/ce2e0/react-mental-model-basic.jpg&quot;&gt;&lt;img src=&quot;https://obedparla.com/static/d6c8afaef3597fd26d9174e070be1ce3/ce2e0/react-mental-model-basic.jpg&quot; alt=&quot;Basic representation of a React component as a mental model using boxes&quot;&gt;&lt;/a&gt;The basic representation of a React component&lt;/p&gt;
&lt;p&gt;The boxes are semi-permeable, meaning they never leak anything to the outside but can use information from the outside as if it belonged to them. I imagine like this to represent how closures work in JavaScript.&lt;/p&gt;
&lt;p&gt;In React the way to share information between components is called &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;, the same idea applies to function and then it’s called &lt;code class=&quot;language-text&quot;&gt;arguments&lt;/code&gt;, they both work in the same way but with a different syntax.&lt;/p&gt;
&lt;p&gt;Within components, information can only travel &lt;em&gt;down&lt;/em&gt; from parents to children. In other words, children can access their parent’s data and state, but not the other way around, and the way we share that information is through &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I imagine this directional sharing of information as boxes within boxes. With the inner-most box being able to absorb the parent’s data.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://obedparla.com/static/a3471b4d03d16406ea159b3bc3f3e218/ce2e0/data-sharing-model.jpg&quot;&gt;&lt;img src=&quot;https://obedparla.com/static/a3471b4d03d16406ea159b3bc3f3e218/ce2e0/data-sharing-model.jpg&quot; alt=&quot; React Mental model of data sharing between components visualized as information flowing downward &quot;&gt;&lt;/a&gt;Data is shared from parent to child&lt;/p&gt;
&lt;p&gt;The box must first be created though, and this happens on &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt;, where the default value is given to &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt; and just like with functions, all the code within the component is executed. In my mental model, this is equivalent to the box being &lt;em&gt;created&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Subsequent renders, or &lt;code class=&quot;language-text&quot;&gt;re-renders&lt;/code&gt;, execute all the code in the component again, recalculating variables, recreating functions, and so on. Everything except for &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt; is brand new on each render. State’s value is maintained across renders is updated only through a &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;In my mental model, I see re-rendering as recycling the box since most of it is recreated, but it’s still the same box due to React keeping track of the component’s state.&lt;/p&gt;
&lt;p&gt;When a box is recycled all the boxes within it, its children, are also recycled. This can happen because the component’s state was modified or a prop changed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://obedparla.com/static/267768646d810a0032728d222c3f13a5/ea2ac/react-rendering-mental-model-full.jpg&quot;&gt;&lt;img src=&quot;https://obedparla.com/static/267768646d810a0032728d222c3f13a5/7efee/react-rendering-mental-model-full.jpg&quot; alt=&quot;Mental model of a React component re-rendering when props or state change&quot;&gt;&lt;/a&gt;Mental model of a React component re-rendering when props or state change&lt;/p&gt;
&lt;p&gt;Remember that a state or prop changing means the information the user sees is outdated, and React always wants to keep the UI updated so it re-renders the component that must show the new data.&lt;/p&gt;
&lt;p&gt;By using these mental models I feel confident when working with React. They help me visualize what can be a maze of code into a comprehensive mental map. It also demystifies React and brings it to a level I’m much more comfortable with.&lt;/p&gt;
&lt;p&gt;React is not that complex once you start understanding the core principles behind it and create some ways to imagine how your code works.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I hope this article was useful to you and it was as enjoyable to read as it was to write! I realized that I understand React intuitively and putting that understanding into words was challenging.&lt;/p&gt;
&lt;p&gt;Want to learn more React through visual mental models? &lt;a href=&quot;https://obedparla.com/code/a-visual-guide-to-react-mental-models-part-2-use-state-use-effect-and-lifecycles/&quot;&gt;Check out part 2&lt;/a&gt;, covering &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; and a component’s lifecycles. It has even more great illustrations than this one!&lt;/p&gt;
&lt;p&gt;I’m planning a whole series of &lt;strong&gt;visual&lt;/strong&gt; guides. Subscribing to my newsletter is the best way to know when they’re out. I only email for new, high-quality articles.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[常用Git命令速查（2）- 操作后悔了怎么办？]]></title><description><![CDATA[…]]></description><link>https://blog.deathdealer.cn/git/git-rollback/</link><guid isPermaLink="false">https://blog.deathdealer.cn/git/git-rollback/</guid><pubDate>Tue, 25 May 2021 16:14:03 GMT</pubDate><content:encoded>&lt;h5&gt;撤销当前分支的变化&lt;/h5&gt;
&lt;p&gt;如果在某个分支上修改了代码并做了几次提交，结果突然发现放错了分支，这几个提交本应该放到另一个分支的时候。应该进行如下处理：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 从当前分支的最新的提交新建出一个分支（注意，这时依然停留在当前分支）&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 切换到这几次提交之前的状态&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset --hard &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;当前分支此前的最后一次提交Commit_ID&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 切换到第1步创建出来的分支&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 后续可以在这个分支上继续进行开发，或者是将其merge到正确的分支后在正确的分支上进行开发。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;撤消暂存区文件&lt;/h5&gt;
&lt;p&gt;如果已经把文档加到了暂存区（通过&lt;code class=&quot;language-text&quot;&gt;git add&lt;/code&gt;命令)，但是还没有提交。如果想反悔可以进行如下处理：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 用rm命令，适合单个文件，或文件不多的时候&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; --cached &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;filename&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 用reset HEAD命令也行，会恢复到最后一次commit时的状态&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset HEAD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上两个都可以，区别是&lt;code class=&quot;language-text&quot;&gt;rm&lt;/code&gt;需要一个一个文件的撤消，&lt;code class=&quot;language-text&quot;&gt;reset HEAD&lt;/code&gt;命令可以一直性全部撤消&lt;/p&gt;
&lt;h5&gt;丢弃工作区文件的修改&lt;/h5&gt;
&lt;p&gt;如果发现代码改的不对，需要丢弃掉并且重头开始修改。可以进行如下处理：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 这样做的原理是先找暂存区，如果该文件有暂存的版本，则恢复该版本，否则就恢复上一次提交的版本。&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout -- &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;filename&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;重要：工作区的文件变化一旦被撤销，就无法找回了。&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;丢弃提交（reset)&lt;/h5&gt;
&lt;p&gt;如果希望以前的提交在历史中彻底消失，可以使用&lt;code class=&quot;language-text&quot;&gt;git reset&lt;/code&gt;命令，丢弃掉某一次提交之后的所有提交。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 丢弃掉commit之后所有的提交，如果不加--hard参数，工作区不会丢弃，加了这个参数工作区也丢弃了&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;commit_id&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; --hard

&lt;span class=&quot;token comment&quot;&gt;# 如果需要同步到远程，因为reset之后肯定是比远程落后的，所以要加上-f参数强制推送上去&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push -f &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 如果之前没有推送到远程，可以不用加-f参数&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;重要：这个操作是很危险的，慎用&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;撤消提交(revert)&lt;/h5&gt;
&lt;p&gt;和丢弃提交的区别就是，撤消不会丢失历史，而是会产生一个新的commit去把之前某个commit的内容全部抵消掉。它不会改变过去的历史，所以是首选方式，没有任何丢失代码的风险。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git revert&lt;/code&gt; 命令只能抵消上一个提交，如果想抵消多个提交，必须在命令行依次指定提交。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; revert &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;commit_id&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;commit_id&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git revert&lt;/code&gt;命令还有两个参数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--no-edit&lt;/code&gt;：执行时不打开默认编辑器，直接使用 Git 自动生成的提交信息。&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--no-commit&lt;/code&gt;：只抵消暂存区和工作区的文件变化，不产生新的提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h5&gt;替换上一次提交&lt;/h5&gt;
&lt;p&gt;提交以后，发现提交信息写错了，这时可以使用&lt;code class=&quot;language-text&quot;&gt;git commit&lt;/code&gt;命令的&lt;code class=&quot;language-text&quot;&gt;--amend&lt;/code&gt;参数修改上一次的提交信息。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit --amend -m &lt;span class=&quot;token string&quot;&gt;&quot;Fixes bug #42&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它的原理是产生一个新的提交对象，替换掉上一次提交产生的提交对象。&lt;/p&gt;
&lt;p&gt;这时如果暂存区有发生变化的文件，会一起提交到仓库。所以，&lt;code class=&quot;language-text&quot;&gt;--amend&lt;/code&gt;不仅可以修改提交信息，还可以整个把上一次提交替换掉。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[国内加速VSCode下载]]></title><description><![CDATA[由于某种不可抗力的因素，国内从microsoft官网下载vscode非常的慢（2021年了却只有几kb/s），甚至无法下载。解决方法如下： 从官网下载VSCode时给的下载服务器域名是： 直接复制这个完整下载路径，保持stable…]]></description><link>https://blog.deathdealer.cn/accelerate-vscode-download/</link><guid isPermaLink="false">https://blog.deathdealer.cn/accelerate-vscode-download/</guid><pubDate>Tue, 18 May 2021 11:12:03 GMT</pubDate><content:encoded>&lt;p&gt;由于某种不可抗力的因素，国内从microsoft官网下载vscode非常的慢（2021年了却只有几kb/s），甚至无法下载。解决方法如下：&lt;/p&gt;
&lt;p&gt;从官网下载VSCode时给的下载服务器域名是&lt;code class=&quot;language-text&quot;&gt;az764295.vo.msecnd.net&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;http&quot;&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;https:&lt;/span&gt;//az764295.vo.msecnd.net/stable/054a9295330880ed74ceaedda236253b4f39a335/VSCode-darwin-arm64.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接复制这个完整下载路径，保持stable及之后内容不变，只修改域名部分&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;http&quot;&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;https:&lt;/span&gt;//vscode.cdn.azure.cn/stable/054a9295330880ed74ceaedda236253b4f39a335/VSCode-darwin-arm64.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;速度直接起飞，并且不用担心下面的域名有问题，他一样是微软官方的azure域名（走的是国内CDN)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[常用Git命令速查（1）- 基本操作]]></title><description><![CDATA[Git的基本运作原理图 Git配置 别名 以下是我常用的git别名，就是为了输命令时少打几个字 用户配置 远程仓库操作 克隆 查看远程仓库 添加远程仓库 删除远程仓库 重命名 可以将远程仓库名简单理解为远程地址的缩写 Branch…]]></description><link>https://blog.deathdealer.cn/git/git-often-used-cmd/</link><guid isPermaLink="false">https://blog.deathdealer.cn/git/git-often-used-cmd/</guid><pubDate>Fri, 14 May 2021 22:34:03 GMT</pubDate><content:encoded>&lt;h4&gt;Git的基本运作原理图&lt;/h4&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210516201437101.png&quot; alt=&quot;image-20210516201437101&quot; style=&quot;zoom:80%;&quot;&gt;
&lt;h4&gt;Git配置&lt;/h4&gt;
&lt;h5&gt;别名&lt;/h5&gt;
&lt;p&gt;以下是我常用的git别名，就是为了输命令时少打几个字&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global alias.co checkout  &lt;span class=&quot;token comment&quot;&gt;# git co &lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global alias.br branch &lt;span class=&quot;token comment&quot;&gt;# git br&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global alias.ci commit &lt;span class=&quot;token comment&quot;&gt;# git ci&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global alias.st status &lt;span class=&quot;token comment&quot;&gt;# git st&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;用户配置&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global user.name &lt;span class=&quot;token string&quot;&gt;&quot;deathdealer&quot;&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global user.email master@deathdealer.cn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;远程仓库操作&lt;/h4&gt;
&lt;h5&gt;克隆&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 克隆远程仓库&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone https://xxx.gitlab.com/xx/xx.git
&lt;span class=&quot;token comment&quot;&gt;# 默认情况下远程仓库被命名为origin，也可以在克隆时用-o来指定名称&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone -o &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; https://xxx.gitlab.com/xx/xx.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;查看远程仓库&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 列出所有的远程仓库&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote -v
&lt;span class=&quot;token comment&quot;&gt;# 查看具体某个仓库的信息&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote show &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;添加远程仓库&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; https://yyy.gitlab.cn/yy/yy.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;删除远程仓库&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;重命名&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote &lt;span class=&quot;token function&quot;&gt;rename&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;old_origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;new_origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;可以将远程仓库名简单理解为远程地址的缩写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Branch操作&lt;/h4&gt;
&lt;h5&gt;列出分支&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token comment&quot;&gt;# 列出本地分支&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch -r &lt;span class=&quot;token comment&quot;&gt;# 列出远程分支&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch -a &lt;span class=&quot;token comment&quot;&gt;# 列出所有分支，包括本地和远程&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;创建分支&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 创建并切换到分支&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout -b &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;  
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; switch -c &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 如果要推送到远程&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push --all &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 推送所有分支&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;合并分支&lt;/h5&gt;
&lt;p&gt;首先切换到目标分支&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout/switch &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;target_branch&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; merge &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;source_branch&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 如果没有冲突，可以把source_branch的内容直接合并到target_branch中&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; merge &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origiin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;source_branch&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 可以直接从远程分支合并&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;删除分支&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 删除本地分支&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch -d &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 删除远程分支&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; --delete &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 通过省略本地分支名的方法可以删除远程分支，详见最下方的解释&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; :&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;branch_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Tag操作&lt;/h4&gt;
&lt;h5&gt;列出标签&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 列出标签&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag -n

&lt;span class=&quot;token comment&quot;&gt;# 查看tag信息&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; show &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;创建标签&lt;/h5&gt;
&lt;p&gt;首先，切换到需要打标签的分支上&lt;code class=&quot;language-text&quot;&gt;git checkout master&lt;/code&gt;，如果是基于分支的某个commit打标签，下面的命令再加一个&lt;code class=&quot;language-text&quot;&gt;commit_id&lt;/code&gt;就行了&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 有两种标签：&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 1. 注释标签：用来添加注释或签名的；&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 2. 轻标签：为了在本地暂时使用或一次性使用；&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 创建轻标签&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 基于分支打标签&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;commit_id&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 基于分支的某个commit打标签&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 创建注释标签&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag -am &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;commit-message&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 基于分支打标签&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag -am &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;commit-message&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;commit_id&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 基于分支的某个commit打标签&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 如果需要推送到远程&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push origin refs/tags/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; --tags &lt;span class=&quot;token comment&quot;&gt;# 一次性推送所有tags&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;删除标签&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 删除本地TAG&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag -d &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 删除远程TAG（下面几条都可以）&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push --delete origin tag &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push --delete origin &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; :refs/tags/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;origin&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; :&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;tag_name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;git push命令可以用于删除服务器上的分支和标签，它的主要语法是：&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git push &amp;lt;origin&amp;gt; &amp;lt;local&amp;gt;:&amp;lt;remote&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当省略掉&lt;code class=&quot;language-text&quot;&gt;&amp;lt;local&amp;gt;&lt;/code&gt;本地分支名/标签名时，起到的作用就是删除&lt;code class=&quot;language-text&quot;&gt;&amp;lt;remote&amp;gt;&lt;/code&gt;分支/标签，也可以理解为：推送一个空的分支/标签给&lt;code class=&quot;language-text&quot;&gt;&amp;lt;remote&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这一点非常有用！&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[picgo在typora中的配置与使用]]></title><description><![CDATA[Picgo部分 Picgo是一个很不错的文件上传工具，支持很多图床：阿里云OSS、腾读云COS、Github、又拍云、七牛云等 picgo和Picgo-Core可以认为是同一个东西，只有命令行 Picgo是用包装后带图形界面的picgo 因为我只是写BLOG…]]></description><link>https://blog.deathdealer.cn/typora-aliyunoss/</link><guid isPermaLink="false">https://blog.deathdealer.cn/typora-aliyunoss/</guid><pubDate>Fri, 23 Apr 2021 16:50:32 GMT</pubDate><content:encoded>&lt;h4&gt;Picgo部分&lt;/h4&gt;
&lt;p&gt;Picgo是一个很不错的文件上传工具，支持很多图床：阿里云OSS、腾读云COS、Github、又拍云、七牛云等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;picgo和Picgo-Core可以认为是同一个东西，只有命令行&lt;/p&gt;
&lt;p&gt;Picgo是用&lt;code class=&quot;language-text&quot;&gt;electron&lt;/code&gt;包装后带图形界面的picgo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为我只是写BLOG需要上传图片，没必要再装个有界面的picgo，所以选择命令行形式的picgo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;全局安装picgo&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# NPM&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g picgo
&lt;span class=&quot;token comment&quot;&gt;# Yarn &lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; global &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; picgo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;验证一下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;picgo --version
&lt;span class=&quot;token comment&quot;&gt;# 1.4.19&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; picgo &lt;span class=&quot;token comment&quot;&gt;# 查看一下picgo装在哪里，后面会用到&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# /Users/deathdealer/.nvm/versions/node/v15.14.0/bin/picgo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成picgo配置文件&lt;/p&gt;
&lt;p&gt;picgo的配置文件是&lt;code class=&quot;language-text&quot;&gt;~/.picgo/config.json&lt;/code&gt;，可以自己创建也可以用交互式命令行&lt;code class=&quot;language-text&quot;&gt;picgo set uploader&lt;/code&gt;自动生成，推荐用后者生成，然后根据需要修改&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ picgo &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; uploader
? Choose a&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; uploader aliyun  &lt;span class=&quot;token comment&quot;&gt;# 选择图床&lt;/span&gt;
? accessKeyId: xxxxxxxxxxxxxxxxx  &lt;span class=&quot;token comment&quot;&gt;# AccessKey ID&lt;/span&gt;
? accessKeySecret: xxxxxxxxxxxxxxxxx &lt;span class=&quot;token comment&quot;&gt;# AccessKey Secret&lt;/span&gt;
? bucket: obs-deathdealer  &lt;span class=&quot;token comment&quot;&gt;# 桶名&lt;/span&gt;
? area: oss-cn-hangzhou &lt;span class=&quot;token comment&quot;&gt;# oss所在region&lt;/span&gt;
? path: images/  &lt;span class=&quot;token comment&quot;&gt;# 自定义桶内文件夹，&lt;/span&gt;
? customUrl:     &lt;span class=&quot;token comment&quot;&gt;# 自定义域名，默认是阿里云的域名&lt;/span&gt;
? options:       &lt;span class=&quot;token comment&quot;&gt;# 选项，一般不需要指定&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PicGo SUCCESS&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Configure config successfully&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此&lt;code class=&quot;language-text&quot;&gt;picgo&lt;/code&gt;配置完成，其它图床选项各不相同，可以根据提示输入或参考：&lt;a href=&quot;https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#picbed&quot;&gt;picgo配置&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Typora部分&lt;/h4&gt;
&lt;p&gt;打开Typora的配置窗口：&lt;code class=&quot;language-text&quot;&gt;偏好设置&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;图像&lt;/code&gt;。将&lt;code class=&quot;language-text&quot;&gt;插入图片时...&lt;/code&gt;设置为&lt;code class=&quot;language-text&quot;&gt;上传图片&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210423163151924.png&quot; alt=&quot;image-20210423163151924&quot; style=&quot;zoom:45%;&quot;&gt;
&lt;p&gt;然后在&lt;code class=&quot;language-text&quot;&gt;上传服务设定&lt;/code&gt;中选择&lt;code class=&quot;language-text&quot;&gt;Custom command&lt;/code&gt;，在下面的&lt;code class=&quot;language-text&quot;&gt;命令&lt;/code&gt;中填入：&lt;code class=&quot;language-text&quot;&gt;$node_path $picgo_path upload&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$node_path&lt;/code&gt;是node所在的路径，可以用&lt;code class=&quot;language-text&quot;&gt;which node&lt;/code&gt;获得，&lt;code class=&quot;language-text&quot;&gt;$picgo_path&lt;/code&gt;是picgo所在路径，可以通过&lt;code class=&quot;language-text&quot;&gt;which picgo&lt;/code&gt;获得，填完后点击&lt;code class=&quot;language-text&quot;&gt;验证图片上传选项&lt;/code&gt;按钮，如果配置没问题，会提示验证成功。&lt;/p&gt;
&lt;h4&gt;效果&lt;/h4&gt;
&lt;p&gt;经过以上两步配置之后，在typora写文档时，如果粘贴图片进来，会自动把文件上传到图床上，然后把markdown中图片的&lt;code class=&quot;language-text&quot;&gt;src&lt;/code&gt;替换为图床生成的URL，这样无论在哪里都可以访问到这个图片了，并且可以永久保存。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Svelte学习笔记（3）]]></title><description><![CDATA[Props 和react等框架一样，svelte也是通过向子组件传值。不一样的是，在svelte中，子组件需要用来标记接收props的变量。这里的和js模块里面的export用法完全不一样，看起来很怪异，但是在Svelte中暂时需要去习惯它 父组件传值和react…]]></description><link>https://blog.deathdealer.cn/svelte/svelte-3/</link><guid isPermaLink="false">https://blog.deathdealer.cn/svelte/svelte-3/</guid><pubDate>Sun, 18 Apr 2021 21:41:32 GMT</pubDate><content:encoded>&lt;h4&gt;Props&lt;/h4&gt;
&lt;p&gt;和react等框架一样，svelte也是通过&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;向子组件传值。不一样的是，在svelte中，子组件需要用&lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt;来标记接收props的变量。这里的&lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt;和js模块里面的export用法完全不一样，看起来很怪异，但是在Svelte中暂时需要去习惯它&lt;/p&gt;
&lt;p&gt;父组件传值和react等无异：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ChildComponent answer&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;子组件需要用&lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt;标记props：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
  &lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;some_defalut_value&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 标记props，同时可以指定默认值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;The answer is {answer}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;  // The answer is 42&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：如果&lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt;标记的是&lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;function&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt;，对父组件来说这些props就是只读的，传什么都不会改变子组件props的值。例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- App.svelte --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Nested &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./Nested.svelte&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 这里不管传什么到Nested，都显示readOnly，点击按钮还是会alert出消息，而不是在控制台打印消息 --&gt;&lt;/span&gt;
&amp;lt;Nested thisIs=&quot;abcdefg&quot; greet={ name =&gt; {console.log(name)} } /&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Nested.svelte --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
  &lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; thisIs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;readOnly&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{thisIs}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&amp;lt;button on:click={() =&gt; greet(&quot;abcd&quot;)}&gt;Click&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用保留字来作为props名，比如&lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// creates a `class` property,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Svelte学习笔记（2）]]></title><description><![CDATA[响应式系统 Svelte’s reactivity is based on assignments Svelte的响应式系统是基于赋值的，只要给声明的变量、对象、数组重新赋值，就可以触发re-render…]]></description><link>https://blog.deathdealer.cn/svelte/svelte-2/</link><guid isPermaLink="false">https://blog.deathdealer.cn/svelte/svelte-2/</guid><pubDate>Sun, 18 Apr 2021 21:33:32 GMT</pubDate><content:encoded>&lt;h4&gt;响应式系统&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Svelte’s reactivity is based on assignments&lt;/p&gt;
&lt;p&gt;Svelte的响应式系统是基于赋值的，只要给声明的变量、对象、数组重新赋值，就可以触发re-render&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事件绑定&lt;/p&gt;
&lt;p&gt;用&lt;code class=&quot;language-text&quot;&gt;on:&lt;/code&gt;前缀绑定事件处理函数，如下代码所示：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;on:&lt;/span&gt;click&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;{handleClick}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
Click
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;响应式声明（reactive declarations）&lt;/p&gt;
&lt;p&gt;用&lt;code class=&quot;language-text&quot;&gt;$:&lt;/code&gt;前缀声明&lt;strong&gt;响应式变量&lt;/strong&gt;，如下代码所示：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
$&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; doubled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;响应式变量可以不用声明，因为svelte会自动加上&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;，如上面例子中的&lt;code class=&quot;language-text&quot;&gt;doubled&lt;/code&gt;可以不用声明直接使用&lt;/p&gt;
&lt;p&gt;除了声明响应式变量之外，还可以&lt;strong&gt;运行任意语句&lt;/strong&gt;。语句中的变量值变了，就会自动运行这些语句，如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;$&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;the count is &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 只要count值变了，就会在控制台打印日志&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;I SAID THE COUNT IS &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;甚至还可以用在&lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt;语句前面&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;$: if (count &gt;= 10) {
alert(`count is dangerously high!`);
	count = 9;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数组和对象的变化不能用&lt;code class=&quot;language-text&quot;&gt;$:&lt;/code&gt;来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$:&lt;/code&gt;是javascript label语法，&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/label&quot;&gt;MDN&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Svelte学习笔记（1）]]></title><description><![CDATA[Svelte是什么 首先它又是一个做Web开发的轮子，在State Of JS 2020调查中Svelte获得前端工程师的一致好评，是2020年满意度第1的前端框架。 Svelte is a radical new approach to building user…]]></description><link>https://blog.deathdealer.cn/svelte/svelte-1/</link><guid isPermaLink="false">https://blog.deathdealer.cn/svelte/svelte-1/</guid><pubDate>Sun, 18 Apr 2021 21:25:32 GMT</pubDate><content:encoded>&lt;h4&gt;Svelte是什么&lt;/h4&gt;
&lt;p&gt;首先它又是一个做Web开发的轮子，在&lt;a href=&quot;https://2020.stateofjs.com/zh-Hans/technologies/front-end-frameworks&quot;&gt;State Of JS 2020&lt;/a&gt;调查中Svelte获得前端工程师的一致好评，是2020年满意度第1的前端框架。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Svelte is a radical new approach to building user interfaces. Whereas traditional frameworks like React and Vue do the bulk of their work in the &lt;em&gt;browser&lt;/em&gt;, Svelte shifts that work into a &lt;em&gt;compile step&lt;/em&gt; that happens when you build your app.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和react/vue/angular这些框架不一样的地方在于：会在编译阶段会把自己（svelte runtime）和业务代码打包到一起。因为最终会打包成Vallina JS，所以没有Virtual DOM的开销，运行速度很快，打包出来的产物尺寸也很小。&lt;/p&gt;
&lt;p&gt;作者Rich Harris在《Rethinking reactivity》中把Virtual DOM一通怼，认为Virtual DOM是纯开销没有半点是处。&lt;a href=&quot;https://youtu.be/AdNJ3fydeao&quot;&gt;Youtube视频&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;快速认识Svelte&lt;/h4&gt;
&lt;h5&gt;Svelte组件&lt;/h5&gt;
&lt;p&gt;和vue类似，svelte组件也是把HTML/CSS/JS写在一个扩展名为&lt;code class=&quot;language-text&quot;&gt;.svelte&lt;/code&gt;的文件中，VSCode中需按装一个插件（&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode&quot;&gt;Svelte for VSCode&lt;/a&gt;）才能对&lt;code class=&quot;language-text&quot;&gt;.svelte&lt;/code&gt;文件进行语法高亮和语法提示等。&lt;/p&gt;
&lt;p&gt;组件的结构一般如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Svelte组件结构(.svelte) --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
  &lt;span class=&quot;token comment&quot;&gt;// logic goes here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- CSS --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* styles go here */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- template (zero or more items) goes here --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;....&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;变量&lt;/h5&gt;
&lt;p&gt;script中定义的变量，在html中用&lt;code class=&quot;language-text&quot;&gt;{}&lt;/code&gt;来引用，既可以在text中引用，也可以在属性中引用（比如img的src属性）&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;world&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Hello {name.toUpperCase()}!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果用在HTML上的变量名和属性名一样，可以用简写形式&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;http://www.xx.com/assets/xxx.png&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 简写形式 --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;{src}&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;some text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认情况下&lt;code class=&quot;language-text&quot;&gt;script&lt;/code&gt;标签下定义的字符串都是字面上的字符串，会在render是原样显示出来，如果想渲染没有转义过的字符串（比如一段html文本）可以在模版中用&lt;code class=&quot;language-text&quot;&gt;@html&lt;/code&gt;标注出来&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; string &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;this string contains some &amp;lt;strong&gt;HTML!!!&amp;lt;/strong&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{@html string}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;样式&lt;/h5&gt;
&lt;p&gt;直接用&lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt;标签可以给组件定义样式，但是组件内定义的&lt;code class=&quot;language-text&quot;&gt;style&lt;/code&gt;只在本组件内生效，不会影响其它组件。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;
  &lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;font-sie&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 18px&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;hello world&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只会影响本组件内的&lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt;标签，也就是hello world会受影响&lt;/p&gt;
&lt;h5&gt;引用其它组件&lt;/h5&gt;
&lt;p&gt;一个svelte文件写完整个APP的情况正常人都干不出来这样的事，通常都会拆开来写组件，不同的组件负责不同的功能与业务。引入其它组件只需要在&lt;code class=&quot;language-text&quot;&gt;script&lt;/code&gt;区域里&lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt;即可。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; OtherComponent &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./OtherComponent.svelte&apos;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OtherComponent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;约定：用户自定义组件用大驼峰来表示，用来和html原生标签区分。&lt;/p&gt;
&lt;h5&gt;解析Svelte文件&lt;/h5&gt;
&lt;p&gt;svelte文件的结构与vue相当类似，也没办法直接被打包出来，所以需要用一些插件或者webpack loader才行。以下两个是官方维护的插件，比较交靠谱。&lt;/p&gt;
&lt;p&gt;Webpack：&lt;a href=&quot;https://github.com/sveltejs/svelte-loader&quot;&gt;svelte-loader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rollup：&lt;a href=&quot;https://github.com/sveltejs/rollup-plugin-svelte&quot;&gt;rollup-plugin-svelte&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[valtio简介]]></title><description><![CDATA[又一个状态管理的轮子。查了一下字典在芬兰语里面就是的意思，名字起的真是简单粗暴（作者却是个日本人） 安装 使用 1. 基本使用 官方文档宣称可以让对象拥有自我意识（实际上还是基于Proxy进行对原对象进行了代理） 然后就可以在任何地方、像普通的js对象一样直接修改值（Mutate…]]></description><link>https://blog.deathdealer.cn/intro-valtio/</link><guid isPermaLink="false">https://blog.deathdealer.cn/intro-valtio/</guid><pubDate>Tue, 23 Mar 2021 22:46:32 GMT</pubDate><content:encoded>&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210323224435352.png&quot; alt=&quot;image-20210323224435352&quot; style=&quot;zoom:67%;&quot;&gt;
&lt;p&gt;又一个状态管理的轮子。查了一下字典&lt;code class=&quot;language-text&quot;&gt;Valtio&lt;/code&gt;在芬兰语里面就是&lt;code class=&quot;language-text&quot;&gt;状态&lt;/code&gt;的意思，名字起的真是简单粗暴（作者却是个日本人）&lt;/p&gt;
&lt;h4&gt;安装&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; valtio&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;使用&lt;/h4&gt;
&lt;h5&gt;1. 基本使用&lt;/h5&gt;
&lt;p&gt;官方文档宣称&lt;code class=&quot;language-text&quot;&gt;Valtio&lt;/code&gt;可以让对象拥有自我意识（实际上还是基于Proxy进行对原对象进行了代理）&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; proxy &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;valtio&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就可以在任何地方、像普通的js对象一样直接修改值（Mutate from anywhere）。如果需要在React中使用，可以使用valtio提供的&lt;code class=&quot;language-text&quot;&gt;useSnapshot&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useSnapshot &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;valtio&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; snap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSnapshot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 这里的state就是上面proxy代理过的对象&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;snap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;官方把&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;包装成&lt;code class=&quot;language-text&quot;&gt;snapshot&lt;/code&gt;快照，快照的本质是一个&lt;code class=&quot;language-text&quot;&gt;immutable&lt;/code&gt;的对象，个人感觉比immer中对草稿进行修改然后得到一个新的state的概念更容易理解，也更贴近函数组件的本质。&lt;/p&gt;
&lt;p&gt;上述示例中，每点击一次【+1】按钮，修改一次state的值,得到一个新的快照，React展示的是当前快照的值。&lt;/p&gt;
&lt;h5&gt;2. Suspense&lt;/h5&gt;
&lt;p&gt;如果代理的对象某个字段是&lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt;的话，valtio还支持和Suspense一起使用。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; post&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; snap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSnapshot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;snap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;waiting...&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;3. 订阅变更&lt;/h5&gt;
&lt;p&gt;Valtio提供了&lt;code class=&quot;language-text&quot;&gt;subscribe&lt;/code&gt;文法用来订阅state的变更。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; subscribe &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;valtio&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; subscribeKey &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;valtio/utils&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 可以直接订阅整个state的变更&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; unsubscribe &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;state has changed to&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 也可以只订阅state中某个部分的变更&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; unsubscribe &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;state.obj has changed to&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 如果你想订阅的字段是JS原始类型的话，用subscribeKey更合适一点&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; unsubscribe &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;subscribeKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;state.count has changed to&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;别忘了在适当的时候调用一下&lt;code class=&quot;language-text&quot;&gt;unsubscribe&lt;/code&gt;方法来取消订阅&lt;/p&gt;
&lt;h5&gt;4. 同步更新&lt;/h5&gt;
&lt;p&gt;默认情况下，state的变更在触发re-render之前是异步的，批处理的。如果想要同步触发re-render可以在&lt;code class=&quot;language-text&quot;&gt;useSnapshot&lt;/code&gt;时传入&lt;code class=&quot;language-text&quot;&gt;{sync: true}&lt;/code&gt;来关闭这个特性&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TextBox&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; snap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSnapshot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; sync&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;snap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; 
              &lt;span class=&quot;token attr-name&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;5. 在vanilla-js中使用&lt;/h5&gt;
&lt;p&gt;valtio不仅仅是给react使用的，也可以直接在vanilla中使用，用法基本上与react一样&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; proxy&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; subscribe&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; snapshot &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;valtio/vanilla&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;hello&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;state is mutated&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// A snapshot is an immutable object&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;最后&lt;/h4&gt;
&lt;p&gt;目前项目才创建了4个月左右，目前github上收获了2.1K个星星，源码也很简单，有兴趣的可以clone下来阅读，很容易理解。项目还处理发展期，期待提供更多实用的API或hooks出来。&lt;/p&gt;
&lt;p&gt;和&lt;code class=&quot;language-text&quot;&gt;immer&lt;/code&gt;比较类似，又进一步简化了获得新&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;后的写法，直接使用快照中的值就行了。&lt;code class=&quot;language-text&quot;&gt;immer&lt;/code&gt;的话还要自己处理。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/pmndrs/valtio&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[script标签中的defer和async]]></title><description><![CDATA[一张图很好的说明了区别： 普通script标签 遇到script 标签会中断 HTML 的解析，然后开始下载脚本并执行，执行完成后继续 HTML 和解析 带defer属性的script标签  遇到带 defer 属性的 script…]]></description><link>https://blog.deathdealer.cn/script-defer-async/</link><guid isPermaLink="false">https://blog.deathdealer.cn/script-defer-async/</guid><pubDate>Mon, 22 Mar 2021 22:40:32 GMT</pubDate><content:encoded>&lt;h4&gt;一张图很好的说明了区别：&lt;/h4&gt;
&lt;img src=&quot;https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210322220415727.png&quot; alt=&quot;image-20210322220415727&quot; style=&quot;zoom:80%;&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;普通script标签&lt;/p&gt;
&lt;p&gt;遇到script 标签会中断 HTML 的解析，然后开始下载脚本并执行，执行完成后继续 HTML 和解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带defer属性的script标签 &lt;/p&gt;
&lt;p&gt;遇到带 defer 属性的 script 标签浏览器会另起一线程线下载脚本，不阻塞 HTML 的解析，HTML 解析完成后才开始执行脚本。（执行顺序于下载的顺序一致）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带async属性的script标签&lt;/p&gt;
&lt;p&gt;遇到带 async 属性的 script 标签浏览器会另起一线程线下载脚本，但是下载完成后会立即阻塞 HTML 解析并开始执行脚本，执行完成后继续解析 HTML（不保存执行顺序，谁先下完谁先执行）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Promise的静态方法]]></title><description><![CDATA[总结 方法 一句话总结 Promise.all 全部的全部才能resolve，只要有一个就直接了 Promise.allSettled 要等到所有promise都已敲定（settled），即每个promise都要或 Promise.any 只要promise…]]></description><link>https://blog.deathdealer.cn/basic/promise-static-methid/</link><guid isPermaLink="false">https://blog.deathdealer.cn/basic/promise-static-methid/</guid><pubDate>Sun, 21 Mar 2021 13:48:13 GMT</pubDate><content:encoded>&lt;h3&gt;总结&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;一句话总结&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Promise.all&lt;/td&gt;
&lt;td&gt;全部的&lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;全部&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;才能resolve，只要有一个&lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt;就直接&lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt;了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Promise.allSettled&lt;/td&gt;
&lt;td&gt;要等到所有promise都已敲定（settled），即每个promise都要&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;或&lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Promise.any&lt;/td&gt;
&lt;td&gt;只要promise中任何一个 &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; 变成&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;状态，整个就&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Promise.race&lt;/td&gt;
&lt;td&gt;任何promise中任何一个&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;就直接&lt;code class=&quot;language-text&quot;&gt;resolved&lt;/code&gt;，有一个&lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt;就直接&lt;code class=&quot;language-text&quot;&gt;rejected&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Promise.resolve&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;new Promise((resolve,reject)=&amp;gt;resolve())&lt;/code&gt;的简单写法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Promise.reject&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;new Promise((resolve,reject)=&amp;gt;reject())&lt;/code&gt;的简单写法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Promise.resolve和Promise.reject&lt;/h3&gt;
&lt;p&gt;这两个比较简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Promise.resolve()&lt;/code&gt;是&lt;code class=&quot;language-text&quot;&gt;new Promise((resolve,reject)=&amp;gt;resolve())&lt;/code&gt;的简单写法；&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Promise.reject()&lt;/code&gt;是&lt;code class=&quot;language-text&quot;&gt;new Promise((resolve,reject)=&amp;gt;reject())&lt;/code&gt;的简单写法；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Promise.all&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行机制：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果参数是一个空的可迭代对象，直接返回一个&lt;code class=&quot;language-text&quot;&gt;resolved&lt;/code&gt;的Promise&lt;/li&gt;
&lt;li&gt;如果参数全部都不是&lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;，异步地返回一个&lt;code class=&quot;language-text&quot;&gt;resolved&lt;/code&gt;的Promise&lt;/li&gt;
&lt;li&gt;其它情况下返回一个 &lt;strong&gt;pending&lt;/strong&gt; 的&lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;，之后当参数中所有的promise都&lt;strong&gt;resolve&lt;/strong&gt;之后，这个&lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;就转为&lt;code class=&quot;language-text&quot;&gt;resolved&lt;/code&gt;。但是只有其中有一个 &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; 失败则转为&lt;code class=&quot;language-text&quot;&gt;rejected&lt;/code&gt;。 &lt;/li&gt;
&lt;li&gt;返回值会按照参数内的 &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; 顺序排列，而不是由调用 &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; 的完成顺序决定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一句话概括：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全部的promise&lt;strong&gt;全部resolve&lt;/strong&gt;才能resolve，只要&lt;strong&gt;有一个reject&lt;/strong&gt;就整个reject了&lt;/p&gt;
&lt;h3&gt;Promise.allSettled&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;allSettled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行机制：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt;里所有的promise每一个都必须&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;或&lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt;才行&lt;/li&gt;
&lt;li&gt;每个结果对象都有一个 &lt;code class=&quot;language-text&quot;&gt;status&lt;/code&gt; 字符串。如果它的值为 &lt;code class=&quot;language-text&quot;&gt;fulfilled&lt;/code&gt;，则结果对象上存在一个 &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt; 。如果值为 &lt;code class=&quot;language-text&quot;&gt;rejected&lt;/code&gt;，则存在一个 &lt;code class=&quot;language-text&quot;&gt;reason&lt;/code&gt; 。value（或 reason ）反映了每个 promise 的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一句话概括：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个promise都要&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;或&lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Promise.race&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行机制：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果参数是一个空的可迭代对象，将永远等待&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果参数里面有不是&lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;的，或者有已经&lt;code class=&quot;language-text&quot;&gt;resolve/reject&lt;/code&gt;的&lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;，就会直接返回第一个找到。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promsie&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; promise1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;promise2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;promise3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// promise.resolve(obj)&lt;/span&gt;
Promsie&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;promise1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;promise2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;promise3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// promise.reject(err)&lt;/span&gt;
Promsie&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;promise1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;promise2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;promise3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 正常流程&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一句话概括：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;任何promise中任何一个&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;就直接&lt;code class=&quot;language-text&quot;&gt;resolved&lt;/code&gt;，有一个&lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt;就直接&lt;code class=&quot;language-text&quot;&gt;rejected&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Promise.any&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行机制：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和&lt;code class=&quot;language-text&quot;&gt;Promise.all&lt;/code&gt;正好相反&lt;/li&gt;
&lt;li&gt;如果参数是一个空的可迭代对象，则返回一个&lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt;状态的 Promise&lt;/li&gt;
&lt;li&gt;如果参数不包含任何 &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;，则返回一个&lt;code class=&quot;language-text&quot;&gt;resvoled&lt;/code&gt;状态的Promise&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一句话概括：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要promise中任何一个 &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; 变成&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;状态，整个就&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;了。如果全部都不能&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;则返回&lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[使用===和==的建议]]></title><description><![CDATA[TLDR https://www.zhihu.com/question/20348948/answer/1486703…]]></description><link>https://blog.deathdealer.cn/basic/compare-variables/</link><guid isPermaLink="false">https://blog.deathdealer.cn/basic/compare-variables/</guid><pubDate>Mon, 21 Sep 2020 13:48:13 GMT</pubDate><content:encoded>&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/20348948/answer/14867031&quot;&gt;https://www.zhihu.com/question/20348948/answer/14867031&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;绝大多数场合应该使用 &lt;code class=&quot;language-text&quot;&gt;===&lt;/code&gt; ，只有检测 &lt;code class=&quot;language-text&quot;&gt;null/undefined&lt;/code&gt; 的时候可以使用 &lt;code class=&quot;language-text&quot;&gt;x == null&lt;/code&gt;，因为通常我们不区分 &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;和 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; ，即将 &lt;code class=&quot;language-text&quot;&gt;x == null&lt;/code&gt; 作为&lt;code class=&quot;language-text&quot;&gt;x === null || x === undefined&lt;/code&gt;的缩写。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;==&lt;/code&gt;的比较看似会比较方便，比如 &lt;code class=&quot;language-text&quot;&gt;1 == &amp;#39;1&amp;#39;&lt;/code&gt;，但是会埋下隐患，比如可能对类型做出错误的假设。&lt;/p&gt;
&lt;p&gt;例子：&lt;code class=&quot;language-text&quot;&gt;if (x == 10) x += 5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果传入的x是字符串’10’，x的结果会变成’105’。在后续运算中字符串’105’又可能被转型，从而引入隐蔽的错误。&lt;/p&gt;</content:encoded></item></channel></rss>