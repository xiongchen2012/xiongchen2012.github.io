<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>30s面试 on Deathdealer-Archives</title>
    <link>https://xiongchen2012.github.io/tags/30s%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 30s面试 on Deathdealer-Archives</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This site is generated by &lt;a href=&#39;http://gohugo.io&#39; style=&#39;color:rgb(95, 191, 94);&#39;&gt;HUGO&lt;/a&gt; with a theme &lt;a href=&#39;https://github.com/laozhu/hugo-nuo&#39; style=&#39;color:rgb(95, 191, 94);&#39;&gt;HUGO-NUO&lt;/a&gt; © deathdealer.cn</copyright>
    <lastBuildDate>Sat, 09 Jun 2018 21:15:31 +0800</lastBuildDate>
    
	<atom:link href="https://xiongchen2012.github.io/tags/30s%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>script标签的defer/async属性</title>
      <link>https://xiongchen2012.github.io/post/script-defer-async/</link>
      <pubDate>Sat, 09 Jun 2018 21:15:31 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/script-defer-async/</guid>
      <description> HTML SCRIPT标签  What are defer and async attributes on a &amp;lt;script&amp;gt; tag?
 面试前端工程师的时候如果问&amp;lt;script&amp;gt;的作用是什么，100%的人都能回答出来，并且90%以上的人会告诉你&amp;lt;script&amp;gt;标签加载JS最好放在body之后，以防止浏览器白屏。
但是如果进一步询问script标签的defer和async属性时，一般都会得到一个黑人问号脸。
直接上图，下面这张图很好的解释了defer和async工作机制：
script HTML文档自上而下解析，遇到&amp;lt;script src=&#39;some.js&#39;&amp;gt;标签会暂停解析，同时开始下载script src指定的脚本，下载完成后开始执行脚本，执行完成后才会继续之前暂停的HTML解析工作。（上图第1行）
这也是以前前端工程师默认将script标签放在body元素之后的原因：首先是不阻塞HTML DOM的构建和渲染防止白屏，此外如果JS中有依赖DOM中某个ELEMENT也可以正确的找到它。
script defer HTML文档自上而下解析，遇到&amp;lt;script defer src=&#39;some.js&#39;&amp;gt;标签时,HTML的解析会继续执行，同时会另起一个线程开始下载src指定的脚本，下载完成后不会立刻就执行该脚本，而是会等待HTML DOM解析完成后才会开始执行该脚本。
同时defer加载的脚本是有顺序的，比如在HTML解析完之前，先后加载了1，2，3这三个脚本，后面执行时也会是按照1，2，3的顺序来执行。
defer加载的脚本在DOMContentLoaded之前执行
script async HTML文档自上而下解析，遇到&amp;lt;script async src=&#39;some.js&#39;&amp;gt;标签时，HTML解析会继续续执行，同时会另起一个线程开始下载src指定的脚本，下载完成后就会阻塞HTML的解析并立刻开始执行该脚本（这里是和defer的不同之处），等到脚本执行完成后，才会继续恢复HTML的执行。
与defer的第二个不同之处是async加载的脚本是顺序无关的。
async加载的脚本 不能保证 一定在DOMContentLoaded之前执行
总结  defer和async都是为了异步加载外联的JS（潜台词：内联的不带src属性的script标签不要使用） 如果多个js有先后依赖顺序，使用defer； 如果没有则使用async 如果JS依赖于DOM加载完成，则使用defer；  </description>
    </item>
    
    <item>
      <title>Rel No Opener</title>
      <link>https://xiongchen2012.github.io/post/rel-no-opener/</link>
      <pubDate>Sat, 02 Jun 2018 11:35:40 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/rel-no-opener/</guid>
      <description>最近在看30秒面试题，里面有一个题目是：
Where and why is the rel=&amp;ldquo;noopener&amp;rdquo; attribute used?
里面提到了rel属性的noopener的这个值的作用。写过HTML的人都知道&amp;lt;a&amp;gt;标签如果指定了target=&amp;quot;_blank&amp;quot;属性，那么链接会在新的窗口（或TAB页）中打开。
我们假设原来的网页是A，通过A页面的链接新打开的网页是B。默认情况下在B网页中可以通过window.opener来获取A网页的window对象的引用，也就意味着B可以通过window.opener对A网页进行一定的操作。如果B网页是一个恶意网站，在拿到A网页的window对象后，完全可以用window.location将A网页跳转到另外一个挂马的网页或者钓鱼网站。这样用户就很不安全了。
所以才会有noopener这个设置，当一个a标签的rel属性值设置成noopener时,点击链接跳转的网页就无法拿到原网页的window对象了。也就是刚才说的B网页拿不到A网页的window对象（此时window.opener=null）。
&amp;lt;a href=&amp;quot;B&amp;quot; rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;跳转到B&amp;lt;/a&amp;gt;
具体的示例可以看：
https://mathiasbynens.github.io/rel-noopener/</description>
    </item>
    
  </channel>
</rss>