<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Babel on Deathdealer-Archives</title>
    <link>https://xiongchen2012.github.io/tags/babel/</link>
    <description>Recent content in Babel on Deathdealer-Archives</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This site is generated by &lt;a href=&#39;http://gohugo.io&#39; style=&#39;color:rgb(95, 191, 94);&#39;&gt;HUGO&lt;/a&gt; with a theme &lt;a href=&#39;https://github.com/laozhu/hugo-nuo&#39; style=&#39;color:rgb(95, 191, 94);&#39;&gt;HUGO-NUO&lt;/a&gt; © deathdealer.cn</copyright>
    <lastBuildDate>Fri, 17 Aug 2018 20:53:39 +0800</lastBuildDate>
    
	<atom:link href="https://xiongchen2012.github.io/tags/babel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Babel入门（1） - 基础知识</title>
      <link>https://xiongchen2012.github.io/post/babel-concept/</link>
      <pubDate>Fri, 17 Aug 2018 20:53:39 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/babel-concept/</guid>
      <description>Babel入门（1） - 基础知识 Babel是什么 由于现代浏览器对于ECMAScript2015+支持非常有限，用ES6语法写的Javascript代码没办法直接在浏览器中运行。于是Babel（发音/&amp;lsquo;beibəl/）应运而生了。
Babel通过自己的工具链（ToolChain），将使用ES6语法写的Javascript代码转换成完全同等功能的ES5代码，以便在浏览器中执行。有了Babel用户可以直接山书写ES6的代码，而不用担心浏览器无法执行，大大提高了用户的开发效率，降低了由于ES5语言特性带来潜在问题的几率。
官网的解释更简洁：
Babel is a JavaScript compiler
它的目的是：
Use next generation JavaScript, today.
配置Babel 有两种方式可以在项目中配置和使用Babel：.bablerc和package.json
.babelrc 在项目根目录配置一个名为.babelrc的文件，这个文件按照JSON格式进行书写。主要可以分为两段：
{ presets:[], plugins:[] }  其中presets用于指定babel编译js代码时使用的规则，plugins指定babel使用的一些插件
package.json 也可以在项目的package.json中配置babel，内容和上述方式一样：
... &amp;quot;babel&amp;quot;:{ presets: [], plugins: [] } ...  env选项 如果想为不同的env配置不同的选项，可以增加env配置项
{ &amp;quot;presets&amp;quot;: [], //全局的预设 &amp;quot;plugins&amp;quot;: [], //全局的插件 &amp;quot;env&amp;quot;: { &amp;quot;production&amp;quot;: { &amp;quot;presets&amp;quot;: [], //production环境下的预设 &amp;quot;plugins&amp;quot;: [] //production环境下的插件 } } }  env的取值：process.env.BABEL_ENV &amp;gt; process.env.NODE_ENV &amp;gt; &amp;ldquo;development&amp;rdquo;
配置文件的查找顺序如下：
需编译的js文件的当前目录中查找.babelrc &amp;gt; 向上查找babelrc文件直到项目的根目录 &amp;gt; 如果没有babelrc则查找package.</description>
    </item>
    
  </channel>
</rss>