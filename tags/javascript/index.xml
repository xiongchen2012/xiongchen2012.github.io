<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Deathdealer-Archives</title>
    <link>https://xiongchen2012.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on Deathdealer-Archives</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This site is generated by &lt;a href=&#39;http://gohugo.io&#39; style=&#39;color:rgb(95, 191, 94);&#39;&gt;HUGO&lt;/a&gt; with a theme &lt;a href=&#39;https://github.com/laozhu/hugo-nuo&#39; style=&#39;color:rgb(95, 191, 94);&#39;&gt;HUGO-NUO&lt;/a&gt; © deathdealer.cn</copyright>
    <lastBuildDate>Sun, 10 Jun 2018 14:22:57 +0800</lastBuildDate>
    
	<atom:link href="https://xiongchen2012.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LHS和RHS</title>
      <link>https://xiongchen2012.github.io/post/ydkj-lhs-rhs/</link>
      <pubDate>Sun, 10 Jun 2018 14:22:57 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/ydkj-lhs-rhs/</guid>
      <description> LHS &amp;amp; RHS Concept https://en.wikipedia.org/wiki/Sides_of_an_equation
 In mathematics, LHS is informal shorthand for the left-hand side of an equation. Similarly, RHS is the right-hand side. The two sides have the same value, expressed differently, since equality is symmetric.
 数学上LHS和RHS是指在位于等号左边和右边，完全相同的两个东西不同的表达方式。到了javascript中因为等号是具有语法意义的，所以意义有所不同。
javascript运行过程中会在作用域中查找变量，查找变量有两种不同目的：
 目的是为了获取变量的值，则会进行RHS查询； 目的是为了给变量赋值，则会进行LHS查询；  可以简单的理解为：等号左边是LHS（赋值），等号右边的是RHS（读取值）
LHS &amp;amp; RHS查询过程 LHS和RHS查询是在当前作用域中进行的，如果当前作用域中没有找到所需的变量，则会向上级作用域继续查询，最后到达全局作用域。到了全局作用域，无论找没找到都会停止查找。
 如果RHS查询在整个作用域都没有找到变量，则会抛出ReferenceError错误。 如果LHS查询在整个作用域都没有找到变量，在严格模式下(use strict)和RHS一样会抛出ReferenceError错误；在非严格模式下则会在全局作用域中创建一个变量（换句话说就是全局变量）  </description>
    </item>
    
    <item>
      <title>script标签的defer/async属性</title>
      <link>https://xiongchen2012.github.io/post/script-defer-async/</link>
      <pubDate>Sat, 09 Jun 2018 21:15:31 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/script-defer-async/</guid>
      <description> HTML SCRIPT标签  What are defer and async attributes on a &amp;lt;script&amp;gt; tag?
 面试前端工程师的时候如果问&amp;lt;script&amp;gt;的作用是什么，100%的人都能回答出来，并且90%以上的人会告诉你&amp;lt;script&amp;gt;标签加载JS最好放在body之后，以防止浏览器白屏。
但是如果进一步询问script标签的defer和async属性时，一般都会得到一个黑人问号脸。
直接上图，下面这张图很好的解释了defer和async工作机制：
script HTML文档自上而下解析，遇到&amp;lt;script src=&#39;some.js&#39;&amp;gt;标签会暂停解析，同时开始下载script src指定的脚本，下载完成后开始执行脚本，执行完成后才会继续之前暂停的HTML解析工作。（上图第1行）
这也是以前前端工程师默认将script标签放在body元素之后的原因：首先是不阻塞HTML DOM的构建和渲染防止白屏，此外如果JS中有依赖DOM中某个ELEMENT也可以正确的找到它。
script defer HTML文档自上而下解析，遇到&amp;lt;script defer src=&#39;some.js&#39;&amp;gt;标签时,HTML的解析会继续执行，同时会另起一个线程开始下载src指定的脚本，下载完成后不会立刻就执行该脚本，而是会等待HTML DOM解析完成后才会开始执行该脚本。
同时defer加载的脚本是有顺序的，比如在HTML解析完之前，先后加载了1，2，3这三个脚本，后面执行时也会是按照1，2，3的顺序来执行。
defer加载的脚本在DOMContentLoaded之前执行
script async HTML文档自上而下解析，遇到&amp;lt;script async src=&#39;some.js&#39;&amp;gt;标签时，HTML解析会继续续执行，同时会另起一个线程开始下载src指定的脚本，下载完成后就会阻塞HTML的解析并立刻开始执行该脚本（这里是和defer的不同之处），等到脚本执行完成后，才会继续恢复HTML的执行。
与defer的第二个不同之处是async加载的脚本是顺序无关的。
async加载的脚本 不能保证 一定在DOMContentLoaded之前执行
总结  defer和async都是为了异步加载外联的JS（潜台词：内联的不带src属性的script标签不要使用） 如果多个js有先后依赖顺序，使用defer； 如果没有则使用async 如果JS依赖于DOM加载完成，则使用defer；  </description>
    </item>
    
    <item>
      <title>ES6对象的加强</title>
      <link>https://xiongchen2012.github.io/post/es6-object-enhancement/</link>
      <pubDate>Sat, 10 Mar 2018 23:03:40 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/es6-object-enhancement/</guid>
      <description>ES6中对象的加强 Concise Field/Method Expression（属性/方法的简洁表示） 以前属性需要中规中矩的写出属性名和属性的值，比如：
var user = { name: &amp;quot;deathdealer&amp;quot;， sendEmail: function(){ // some code here } }  ES6以后属性可以直接指定为变量，换言之就是某变量成为对象的属性。例如:
let name = &amp;quot;deathdealer&amp;quot;; let age = 15; let user = { name, age, sendEmail(){ // some code here } } /* 结果等价于： { name: &#39;deathdealer&#39;, age: 15, } */  TIP：属性名是变量名，属性值是变量的值
简洁属性/方法表示的常见使用场景有：
1. 函数返回值
函数中的n个变量，可以分别进行计算求值（比如复杂的计算，网络请求等），最后再组织成一个对象返回给调用者。比如：
function someMethod(){ let xxx,yyy,zzz; xxx = evaluation(); yyy = http(); zzz = io(); return {xxx,yyy,zzz} } // 等同于 return { xxx: xxx, yyy: yyy, zzz: zzz }  2.</description>
    </item>
    
    <item>
      <title>Package Dependencies类型简介</title>
      <link>https://xiongchen2012.github.io/post/package-dependencies/</link>
      <pubDate>Mon, 05 Mar 2018 23:20:57 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/package-dependencies/</guid>
      <description>一共有几种dependency? 答案是5种：dependency、devDependency、peerDependency、bundleDependency、optionalDependency
dependency和devDependency 顾名思义：
dependency是项目的直接必须依赖，少一个项目就无法正常运行；
devDependency是项目在开发时必不可少的依赖，比如Babel，打包，测试等等。
dep和deDep的区别就在于npm/yarn install的时候：
 dependency：必定会被安装 devDependecncy：如果没有指定&amp;ndash;production选项，也会被安装。一旦指定了production选项（生产环境）那么开发的依赖可以不需要安装。 dependency的包内部的devDependency依赖是不会被安装的。  peerDependency 同伴依赖!基友依赖？用的比较多的场景是插件开发。比如echarts-for-react包是为echarts开发的React版本，所以在echarts-for-react的工程中声明了对echarts的同伴依赖（peerDependency）。这样的话意味着：如果你想安装并使用echarts-for-react最新的包，请确保一定要先装echarts的最新版本包（这叫解决echarts-for-react的同伴依赖问题），如果你不先安装echarts，或者安装的版本不是最新，echarts-fro-react可能就无法正常工作了。
在npm1.x和2.x的时候，npm默认情况下会直接把peerDependcy给装上去，3.x以后默认不安装peerDependency，而是给出一个WARN，提示用户自行去安装这些同伴依赖。比如：
 npm WARN peerDependencies The peer dependency mocha@&amp;gt;=1.x.x included from grunt-mocha-istanbul will no longer be automatically installed to fulfill the peerDependency in npm 3+. Your application will need to depend on it explicitly.
 bundleDependency bundleDependency不添加新的依赖，而是将bundleDependency的包目录都移到宿主目录下，否则都是直接扔到node_modules下面。
package.json { &amp;#34;name&amp;#34;: &amp;#34;package-a&amp;#34;, &amp;#34;dependencies&amp;#34;: { &amp;#34;react&amp;#34;: &amp;#34;^15.0.0&amp;#34;, &amp;#34;core-js&amp;#34;: &amp;#34;^2.0.0&amp;#34;, &amp;#34;lodash&amp;#34;: &amp;#34;^4.0.0&amp;#34; }, &amp;#34;bundleDependencies&amp;#34;: [ &amp;#34;react&amp;#34;, &amp;#34;core-js&amp;#34; ] }</description>
    </item>
    
    <item>
      <title>Redux Core Concepts</title>
      <link>https://xiongchen2012.github.io/post/redux-core-concepts/</link>
      <pubDate>Mon, 19 Feb 2018 20:49:37 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/redux-core-concepts/</guid>
      <description>Action 先说是什么 首先action是一个普通的不能再普通的Javascript对象。理解这一点非常重要，这是整个Redux的基石。
其次，所有的action对象都必须包含type字段（这是Redux强制规定的）
一个Action对象看起是这样的： var addTodoAction = { type: &amp;#39;ADD_TODO&amp;#39;, //action必须包含这个字段  //其它的字段随便怎么定义，能用于展现view就行  payload: { text: &amp;#39;todo item 1&amp;#39;, index: 0 }, somekey: &amp;#39;somevalue&amp;#39; } 
再说定义 直接引用官网：
Actions are payloads of information that send data from your application to your store. They are the only source of information for the store.  Action是应用程序把数据传递到Store的有效负载，是Store中数据的唯一来源。
换个角度理解：
应用程序将action作为数据的载体，通过action把数据传递到Store中。而且它是唯一的给Store提供数据的途径。
个人理解 action是一个普通的js对象，对象的type属性标记action的用途（方便后面的reducer根据type对state进行不同的更新），其余的字段都可以认为是state中要用的数据。
Reducer 先说是什么 Action只描述了State有更新这件事，同时给出State需要更新的部分。但是具体怎么更新State是没有的。比如直接将State某属性旧的值更新成新的值，或者进行将某属性进行一定的运算后将结果更新到State中。
而Reducer就是具体的做基于Action更新State这件事情的函数。我个人理解Reducer也可以称为：Action处理器或者叫State更新器
再说定义 Reducer是一个纯函数,所谓纯函数就是满足以下条件的函数：
 纯函数在相同的输入值时，产生相同的输出。函数的输出和输入值以外的其他隐藏信息或状态无关，也和由I/O设备产生的外部输出无关。只要输入相同，输出就相同。
 纯函数不能有语义上可观察的函数副作用，诸如『触发事件』、『调用非纯函数』、『请求网络接口』的内容等</description>
    </item>
    
  </channel>
</rss>