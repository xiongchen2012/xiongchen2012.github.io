<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deathdealer-Archives</title>
    <link>https://xiongchen2012.github.io/</link>
    <description>Recent content on Deathdealer-Archives</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This site is generated by &lt;a href=&#39;http://gohugo.io&#39; style=&#39;color:rgb(95, 191, 94);&#39;&gt;HUGO&lt;/a&gt; with a theme &lt;a href=&#39;https://github.com/laozhu/hugo-nuo&#39; style=&#39;color:rgb(95, 191, 94);&#39;&gt;HUGO-NUO&lt;/a&gt; © deathdealer.cn</copyright>
    <lastBuildDate>Thu, 01 Feb 2018 23:42:21 +0800</lastBuildDate>
    
	<atom:link href="https://xiongchen2012.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入分布式缓存读书笔记（1）</title>
      <link>https://xiongchen2012.github.io/post/introduce-to-cache/</link>
      <pubDate>Thu, 01 Feb 2018 23:42:21 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/introduce-to-cache/</guid>
      <description>什么是缓存 书中引用的维基百科对缓存的定义是: 存储在计算机上的一个原始数据复制集，以便于访问
我看到维基百科上缓存的定义是： 凡是位于速度相差较大的两种硬件之间，用于协调两者数据传输速度差异的结构，均可称之为Cache。  维基百科
虽然文字上相差较大，但两者综合起来看，缓存可以理解为：
缓存是原始数据的Copy，目的是为了协调和解决两个系统之间速度差异。让快的系统尽可能不用等待慢的系统处理数据。  PS：呆湾人对缓存的叫法是：快取，个人感觉这个叫法更贴近缓存的本意。
为什么用缓存  Cache的核心作用是加快系统存取速度，提高系统性能  我认为任何系统不管你有多么复杂，设计的多么精妙，都遵循木桶效应 。对外表现出的性能只取决于最差的一部分。一个复杂的系统中，有的部分处理速度特别快（如内存读写），有的部分处理特别慢（如网络传输），在两者之间设置一个中间层来消弥这种差异，也可以看做在木桶最短的那快板上做了修补。
 方便进行系统调优  在系统的各个层次引入缓存，可以有效的优化整体系统性能。
 缓存为王，对开发人员来说是性能为王，对用户来说是用户体验为王
 缓存的特点  Source of Truth  缓存是原始数据的一份Copy，所以它有Source of Truth，即使缓存里的数据丢了，还可以从原始数据中重建缓存。
 缓存能进行CRUD操作   缓存不是一成不变，缓存中的数据应该可以随时被更新，被删除等。缓存和原始数据之间必定存在固定的算法，可以有效管理缓存和原始数据之间的对应关系。
 缓存也可能是持久化的  缓存不一定都是存在内存中的（断电就没有了），比如也可以存在SSD等高速存储设备中。
缓存的分类 按照缓存在系统所处的位置不同可以分为：
- 客户端缓存
缓存的内容位于客户端，当缓存中有需要的内容时，不再向服务器去请求。典型的有Web缓存，HybridApp内缓存等
 网络缓存
网络缓存位于客户端和服务端之间，代理客户端和服务端之间的Request和Response。如果缓存中有内容，代理将不再重新向服务端请求内容，直接将缓存内容返回客户端。典型有的Web代理服务器，CDN等
 服务端缓存
缓存内容位于服务端，典型的有Database缓存、平台级的缓存有Ehcache，应用级的有Redis、Memcached等
  按照缓存的规模和部署方式可以分为： - 单机缓存 - 集群缓存
 分布式缓存  关于缓存的一些术语  Cache Hit | Cache Miss  系统接收到客户发起的请求，如果请求的数据恰好在缓存中，称为Cache Hit，反之称为Cache Miss(Miss后如果缓存还有空间的话，会将数据更新到缓存中)</description>
    </item>
    
    <item>
      <title>Tomcat with native Apache Portable Runtime</title>
      <link>https://xiongchen2012.github.io/post/native-tomcat/</link>
      <pubDate>Sun, 28 Jan 2018 17:04:13 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/native-tomcat/</guid>
      <description>Tomcat能使用Apache Portable Runtime提高性能，并能更好地与原生服务器技术相集成。APR是 Apache HTTP Server 2.x的核心。
 上传必须的库到服务器 scp /path/to/libssl1.0.0_1.0.2g-1ubuntu1_amd64.deb user@host:/home/user scp /path/to/openssl_1.0.2g-1ubuntu1_amd64.deb user@host:/home/user scp /path/to/libssl-dev_1.0.2g-1ubuntu1_amd64.deb user@host:/home/user
 安装TOMCAT并配置APR连接器 // 编译并安装APR scp /path/to/apr-1.5.2.tar.gz user@host:/home/user tar zxvf apr-1.5.2.tar.gz ./configure make make install // 安装APR-Util： scp /path/to/apr-util-1.5.4.tar.gz user@host:/home/user tar zxvf apr-util-1.5.4.tar.gz ./configure --with-apr=/usr/local/apr make make install // 安装TOMCAT APR： cp /opt/apache-tomcat-8.0.32/bin/tomcat-native.tar.gz /usr/local/src tar zxvf tomcat-native.tar.gz ./configure --with-apr=/usr/local/apr --with-java-home=/opt/jdk1.8 --with-ssl=/usr/bin make make install
 配置环境变量 vi /etc/profile export JAVA_HOME=/opt/jdk1.8 export JRE_HOME=/opt/jdk1.8/jre export PATH=$PATH:/opt/jdk1.</description>
    </item>
    
  </channel>
</rss>