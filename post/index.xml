<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Deathdealer-Archives</title>
    <link>https://xiongchen2012.github.io/post/</link>
    <description>Recent content in Posts on Deathdealer-Archives</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This site is generated by &lt;a href=&#39;http://gohugo.io&#39; style=&#39;color:rgb(95, 191, 94);&#39;&gt;HUGO&lt;/a&gt; with a theme &lt;a href=&#39;https://github.com/laozhu/hugo-nuo&#39; style=&#39;color:rgb(95, 191, 94);&#39;&gt;HUGO-NUO&lt;/a&gt; © deathdealer.cn</copyright>
    <lastBuildDate>Mon, 19 Feb 2018 20:49:37 +0800</lastBuildDate>
    
	<atom:link href="https://xiongchen2012.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redux Core Concepts</title>
      <link>https://xiongchen2012.github.io/post/redux-core-concepts/</link>
      <pubDate>Mon, 19 Feb 2018 20:49:37 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/redux-core-concepts/</guid>
      <description>Action 先说是什么 首先action是一个普通的不能再普通的Javascript对象。理解这一点非常重要，这是整个Redux的基石。
其次，所有的action对象都必须包含type字段（这是Redux强制规定的）
一个Action对象看起是这样的： var addTodoAction = { type: &amp;#39;ADD_TODO&amp;#39;, //action必须包含这个字段  //其它的字段随便怎么定义，能用于展现view就行  payload: { text: &amp;#39;todo item 1&amp;#39;, index: 0 }, somekey: &amp;#39;somevalue&amp;#39; }
再说定义 直接引用官网：
Actions are payloads of information that send data from your application to your store. They are the only source of information for the store.  Action是应用程序把数据传递到Store的有效负载，是Store中数据的唯一来源。
换个角度理解：
应用程序将action作为数据的载体，通过action把数据传递到Store中。而且它是唯一的给Store提供数据的途径。
个人理解 action是一个普通的js对象，对象的type属性标记action的用途（方便后面的reducer根据type对state进行不同的更新），其余的字段都可以认为是state中要用的数据。
Reducer 先说是什么 Action只描述了State有更新这件事，同时给出State需要更新的部分。但是具体怎么更新State是没有的。比如直接将State某属性旧的值更新成新的值，或者进行将某属性进行一定的运算后将结果更新到State中。
而Reducer就是具体的做基于Action更新State这件事情的函数。我个人理解Reducer也可以称为：Action处理器或者叫State更新器
再说定义 Reducer是一个纯函数,所谓纯函数就是满足以下条件的函数：
 纯函数在相同的输入值时，产生相同的输出。函数的输出和输入值以外的其他隐藏信息或状态无关，也和由I/O设备产生的外部输出无关。只要输入相同，输出就相同。
 纯函数不能有语义上可观察的函数副作用，诸如『触发事件』、『调用非纯函数』、『请求网络接口』的内容等</description>
    </item>
    
    <item>
      <title>深入分布式缓存读书笔记（4） - Proxy Cache</title>
      <link>https://xiongchen2012.github.io/post/proxy-cache/</link>
      <pubDate>Mon, 05 Feb 2018 23:09:15 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/proxy-cache/</guid>
      <description>《深入分布式缓存》读书笔记
（1）缓存简介
（2）页面缓存（Application Cache）
（3）HTTP缓存  （4）代理服务器缓存
代理服务器缓存 前面两篇博客写的是客户端缓存（即缓存的数据存储在客户端本地），而代理服务器缓存则是缓存在代理服务器上。代理服务器分为正向代理和反向代理。
代理服务器缓存的作用 客户端因为种种原因不能直接访问源服务器时（比如客户端或源服务器处于防火墙隔绝的内网，或者源服务器访问量很大需要做负载均衡等），这时候需要通过代理服务器转发请求。
其当客户端第1次访问源服务器需某资源时，代理服务器会将源服务器的资源保存到本地，然后发送给客户端。
当有其它客户端访问相同的资源时，如果该资源没有更新，代理服务器会将缓存的内容直接发送给客户端。从而达到加快响应的目标。
因为代理服务器缓存理解起来比较简单，而且各种代理服务器缓存的方式也不一样，这里不详细写了（其实是我不会） 下面开始跑题：
正向代理 正向代理位于客户端和目标服务器之间。客户端无法直接访问目标服务器，但是为了获取目标服务器上的某资源，客户端需要向一台能够直接访问目标服务器的代理服务器发送请求，请求中还需要指定目标服务器地址。代理服务器获取到目标服务器上的资源后，将资源转发给客户端。
正向代理情况下，客户端需要明确指定代理服务器的IP及端口，才能使用。
正向代理有如下几种典型的应用场景：
 客户端无法直接访问目标服务器 （比如说tumblr,youtube,twitter,google），这时候通过正向代理服务器转发请求，然后正向代理将不可描述的内容转发给客户端。
 客户端访问授权：比如很多公司内部的电脑，不能直接连接Internet，必须在设置一个统一的Proxy来访问Internet。这样可以实现准确的授权控制。例如可以禁止上班时间浏览淘宝，可以禁止使用聊天工具， 还可以监控每个员工访问了什么网站哦 。
  比较著名的正向代理服务器有：Squid、Shadowsocks
反向代理 反向代理和正向代理正好相反（废话），对客户端来说代理服务器就和目标服务器是相同的。换句话来说，客户端是不知道目标服务器存在的。他直接向反向代理服务器请求资源，至于反向代理服务器再向哪台目标服务器请求，就管不着了。
和正向代理最大的区别就是：使用反向代理时，客户端完全不需要进行任何设置。反向代理服务器对客户端来说和普通服务器没有什么区别。
反向代理有如下几种典型的应用场景：
 负载均衡：客户端往反向代理服务器发请求，反向代理服务器根据目标服务器不同的负载，将请求转发到负载较低的目标服务器。
 保护和隐藏目标服务器
  比较著名的反向代理服务器有：Nginx</description>
    </item>
    
    <item>
      <title>深入分布式缓存读书笔记（3） - HTTP Cache</title>
      <link>https://xiongchen2012.github.io/post/http-cache/</link>
      <pubDate>Sun, 04 Feb 2018 10:17:48 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/http-cache/</guid>
      <description>《深入分布式缓存》读书笔记
（1）缓存简介
（2）页面缓存（Application Cache）
（3）HTTP缓存  （4）代理服务器缓存
浏览器缓存（HTTP缓存） 和ApplicationCache相似，HTTP缓存的目标也是为了让浏览器使用本地缓存，而不去向服务器请求。
浏览器通过和服务器事先的约定来决定是否使用保存在浏览器本地的缓存，这个约定就是HTTP协议。协议里规定Client和Server协商使用缓存通过协议头（Header）来进行的，也就是传说中的 夹带私货
有多种Http Cache Headers，下面一一介绍：
Expires 服务器在返回给浏览器的响应头（Response Header）中夹带返回访资源过期的时间，比如： Expires: Sat, 2 Feb 2018 23:59:59 GMT
翻译成人话：当前这一资源将于2018年2月3日 23时59分59秒过期。在这之前浏览器您可以放心使用本地缓存，过了这个时间您就需要再向服务器请求了。
适用于：HTTP1.0、HTTP1.1
缺点：缺点很明显，服务器时间不一定和客户端时间一致啊！！
Cache-Control 为了解决Expires的问题，引进了Cache-Control，服务器返回一个相对的秒数，表示从这个资源下载完成的时间算起，N秒内都可以放心将其放到缓存中使用。N秒后浏览器才需要重新下载。 Cache-Control: max-age=3600
翻译成人话：当前页面有效期为3600秒，这段时间内你可以直接使用这个页面无需重新下载。过了3600秒后，你就需要重新向服务器请求了。
适用于：HTTP1.1
Last-Modified / If-Modified-Since 浏览器在第1次请求资源时，如果服务器返回200，响应头里面一般会有一个Last-Modified字段，字段的值服务器最后一次修改此资源的时间。 Last-Modified: Sat, 2 Feb 2018 18:39:13 GMT
当浏览器再次请求该资源时，会在请求头里夹带一个If-Modified-Since的私货，内容就是第1次服务器返回的那个最后修改时间。这个过程是浏览器向服务器询问当前请求的资源自从最后一次修改以后是否又进行过修改？ If-Modified-Since: Sat, 2 Feb 2018 18:39:13 GMT
服务器收到请后，发现这段时间内没有再修改该资源，就返回状态码304（Not Modified），请示我没有修改过该资源，浏览器你可以使用你的本地缓存。
ETag / If-None-Match (TO BE CONTINUED)</description>
    </item>
    
    <item>
      <title>深入分布式缓存读书笔记（2） - Application Cache</title>
      <link>https://xiongchen2012.github.io/post/application-cache/</link>
      <pubDate>Sun, 04 Feb 2018 10:03:06 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/application-cache/</guid>
      <description>《深入分布式缓存》读书笔记
（1）缓存简介
（2）页面缓存（Application Cache）
（3）HTTP缓存
（4）代理服务器缓存
HTML5 Application Cache HTML5开始引入了Application Cache技术，可以在客户端缓存服务器上的HTML页面。基于AppCache可以实现网站的离线访问。
Application Cache的引入，带来几个好处：
 离线访问 由于缓存了页面，访问速度快 减少服务端负载  Deathdealer注： &amp;gt; Application Cache现在已经是一个已经从Web标准中删除了的过期规范，
&amp;gt; 虽然主流浏览器都还支持，但是不排除哪天会停止支持，所以尽量不要再使用。
&amp;gt; 强列建议使用 Service Worker 来替代AppCache
服务端设置 Application Cache是通过浏览器下载服务器上的manifest清单文件，由mainfest清单文件指定需要缓存的文件列表。按照H5规范，这个文件的MIME头必须是：text/cache-manifest，所以服务器端需要设置这个类型的响应头。以最常使用的三种服务器为例：
 Nginx
  修改Nginx配置目录下的mime.types文件，添加manifest的MIME： # /path/to/nginx/conf/mime.types  text/cache-manifest manifest;
 Apache  修改Apache目录中的配置文件.htaccess文件，添加manifest的MIME: # /path/to/apache2/conf/.htaccess  AddType text/cache-manifest .apache
 Tomcat  修改Tomcat目录中的配置文件web.xml文件，添加manifest的MIME: &amp;lt;!-- /path/to/tomcat/conf/web.xml --&amp;gt; &amp;lt;mime-mapping&amp;gt; &amp;lt;extention&amp;gt;list&amp;lt;/extention&amp;gt; &amp;lt;mime-type&amp;gt;text/cache-manifest&amp;lt;mime-type&amp;gt; &amp;lt;/mime-mapping&amp;gt;
缓存清单文件 在HTML页面的&amp;lt;html&amp;gt;增加manifest属性。
&amp;lt;html manifest=&amp;#39;example.appcache&amp;#39;&amp;gt; ... &amp;lt;/html&amp;gt; 每个指定了 manifest 的页面在用户对其访问时都会被缓存。如果未指定 manifest 属性，则页面不会被缓存（除非在 manifest 文件中直接指定了该页面）。</description>
    </item>
    
    <item>
      <title>深入分布式缓存读书笔记（1） - 缓存简介</title>
      <link>https://xiongchen2012.github.io/post/introduce-to-cache/</link>
      <pubDate>Thu, 01 Feb 2018 23:42:21 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/introduce-to-cache/</guid>
      <description>《深入分布式缓存》读书笔记
（1）缓存简介
（2）页面缓存（Application Cache）
（3）HTTP缓存
（4）代理服务器缓存
什么是缓存 书中引用的维基百科对缓存的定义是: 存储在计算机上的一个原始数据复制集，以便于访问
我看到维基百科上缓存的定义是： 凡是位于速度相差较大的两种硬件之间，用于协调两者数据传输速度差异的结构，均可称之为Cache。  维基百科
虽然文字上相差较大，但两者综合起来看，缓存可以理解为：
缓存是原始数据的Copy，目的是为了协调和解决两个系统之间速度差异。让快的系统尽可能不用等待慢的系统处理数据。  PS：呆湾人对缓存的叫法是：快取，个人感觉这个叫法更贴近缓存的本意。
为什么用缓存  Cache的核心作用是加快系统存取速度，提高系统性能  我认为任何系统不管你有多么复杂，设计的多么精妙，都遵循木桶效应 。对外表现出的性能只取决于最差的一部分。一个复杂的系统中，有的部分处理速度特别快（如内存读写），有的部分处理特别慢（如网络传输），在两者之间设置一个中间层来消弥这种差异，也可以看做在木桶最短的那快板上做了修补。
 方便进行系统调优  在系统的各个层次引入缓存，可以有效的优化整体系统性能。
 缓存为王，对开发人员来说是性能为王，对用户来说是用户体验为王
 缓存的特点  Source of Truth  缓存是原始数据的一份Copy，所以它有Source of Truth，即使缓存里的数据丢了，还可以从原始数据中重建缓存。
 缓存能进行CRUD操作   缓存不是一成不变，缓存中的数据应该可以随时被更新，被删除等。缓存和原始数据之间必定存在固定的算法，可以有效管理缓存和原始数据之间的对应关系。
 缓存也可能是持久化的  缓存不一定都是存在内存中的（断电就没有了），比如也可以存在SSD等高速存储设备中。
缓存的分类 按照缓存在系统所处的位置不同可以分为：
- 客户端缓存
缓存的内容位于客户端，当缓存中有需要的内容时，不再向服务器去请求。典型的有Web缓存，HybridApp内缓存等
 网络缓存
网络缓存位于客户端和服务端之间，代理客户端和服务端之间的Request和Response。如果缓存中有内容，代理将不再重新向服务端请求内容，直接将缓存内容返回客户端。典型有的Web代理服务器，CDN等
 服务端缓存
缓存内容位于服务端，典型的有Database缓存、平台级的缓存有Ehcache，应用级的有Redis、Memcached等
  按照缓存的规模和部署方式可以分为： - 单机缓存 - 集群缓存
 分布式缓存  关于缓存的一些术语  Cache Hit | Cache Miss  系统接收到客户发起的请求，如果请求的数据恰好在缓存中，称为Cache Hit，反之称为Cache Miss(Miss后如果缓存还有空间的话，会将数据更新到缓存中)</description>
    </item>
    
    <item>
      <title>Tomcat with native Apache Portable Runtime</title>
      <link>https://xiongchen2012.github.io/post/native-tomcat/</link>
      <pubDate>Sun, 28 Jan 2018 17:04:13 +0800</pubDate>
      
      <guid>https://xiongchen2012.github.io/post/native-tomcat/</guid>
      <description>Tomcat能使用Apache Portable Runtime提高性能，并能更好地与原生服务器技术相集成。APR是 Apache HTTP Server 2.x的核心。
 上传必须的库到服务器 scp /path/to/libssl1.0.0_1.0.2g-1ubuntu1_amd64.deb user@host:/home/user scp /path/to/openssl_1.0.2g-1ubuntu1_amd64.deb user@host:/home/user scp /path/to/libssl-dev_1.0.2g-1ubuntu1_amd64.deb user@host:/home/user
 安装TOMCAT并配置APR连接器 // 编译并安装APR scp /path/to/apr-1.5.2.tar.gz user@host:/home/user tar zxvf apr-1.5.2.tar.gz ./configure make make install // 安装APR-Util： scp /path/to/apr-util-1.5.4.tar.gz user@host:/home/user tar zxvf apr-util-1.5.4.tar.gz ./configure --with-apr=/usr/local/apr make make install // 安装TOMCAT APR： cp /opt/apache-tomcat-8.0.32/bin/tomcat-native.tar.gz /usr/local/src tar zxvf tomcat-native.tar.gz ./configure --with-apr=/usr/local/apr --with-java-home=/opt/jdk1.8 --with-ssl=/usr/bin make make install
 配置环境变量 vi /etc/profile export JAVA_HOME=/opt/jdk1.8 export JRE_HOME=/opt/jdk1.8/jre export PATH=$PATH:/opt/jdk1.</description>
    </item>
    
  </channel>
</rss>