{"componentChunkName":"component---src-templates-blog-post-js","path":"/data-analysis-track/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"d481b88f-0e5a-547b-a405-15bb8625037f","excerpt":"AJAX 和调用接口的方法一样，基于  封装发送埋点数据的API（不用的原因是考虑XHR兼容性最好），这种方式最简单容易理解，而且使用 POST 方式可以发送的数据量可以很大。缺点是会占用一定的客户端资源，而且需要处理跨域。 服务端跨域设置 Image请求 image…","html":"<h4>AJAX</h4>\n<p>和调用接口的方法一样，基于 <code class=\"language-text\">XMLHttpRequest</code> 封装发送埋点数据的API（不用<code class=\"language-text\">fetch</code>的原因是考虑XHR兼容性最好），这种方式最简单容易理解，而且使用 POST 方式可以发送的数据量可以很大。缺点是会占用一定的客户端资源，而且需要处理跨域。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1.创建XMLHttpRequest对象</span>\n<span class=\"token keyword\">let</span> xhr\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>XMLHttpRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>ActiveObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 兼容IE6以下版本</span>\n  xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXobject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Microsoft.XMLHTTP'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 跨域的时候不会带上cookie，如果需要带上cookie需要额外设置</span>\nxhr<span class=\"token punctuation\">.</span>credentials <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token comment\">// 2.设置请求信息</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://xxx.com/api/some'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 3.发送请求</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// get请求不传body参数，只有post请求使用</span>\n\n<span class=\"token comment\">// 4.接收响应(一般埋点数据上报不需要处理返回）</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>服务端跨域设置</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//不能设为星号，必须指定明确的、与请求网页一致的域名。</span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'origin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Image请求</h4>\n<p>image 请求方式是通过将埋点数据转成字符串放在图片请求的<code class=\"language-text\">queryString</code>里，然后向服务端请求一个 1*1 px 大小的图片，设置它的 src 属性就可以发送数据。<code class=\"language-text\">src</code>属性天然是跨域的，且兼容所有浏览器，缺点是<code class=\"language-text\">GET</code>  请求对上报的数据有限制，最大只能有几KB。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'/track.png?data=xxxxxxxxxxxxxxx'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>sendBeacon</h4>\n<p>navigator.sendBeacon 是一个比较新的 API，浏览器通过异步的 post 方式发送数据到服务端。该方法在页面跳转、刷新、关闭页面时发送请求，可以保证数据发送不丢失，浏览器会对其进行调度以保证数据有效送达，并且不会阻塞页面的加载或卸载，引外也不受跨域限制。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span><span class=\"token function\">sendBeacon</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>url：数据上报地址；</li>\n<li>data：埋点数据（支持类型：ArrayBufferView、Blob、DOMString 、 FormData ）；</li>\n<li>返回值：埋点数据加入传输队列成功时返回 true，否则返回 false；</li>\n</ul>\n<p><code class=\"language-text\">sendBeacon</code> 允许开发者发送少量数据到服务端，它的特点很明显：</p>\n<ul>\n<li>在浏览器空闲的时候异步发送数据，不影响页面 JS和CSS Animation 等执行；</li>\n<li>页面在 unload 状态下，也会异步发送数据，不阻塞页面刷新和跳转等操作；</li>\n<li>能够被客户端优化发送，尤其在 Mobile 环境下，可以将 beacon 请求合并到其他请求上一起处理；</li>\n<li>只能判断出是否放入浏览器任务队列，不能判断是否发送成功。</li>\n</ul>\n<h5>兼容性：</h5>\n<img src=\"https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210727165805195.png\" alt=\"image-20210727165805195\" style=\"zoom:50%;\">\n<p>毫无意外除了IE，基本上现代浏览器都完美支持，所以需要做一个兼容性处理：先判断用户当前设备是否支持 sendBeacon，如果不支持，就会走 <code class=\"language-text\">image</code> 或 <code class=\"language-text\">ajax</code>方式将数据发送出去。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendType <span class=\"token operator\">===</span> <span class=\"token string\">'beacon'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> navigator<span class=\"token punctuation\">.</span>sendBeacon <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sendType <span class=\"token operator\">=</span> <span class=\"token string\">'image'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 后续代码根据sendType走到不同的上报逻辑</span></code></pre></div>\n<h5>发送数据大小限制</h5>\n<p><a href=\"https://www.w3.org/TR/beacon/\">标准</a>没有明确大小限制，但是可以肯定的是数据大小是会有限制的，不一样的浏览器应该有所差异。有网友做了实验，可以参考：<a href=\"http://www.voidcn.com/article/p-okdxpzox-bwh.html\">http://www.voidcn.com/article/p-okdxpzox-bwh.html</a></p>\n<h4>总结</h4>\n<p>面对不同的埋点数据上报场景时，我们要选择不同的方式来上报数据：</p>\n<ul>\n<li>如果发送数据量较小，采用 <code class=\"language-text\">image</code> 方式上报给服务端更合适；</li>\n<li>如果发送数据量较大，采用 <code class=\"language-text\">ajax</code> 方式更合适；</li>\n<li>如果需要进行精准的统计信息，采用 <code class=\"language-text\">sendBeacon</code> 方式能最大程度保证数据上报的成功率。</li>\n</ul>\n<p>建议优先使用 <code class=\"language-text\">sendBeacon</code>来上报数据。在浏览器不支持sendBeacon的情况下使用 <code class=\"language-text\">image</code> 方式来上报。</p>","frontmatter":{"title":"前端埋点之数据上报方式","date":"2021/07/27 15:48:03","description":"前端埋点数据上报到服务器的3种方式:ajax，image,sendBeacon"}},"previous":{"fields":{"slug":"/react/react-xss-protection/"},"frontmatter":{"title":"XSS攻击的防护（JS）"}},"next":{"fields":{"slug":"/intersection-observer/"},"frontmatter":{"title":"前端埋点之曝光埋点"}}},"pageContext":{"id":"d481b88f-0e5a-547b-a405-15bb8625037f","previousPostId":"6b2d93da-dfda-53de-be7a-8f55b26c98b7","nextPostId":"49de1097-c907-55d0-b1de-caca2b3397ee"}},"staticQueryHashes":["2355076697","2841359383"]}