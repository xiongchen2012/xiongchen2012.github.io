{"componentChunkName":"component---src-templates-blog-post-js","path":"/patch-package/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"8bab4a34-ee8b-5281-af10-e5c1b0de9eb2","excerpt":"背景 团队协作的项目中使用的开源第三方库在使用过程中，如果不能满足业务需求，或是使用过程中发现了该包的bug。可以向原作者提Issue，然后坐等作者修复或开发即可。这样就需要等作者重新发布新版本，在快速迭代的项目中显然不现实。所以直接修改别人的源码大概率是最佳选择。 修改别人的源码往往有这几个方式： 直接在node…","html":"<h5>背景</h5>\n<p>团队协作的项目中使用的开源第三方库在使用过程中，如果不能满足业务需求，或是使用过程中发现了该包的bug。可以向原作者提Issue，然后坐等作者修复或开发即可。这样就需要等作者重新发布新版本，在快速迭代的项目中显然不现实。所以直接修改别人的源码大概率是最佳选择。</p>\n<p>修改别人的源码往往有这几个方式：</p>\n<ul>\n<li>\n<p>直接在node_modules中找到源码并修改</p>\n<p>优点：简单粗暴、快速生效</p>\n<p>缺点：一旦重新安装就失效，也不方便在团队成员之间共享</p>\n</li>\n<li>\n<p>fork源码并修复，然后提PR给作者</p>\n<p>优点：团队成员都可以共享</p>\n<p>缺点：等待周期很长</p>\n</li>\n</ul>\n<h5>解决方案</h5>\n<p>通过patch-package生成patch文件（diff格式），通过npm script的<code class=\"language-text\">postinstall</code>钩子在npm install/yarn之后自动给依赖库打补丁的方法，达到和团队成员共享修改依赖库的目的</p>\n<h5>使用方法</h5>\n<ul>\n<li>\n<p>安装</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># NPM</span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev patch-package\n<span class=\"token comment\"># Yarn</span>\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev patch-package</code></pre></div>\n</li>\n<li>\n<p>生成Patch</p>\n<p>在项目的node_modules中修改了依赖库的源码之后，回到项目根目录后执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ npx patch-package <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span>  <span class=\"token comment\"># NPM > 5.2</span>\n$ <span class=\"token function\">yarn</span> patch-package <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span> <span class=\"token comment\"># Yarn</span></code></pre></div>\n<p>执行完成后，会在根目录生成<code class=\"language-text\">patches</code>目录，并在该目录中生成<code class=\"language-text\">&lt;package_name&gt;+&lt;version&gt;.patch</code>格式的文件，然后需要把补丁文件提交到代码仓库中，方便团队共享。</p>\n<blockquote>\n<p>patch-package的选项：</p>\n<p>—use-yarn 默认会根据lockfile来决定使用npm还是yarn，如果两者都有就使用npm，可以通过这个参数启用yarn</p>\n<p>—exlcude <regexp> 创建补丁时，忽略匹配的路径</p>\n<p>—include <regexp> 创建补丁时，仅考虑匹配的路径，与exclude相反</p>\n<p>—patch-dir 指定存放补丁的目录</p>\n</blockquote>\n<p>如果你修改的是依赖的依赖，甚至是依赖的依赖的依赖等（嵌套依赖），可以用<code class=\"language-text\">/</code>分隔符分隔包名，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ npx patch-package package/another-package/deep-pacakge</code></pre></div>\n</li>\n<li>\n<p>更新Patch</p>\n<p>和创建补丁的方法一样</p>\n</li>\n<li>\n<p>打补丁</p>\n<p>在<code class=\"language-text\">package.json</code>的<code class=\"language-text\">scripts</code>中加入<code class=\"language-text\">postinstall</code>，后续执行<code class=\"language-text\">npm install</code>或<code class=\"language-text\">yarn</code>后，会自动为依赖的第三方库打上补丁。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"postinstall\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"patch-pacakge\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h5>patch-package源码</h5>\n<p><a href=\"https://github.com/ds300/patch-package\">https://github.com/ds300/patch-package</a></p>","frontmatter":{"title":"团队协作项目中优雅的修改三方库","date":"2021/05/26 14:42:32","description":"如果第三方开源库不能满足我们实际项目的需要或者有小BUG等，修改了三方库的源码后如何优雅的与团队成员共享呢？可以使用patch-package修改依赖包内容，为依赖包创建补丁。"}},"previous":{"fields":{"slug":"/a-visual-guide-to-react-mental-models/"},"frontmatter":{"title":"React心智模型"}},"next":{"fields":{"slug":"/git/git-detached-head/"},"frontmatter":{"title":"常用Git命令速查（3）- HEAD游离"}}},"pageContext":{"id":"8bab4a34-ee8b-5281-af10-e5c1b0de9eb2","previousPostId":"5b4bc664-a3ac-5b80-bef8-d07e3c4f74d0","nextPostId":"c0b7d143-9cb1-5c0f-b5ae-70ccc210264c"}},"staticQueryHashes":["2355076697","2841359383"]}