{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/batched-update/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"f41ac525-4945-50ec-896c-e2668bc386c0","excerpt":"两种方法 在的回调函数中，可以获取到更新后的值 把放在中调用，可以立马获取到更新的值 重点讲第二种，因为在当前的React版本中还是可以的，未来可能会有问题。 React的三种渲染模式 legacy模式：，当前React使用的模式 blocking模式：，过渡到的一步，可以忽略 concurrent…","html":"<h3>两种方法</h3>\n<ul>\n<li>在<code class=\"language-text\">setState</code>的回调函数中，可以获取到更新后的<code class=\"language-text\">state</code>值</li>\n<li>把<code class=\"language-text\">setState</code>放在<code class=\"language-text\">setTimeout</code>中调用，可以立马获取到更新的<code class=\"language-text\">state</code>值</li>\n</ul>\n<p>重点讲第二种，因为在当前的React版本中还是可以的，未来可能会有问题。</p>\n<h3>React的三种渲染模式</h3>\n<ul>\n<li>legacy模式：<code class=\"language-text\">ReactDOM.render(&lt;App/&gt;, rootNode)</code>，当前React使用的模式</li>\n<li>blocking模式：<code class=\"language-text\">ReactDOM.createBlockingRoot(rootNode).render(&lt;App /&gt;)</code>，过渡到<code class=\"language-text\">ConcurrentMode</code>的一步，可以忽略</li>\n<li>concurrent模式：<code class=\"language-text\">ReactDOM.createRoot(rootNode).render(&lt;App /&gt;)</code>，未来稳定之后，是 React 的默认开发模式。</li>\n</ul>\n<h3>源码</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 源码路径：react-reconciler/src/ReactFiberWorkLoop.old.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> batchedUpdates<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=></span> <span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">R</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> prevExecutionContext <span class=\"token operator\">=</span> executionContext<span class=\"token punctuation\">;</span>\n  executionContext <span class=\"token operator\">|=</span> BatchedContext<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这里的fn就是调用了setState的函数</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    executionContext <span class=\"token operator\">=</span> prevExecutionContext<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      executionContext <span class=\"token operator\">===</span> NoContext <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> ReactCurrentActQueue<span class=\"token punctuation\">.</span>isBatchingLegacy<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resetRenderTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">flushSyncCallbacksOnlyInLegacyMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scheduleUpdateOnFiber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ....省略无关代码</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    lane <span class=\"token operator\">===</span> SyncLane <span class=\"token operator\">&amp;&amp;</span>  <span class=\"token comment\">// legacy模式的时候，泳道是同步的！</span>\n    executionContext <span class=\"token operator\">===</span> NoContext <span class=\"token operator\">&amp;&amp;</span>  <span class=\"token comment\">// 如果放在setTimeout中执行setState,条件为true</span>\n    <span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">&amp;</span> ConcurrentMode<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> NoMode <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> ReactCurrentActQueue<span class=\"token punctuation\">.</span>isBatchingLegacy<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resetRenderTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 同步更新state值</span>\n    <span class=\"token function\">flushSyncCallbacksOnlyInLegacyMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>结论</h3>\n<ul>\n<li>Legacy模式：<code class=\"language-text\">setState</code>是异步执行的，但如果放在<code class=\"language-text\">setTimeout</code>中执行，<code class=\"language-text\">setState</code>是<strong>同步执行</strong>的；</li>\n<li>Concurrent：<code class=\"language-text\">setState</code>始终是异步执行的，所以第二种方法可能会失效了</li>\n</ul>\n<h3>演示地址</h3>\n<p><a href=\"https://codesandbox.io/s/young-thunder-be5p9?file=/src/index.js\">codesandbox</a></p>","frontmatter":{"title":"如何获取正确的setState之后的值","date":"2021/08/25 21:43:13","description":"从React源码角度看如何正确的获取setState之后的值"}},"previous":{"fields":{"slug":"/react/react-render-context/"},"frontmatter":{"title":"React Rendering教程（5） - Context"}},"next":{"fields":{"slug":"/react/react-element/"},"frontmatter":{"title":"React Element"}}},"pageContext":{"id":"f41ac525-4945-50ec-896c-e2668bc386c0","previousPostId":"9b3e7f3d-859d-5afe-b65d-0041bbc69c81","nextPostId":"c1fec2b5-2364-50a9-863d-0365bdb87afe"}},"staticQueryHashes":["2355076697","2841359383"]}