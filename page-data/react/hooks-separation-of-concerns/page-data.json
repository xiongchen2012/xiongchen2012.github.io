{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/hooks-separation-of-concerns/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"c06b03d1-2e60-5be5-93fa-493347562963","excerpt":"原文地址，以下是我的翻译 如果你用过一段时间的React，你一定听说过容器组件和纯展示组件，或是或。这些术语描述了一种将React组件的UI层和业务逻辑分离的模式。 UI层和业务逻辑分离并不是React独有的：关注点分离是一种7…","html":"<blockquote>\n<p><a href=\"https://felixgerschau.com/react-hooks-separation-of-concerns/\">原文地址</a>，以下是我的翻译</p>\n</blockquote>\n<p>如果你用过一段时间的React，你一定听说过<strong>容器组件</strong>和<strong>纯展示组件</strong>，或是<code class=\"language-text\">smart组件</code>或<code class=\"language-text\">dumb组件</code>。这些术语描述了一种将React组件的UI层和业务逻辑分离的<a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">模式</a>。</p>\n<p>UI层和业务逻辑分离并不是React独有的：关注点分离是一种70年代就存在的设计原则，例如后端通常会把访问数据库的代码和业务逻辑代码进行分离。</p>\n<p>所以在React中，我们通过把所有业务逻辑写在容器组件里，然后把数据通过<code class=\"language-text\">props</code>向纯展示组件传递这种方式来实现关注点分离的目的。随着Hooks的引入，现在又有了一种新的方法：<em>自定义Hooks</em></p>\n<h3>为什么要将业务逻辑和组件解耦？</h3>\n<p>在将业务逻辑和组件解耦之前，我们需要知道为什么要这么做。</p>\n<p>以每个函数（或组件）只负责一件事的方式来组织我们的代码，这样做的好处是更容易修改和维护。(Dave和 Andrew在<strong>《程序员修练之道》</strong>这种书里称这种方式为 <a href=\"https://felixgerschau.com/pragmatic-programmer-20th-anniversary-favorite-topic-summary/#orthogonality\">『正交性』</a>)</p>\n<p>应用到React中后，我们的组件看起来更简洁，更有条理。比如说：我们在编辑UI之前无需修改任何业务逻辑。</p>\n<p>这样组织代码不仅使其看起来更好，而且使修改更新容易，因为Hooks不会影响UI，反之亦然。</p>\n<p>测试也更加容易实现：如果有必要的话完全可以撇开UI，只对业务逻辑进行单独的测试。然而，对我来说，最重要的优点还是如何组织我的代码。</p>\n<h3>如何用<code class=\"language-text\">Hooks</code>解耦业务逻辑</h3>\n<p>为了解耦业务逻辑，首先我们需要创建一个自定义Hooks。以下面这个组件为例，它用来计算指数值，界面如下图所示：</p>\n<img src=\"https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210909092932982.png\" alt=\"image-20210909092932982\" style=\"zoom:40%;\">\n<p>可以到这里看源码<a href=\"https://codepen.io/fgerschau/pen/OJmMYoG\">Codepen</a>，主要的代码如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ExponentCalculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>base<span class=\"token punctuation\">,</span> setBase<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>exponent<span class=\"token punctuation\">,</span> setExponent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>base <span class=\"token operator\">**</span> exponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleBaseChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setBase</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleExponentChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setExponent</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue-wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleBaseChange<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>base<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleExponentChange<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>exponent<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>result<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>看起来已经不错了，但为了能继续写下去，你可以<em>想像</em> 一下这里还有N多其它复杂的逻辑。</p>\n<p>第1步，我们先把业务逻辑移到<strong>自定义Hook</strong>里面，然后在组件中调它。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useExponentCalculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>base<span class=\"token punctuation\">,</span> setBase<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>exponent<span class=\"token punctuation\">,</span> setExponent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>base <span class=\"token operator\">**</span> exponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleBaseChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setBase</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleExponentChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setExponent</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">,</span>\n    exponent<span class=\"token punctuation\">,</span>\n    result<span class=\"token punctuation\">,</span>\n    handleBaseChange<span class=\"token punctuation\">,</span>\n    handleExponentChange<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ExponentCalculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">,</span>\n    exponent<span class=\"token punctuation\">,</span>\n    result<span class=\"token punctuation\">,</span>\n    handleExponentChange<span class=\"token punctuation\">,</span>\n    handleBaseChange<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useExponentCalculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们可以把这个hook移到单独的文件中，这样看起来更加【关注点分离】</p>\n<p>此外，可以进一步把自定义的hook拆分成更细分且可重复使用的函数。这个示例中，把 <code class=\"language-text\">calculateExponent</code>提取出来。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// useExponentCalculator.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calculateExponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">base<span class=\"token punctuation\">,</span> exponent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> base <span class=\"token operator\">**</span> exponent<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useExponentCalculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>base<span class=\"token punctuation\">,</span> setBase<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>exponent<span class=\"token punctuation\">,</span> setExponent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calculateExponent</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span> exponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>测试这个函数比测试第1个示例中的整个组件要容易的多。我们可以使用任何nodejs的测试框架来测试它，甚至不支持React都行。</p>\n<p>现在我们的组件和自定义Hooks中有了框架特定（React）的代码，而业务逻辑代码则写在稍后会定义的函数中（框架无关） </p>\n<h3>最佳实践</h3>\n<h4>命名</h4>\n<ul>\n<li>我喜欢用组件的名称来命令自定义Hook，通常是<code class=\"language-text\">use</code>+<code class=\"language-text\">组件名</code>这样的形式 (例如：<code class=\"language-text\">useExponentCalculator</code>)。然后文件名和Hook名相同。</li>\n<li>你可能想要遵循不同的命名约定，但建议在项目中最好保持一致。</li>\n<li>如果能复用自定义Hook的部分代码，通常可以将它移动到<code class=\"language-text\">src/hooks</code>目录下另一个文件中。</li>\n</ul>\n<h4>不要过度拆分</h4>\n<ul>\n<li>务实一些，如果组件只有几行代码，也没有必要分离业务逻辑了。</li>\n</ul>\n<h4>CSS-in-JS</h4>\n<p>如果你用了 CSS-in-JS 库 (<code class=\"language-text\">useStyles</code>)，你可能还想将此代码移动到另一个文件。</p>\n<p>可以将它移动到与钩子相同的文件中。但是，如果文件变得太大，最好把它放在组件之上的同一个文件里（定义在组件代码上面），也可以把它移到它自己的文件中。</p>\n<h3>总结</h3>\n<ul>\n<li>无论你是否认为自定义Hooks改善了你的代码，最终取决于个人喜好。如果你的项目代码并没有包含太多的业务逻辑，也就没必要进行拆分了。</li>\n<li>自定义Hooks只是代码模块化的一种方法，如果可能的话，我还强烈建议将组件拆分成更小的，可重用的代码块</li>\n</ul>","frontmatter":{"title":"用Hooks实现关注点分离","date":"2021/09/08 16:56:13","description":"UI层和业务逻辑分离并不是React独有的：关注点分离是一种70年代就存在的设计原则，例如后端通常会把访问数据库的代码和业务逻辑代码进行分离。"}},"previous":{"fields":{"slug":"/react/children-iteration-methods/"},"frontmatter":{"title":"React Children Utilities"}},"next":{"fields":{"slug":"/react/react-antipattern/"},"frontmatter":{"title":"React常见反模式"}}},"pageContext":{"id":"c06b03d1-2e60-5be5-93fa-493347562963","previousPostId":"4488f158-deb9-53fd-a036-df85780a1f7b","nextPostId":"fba2332e-1158-5043-a838-479f45a5fd95"}},"staticQueryHashes":["2355076697","2841359383"]}