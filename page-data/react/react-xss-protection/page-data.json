{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/react-xss-protection/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"6b2d93da-dfda-53de-be7a-8f55b26c98b7","excerpt":"XSS 攻击是什么 Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。XSS 攻击通常指的是利用网页的漏洞，攻击者通过巧妙的方法注入 XSS 代码到网页，因为浏览器无法分辨哪些脚本是可信的，导致 XSS 脚本被执行。XSS…","html":"<h4>XSS 攻击是什么</h4>\n<p>Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。XSS 攻击通常指的是利用网页的漏洞，攻击者通过巧妙的方法注入 XSS 代码到网页，因为浏览器无法分辨哪些脚本是可信的，导致 XSS 脚本被执行。XSS 脚本通常能够窃取用户数据并发送到攻击者的网站，或者冒充用户，调用目标网站接口并执行攻击者指定的操作。</p>\n<h4>XSS的分类</h4>\n<ul>\n<li>\n<p>反射型</p>\n<ul>\n<li>把 XSS 脚本放在 HTTP 请求中当成普通数据发送给服务端</li>\n<li>服务端在 HTTP 请求中收到数据后处理完，又将该数据拼接在 HTML 中返回</li>\n</ul>\n</li>\n<li>\n<p>存储型</p>\n<ul>\n<li>XSS脚本存在于服务端的数据库，文件，缓存中</li>\n<li>用户访问接口或网页时服务器将XSS脚本在响应中返回，浏览器默认执行</li>\n</ul>\n</li>\n<li>\n<p>DOM型</p>\n<ul>\n<li>前端直接将 URL 中的数据不做处理并动态插入到 HTML 中，是纯粹的前端安全问题</li>\n<li>类似反射型，区别在于 DOM 型 XSS 不会和后台进行交互</li>\n</ul>\n</li>\n</ul>\n<p>无论使用哪种攻击方式，本质就是将恶意代码注入到应用中，浏览器无脑执行后被注入。</p>\n<h4>React中XSS的防护</h4>\n<p>React DOM 在渲染所有输入内容之前，默认会进行转义。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串，因此恶意代码无法成功注入，从而有效地防止了 XSS 攻击。但是有一个例外的场景，就是使用 <code class=\"language-text\">dangerouslySetInnerHTML</code> 显示的内容，React不会自动帮助转义，如果不加处理，一定会被XSS注入。</p>\n<p>推荐一个可以帮助我们转义标签的库：<a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a></p>\n<ul>\n<li>\n<p>安装</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> dompurify --save\n<span class=\"token comment\"># or</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> dompurify</code></pre></div>\n</li>\n<li>\n<p>使用</p>\n<p>直接调用<code class=\"language-text\">sanitize</code>方法即可转义所有危险标签和属性</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> DOMPurify <span class=\"token keyword\">from</span> <span class=\"token string\">'dompurify'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dirty <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;img src=x onerror=alert(1)//>'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createMarkup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>__html<span class=\"token operator\">:</span> DOMPurify<span class=\"token punctuation\">.</span><span class=\"token function\">sanitize</span><span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">createMarkup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>DOMPurify有很多选项可以设置（具体<a href=\"https://github.com/cure53/DOMPurify#can-i-configure-dompurify\">参考文档</a>），大部分情况下用默认的选项就可以了。</p>\n<p>PS：如果觉得用这个库是大炮打蚊子的话，也可以自己用<code class=\"language-text\">replace</code>去转义<code class=\"language-text\">&quot;&lt;&gt;&amp;&#39;</code>等符号。</p>","frontmatter":{"title":"XSS攻击的防护（JS）","date":"2021/07/23 09:38:32","description":"详解script标签中的defer和aysnc属性"}},"previous":{"fields":{"slug":"/load-libary-console/"},"frontmatter":{"title":"Chrome控制台加载第三方库"}},"next":{"fields":{"slug":"/data-analysis-track/"},"frontmatter":{"title":"前端埋点之数据上报方式"}}},"pageContext":{"id":"6b2d93da-dfda-53de-be7a-8f55b26c98b7","previousPostId":"821e3ea7-7b4f-57e2-92f5-21c7d3735cd7","nextPostId":"d481b88f-0e5a-547b-a405-15bb8625037f"}},"staticQueryHashes":["2355076697","2841359383"]}