{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/react-render-refs/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"e99353ba-8aa0-5ae7-bc97-0330eaef9e8e","excerpt":"原文地址 https://alexsidorenko.com/blog/react-render-refs 先抛出一个问题：如何在按钮点击3次之后禁用它？（同时前两点击时不能触发re-render）  使用refs…","html":"<blockquote>\n<p><a href=\"https://alexsidorenko.com/blog/react-render-refs/\">原文地址</a> <a href=\"https://alexsidorenko.com/blog/react-render-refs\">https://alexsidorenko.com/blog/react-render-refs</a></p>\n</blockquote>\n<p>先抛出一个问题：如何在按钮点击3次之后禁用它？（同时前两点击时不能触发re-render）</p>\n<p><video src=\"https://alexsidorenko.com/7722fd8845a91058ff5310d5811d76ad/initial.mp4\" autoplay=\"autoplay\"></video></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>count <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Button</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>使用refs保存数据</h2>\n<blockquote>\n<p>当你想让组件『记住』某些信息，又不想这些信息<a href=\"https://beta.reactjs.org/learn/render-and-commit\">触发新的渲染</a>的话，你可以使用<code class=\"language-text\">ref</code> — 它就像一个神秘的『口袋』，你可以把组件的信息存放其中。</p>\n<p><a href=\"https://beta.reactjs.org/learn/referencing-values-with-refs\">React Docs - Referencing Values with Refs</a></p>\n</blockquote>\n<p>下面的示例用<code class=\"language-text\">refs</code>取代<code class=\"language-text\">state</code>来保存点击次数：</p>\n<p><video src=\"https://alexsidorenko.com/2d83e932382e8667de76c2e939c6f4b1/refs.mp4\" autoplay=\"autoplay\"></video></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">.</span>current <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Button</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>噗，<code class=\"language-text\">refs</code>的值更新了，但是按钮仍然可以点击，为啥呢？</p>\n<h2>组件渲染和DOM更新</h2>\n<p>要想禁用按钮，则必须更新DOM。React只有当<code class=\"language-text\">render</code>函数输出不同的内容时才更新DOM； React不会更新任何DOM，直到React组件渲染。而且，由于改变<code class=\"language-text\">refs</code>值不会导致组件重新渲染，所以按钮一直处于可点击状态。</p>\n<p>为了进一步演示效果，我们给它添加一个父组件，如下：</p>\n<p><video src=\"https://alexsidorenko.com/043414bb36580b69ab5313bbe54ecda6/parent.mp4\" autoplay=\"autoplay\"></video></p>\n<p>默认情下，当渲染React组件时会递归的重新渲染其子组件。这就是为什么当更新<code class=\"language-text\">Parent</code> 组件的<code class=\"language-text\">state</code>时，会同时渲染 <code class=\"language-text\">Parent</code> 和 <code class=\"language-text\">Component</code>。所以当 <code class=\"language-text\">Component</code> 更新时，React根据条件禁用了按钮。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">.</span>current <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Button</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>很明显我们不能依赖父组件的更新来禁用按钮，接下来我们直接在<code class=\"language-text\">Component</code>中实现同样的行为。</p>\n<h2>更新<code class=\"language-text\">state</code>触发组件的重渲染</h2>\n<p>我们可以通过再次引入<code class=\"language-text\">state</code>来触发组件的重新渲染。但是我们又不能让组件在前两次点击时重新渲染，所以我们把点击次数<code class=\"language-text\">count</code>悄咪咪的保存在<code class=\"language-text\">refs</code>中。我们将新增一个<code class=\"language-text\">butttonStatus</code>变量，专门负责更新按钮的状态。 我们只在点击第3次时，将 <code class=\"language-text\">butttonStatus</code> 的值更新为disabled</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>buttonStatus<span class=\"token punctuation\">,</span> setButtonStatus<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n  <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>buttonStatus <span class=\"token operator\">===</span> <span class=\"token string\">'disabled'</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>current <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setButtonStatus</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">></span></span></code></pre></div>\n<p><video src=\"https://alexsidorenko.com/ca5a768e0862635aef1ce77ee3ea00a3/state.mp4\" autoplay=\"autoplay\"></video></p>\n<p>文中的例子是为了演示<code class=\"language-text\">refs</code>的机制。 谨记：不必要的渲染并不总是坏的，没有必要纠结于消除每一次不必要的渲染。实际上，在实际的场景中，为了简单起见，仅仅依赖<code class=\"language-text\">state</code>而使得渲染3次组件反而更有意义（为啥？简单呗）。当然，在你的应用中可能会遇到不同的场景，这时候你应该已经知道可以通过<code class=\"language-text\">refs</code>的强大功能来优化你的组件行为了~</p>\n<p>全文完</p>","frontmatter":{"title":"React Rendering教程（6） - Refs","date":"2021/12/01 19:35:28","description":"不必要的渲染并不总是坏的，但是当你需要优化时，请借助refs来实现你的目的吧。"}},"previous":{"fields":{"slug":"/basic/eyedropper-api/"},"frontmatter":{"title":"Introduce to EyeDropper API"}},"next":{"fields":{"slug":"/basic/webpack-hint/"},"frontmatter":{"title":"webpack.config.js的智能提示"}}},"pageContext":{"id":"e99353ba-8aa0-5ae7-bc97-0330eaef9e8e","previousPostId":"82ad39b0-4070-53d2-93ce-38e355291cc0","nextPostId":"64648fc1-9d22-5580-93f8-d41d8cd521b0"}},"staticQueryHashes":["2355076697","2841359383"]}