{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/hooks-principle/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"d25094b8-8d37-5b4a-86f2-792fec3e2c04","excerpt":"React Hooks: Not MAGIC, Just Arrays useState 的实现原理 先看useState的原型： 的输入是state的初始值，输出始终是一个元组，其中的会被用到，调用除了会设置新的state之外还会更新UI（通过调用函数实现） 绝大部分UI组件不可能只有一个state…","html":"<blockquote>\n<p><a href=\"https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e\">React Hooks: Not MAGIC, Just Arrays</a></p>\n</blockquote>\n<h4>useState 的实现原理</h4>\n<p>先看useState的原型：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span>setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initalState<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">useState</code>的输入是state的初始值，输出始终是一个元组<code class=\"language-text\">[state,state的setter函数]</code>，其中的<code class=\"language-text\">state</code>会被<code class=\"language-text\">render函数</code>用到，调用<code class=\"language-text\">setter函数</code>除了会设置新的state之外还会更新UI（通过调用<code class=\"language-text\">render()</code>函数实现）</p>\n<p>绝大部分UI组件不可能只有一个state变量，因此<code class=\"language-text\">useState</code>会被多次调用，所以这些state会被保存到一个容器中，这个容器其实就是朴实无华的数组。具体过程如下：</p>\n<ul>\n<li>第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。</li>\n<li>调用<code class=\"language-text\">setter函数</code>时，会将相应的<code class=\"language-text\">state</code>值更新，同时触发再次渲染的时候。<strong>cursor 被重置为 0</strong>。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新，过程如下图所示：</li>\n</ul>\n<img src=\"https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210817154008415.png\" alt=\"image-20210817154008415\" style=\"zoom:45%;\">\n<p>最简易的使用数组模拟的useState实现代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> memoizedState<span class=\"token operator\">:</span><span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> cursor<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>initialState<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>newState<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currentCursor <span class=\"token operator\">=</span> cursor\n  <span class=\"token comment\">// 第一次render时用初始值，后面都会使用容器中的值</span>\n  memoizedState<span class=\"token punctuation\">[</span>currentCursor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> memoizedState<span class=\"token punctuation\">[</span>currentCursor<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> initialState \n  \n  <span class=\"token comment\">// setter，应用了闭包</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>newState<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    memoizedState<span class=\"token punctuation\">[</span>currentCursor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newState\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//更新UI</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token operator\">++</span>cursor\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>memoizedState<span class=\"token punctuation\">[</span>currentCursor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>真实的React实现肯定比上面模拟的复杂多了，但是本质也只是使用了<code class=\"language-text\">单向链表</code>替代<code class=\"language-text\">数组</code>，不需要再使用<code class=\"language-text\">cursor</code>来处理位置，而是使用<code class=\"language-text\">next</code>方法来串联起所有的hooks，如下图所示：</p>\n<img src=\"https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210817153242989.png\" alt=\"image-20210817153242989\" style=\"zoom:45%;\">\n<h5>Dispatcher</h5>\n<p><code class=\"language-text\">Dispatcher</code>起到的作用与SpringMVC中的<code class=\"language-text\">DispatcherServlet</code>类似，是Hooks机制下对外统一暴露的控制器，渲染过程中，通过<code class=\"language-text\">enableHooks</code>标志位控制启用<code class=\"language-text\">Dispatcher</code>或<code class=\"language-text\">DispatcherWithoutHooks</code>，它的核心作用是防止hooks在异常的地方被调用了。</p>\n<h5>Hooks queue</h5>\n<p>Hooks的表现就是按照调用顺序被链接在一起的节点（nodes），React中每一个hook的节点不能再独立去看了，而应该把他们组织到一个<code class=\"language-text\">queue</code>中，如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  memoizedState<span class=\"token operator\">:</span> 'foo'<span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    memoizedState<span class=\"token operator\">:</span> 'bar'<span class=\"token punctuation\">,</span>\n    next<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      memoizedState<span class=\"token operator\">:</span> 'baz'<span class=\"token punctuation\">,</span>\n      next<span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>根据React源码中Hoos的TS定义，也可以清楚的看到这个Queue的模样：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Hook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  memoizedState<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  baseState<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  baseUpdate<span class=\"token operator\">:</span> Update<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  queue<span class=\"token operator\">:</span> UpdateQueue<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">:</span> Hook <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>比较有疑问的是<code class=\"language-text\">baseState</code>，<code class=\"language-text\">baseUpdate</code>，<code class=\"language-text\">queue</code>这三个东西是什么，可以看一下<code class=\"language-text\">useState</code>的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  initialState<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> Dispatch<span class=\"token operator\">&lt;</span>BasicStateAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>\n    basicStateReducer<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// useReducer has a special case to support lazy useState initializers</span>\n    <span class=\"token punctuation\">(</span>initialState<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里发现<code class=\"language-text\">useState</code>竟然是<code class=\"language-text\">useReducer</code>特定的一种具体实现，难怪官网关于<a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usereducer\">useReducer的说明</a> 时说明了它是<code class=\"language-text\">useState</code>的替代方案，当时没理解，现在懂了。</p>\n<p>回到Hook的定义，各个参数的意义就明确了。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Hook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  memoizedState<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// hook更新后的缓存state</span>\n  baseState<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 其实就是initialState</span>\n  baseUpdate<span class=\"token operator\">:</span> Update<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 最近一次调用更新state方法的action</span>\n  queue<span class=\"token operator\">:</span> UpdateQueue<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调度操作的队列，等待进入reducer</span>\n  next<span class=\"token operator\">:</span> Hook <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 下一个hook，通过它串联起所有hooks</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>参考链接</h4>\n<p><a href=\"https://juejin.cn/post/6844904032708853767\">React Hooks 底层解析</a></p>\n<p><a href=\"https://github.com/brickspert/blog/issues/26\">React Hooks 原理</a></p>\n<p><a href=\"https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba\">Under the hood of React’s hooks system</a></p>\n<p><a href=\"https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L336\">React-ReactFiberHooks源码</a></p>","frontmatter":{"title":"Hooks的实现原理","date":"2021/08/17 13:48:13","description":"当使用 Hook 特性编写组件的时候时候，总能感觉到它的简洁和方便。当然，「天下没有免费的午餐」，它牺牲了可读性并且存在内存泄漏风险。但这并不妨碍探索它的魔力。"}},"previous":{"fields":{"slug":"/css/unknown-tailwind-rule/"},"frontmatter":{"title":"解决VSCode中@tailwind无法解析问题"}},"next":{"fields":{"slug":"/react/react-render-always-rerenders/"},"frontmatter":{"title":"React Rendering教程（1） - It Always Re-renders"}}},"pageContext":{"id":"d25094b8-8d37-5b4a-86f2-792fec3e2c04","previousPostId":"3068f431-d13e-57ba-9ac9-02ddef69b267","nextPostId":"700253a0-4f38-5231-93e4-c980b136bd11"}},"staticQueryHashes":["2355076697","2841359383"]}