{"componentChunkName":"component---src-templates-blog-post-js","path":"/babel-concept/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"2b745bd6-5de1-5e42-879f-8ce0171c7783","excerpt":"Babel是什么 由于现代浏览器对于ECMAScript2015+支持非常有限，用ES6语法写的Javascript代码没办法直接在浏览器中运行。于是Babel（发音/’beibəl/）应运而生了。 Babel通过自己的工具链（ToolChain），将使用ES6语法写的Javascript代码转换成完全同等功能的ES…","html":"<h3>Babel是什么</h3>\n<p>由于现代浏览器对于ECMAScript2015+支持非常有限，用ES6语法写的Javascript代码没办法直接在浏览器中运行。于是Babel（发音/’beibəl/）应运而生了。</p>\n<p>Babel通过自己的工具链（ToolChain），将使用ES6语法写的Javascript代码转换成完全同等功能的ES5代码，以便在浏览器中执行。有了Babel用户可以直接山书写ES6的代码，而不用担心浏览器无法执行，大大提高了用户的开发效率，降低了由于ES5语言特性带来潜在问题的几率。</p>\n<p>官网的解释更简洁：<br>\nBabel is a JavaScript compiler</p>\n<p>它的目的是：<br>\n<strong>Use next generation JavaScript, today.</strong></p>\n<h3>配置Babel</h3>\n<p>有两种方式可以在项目中配置和使用Babel：.bablerc和package.json</p>\n<h4>.babelrc</h4>\n<p>在项目根目录配置一个名为<code class=\"language-text\">.babelrc</code>的文件，这个文件按照JSON格式进行书写。主要可以分为两段：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    presets<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中<code class=\"language-text\">presets</code>用于指定babel编译js代码时使用的规则，<code class=\"language-text\">plugins</code>指定babel使用的一些插件</p>\n<h4>package.json</h4>\n<p>也可以在项目的package.json中配置babel，内容和上述方式一样：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">\t...\n\t<span class=\"token property\">\"babel\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n\t...</code></pre></div>\n<h4>env选项</h4>\n<p>如果想为不同的env配置不同的选项，可以增加<code class=\"language-text\">env</code>配置项</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">\t<span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//全局的预设</span>\n        <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//全局的插件</span>\n        <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"production\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            \t<span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//production环境下的预设</span>\n                <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//production环境下的插件</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>env的取值：process.env.BABEL<em>ENV > process.env.NODE</em>ENV > “development”</p>\n<p><strong>配置文件的查找顺序如下：</strong></p>\n<p>需编译的js文件的当前目录中查找<code class=\"language-text\">.babelrc</code> > 向上查找babelrc文件直到项目的根目录 > 如果没有babelrc则查找<code class=\"language-text\">package.json</code>中是否有<code class=\"language-text\">babel:{}</code></p>\n<h3>Plugins</h3>\n<p>为什么要先写插件？要从Babel工作的步骤说起。Babel自称为编译器，它的编译工作分为了三个步骤：解析（parsing）-> 转换（transforming）-> 生成目标代码（generating）。</p>\n<p>开箱即用的Babel（可以理解为初始状态时的babel），实际上在第2阶段（transforming）什么工作都没做。解析(parsing)一份代码，因为在第2阶段什么都没做，所以第3阶段会输出完全相同的代码。即：<code class=\"language-text\">const babel = code =&gt; code</code></p>\n<p>因此Babel引入了插件来作用于第2阶段（transforming），插件以第1阶段解析的原始代码作为输入，实质性的进行了转换然后输出给第3阶段。这类用于转换代码的Babel插件统称为：Transform Plugins，插件机制带了很好的扩展性和性能。</p>\n<p>例如，如果需要将下面代码的的箭头函数转换成ES5，需要用到ES2015插件中的<code class=\"language-text\">es2015-arrow-functions</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> doubled <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token operator\">=></span>num<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>安装箭头函数转换的plugin</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev es2015-arrow-functions\nbabel -i example.js -o output.js</code></pre></div>\n<p>转码后输出，已将箭头函数转换成了ES5的function：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> doubled <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Babel插件拆分的非常细，基本上每一项语法特性都会有一个对应的插件，比如将ES2015转换相关的官方插件就有19个之多，几乎每个新特性对应一个插件。这样的设计使得开发者可以根据自己的需要进行插件的组合，官方可以不断对其进行扩展，也有利于babel社区贡献特定的插件。</p>\n<p>PS：有些代码在第1阶段就可能会无法解析，典型的比如React的jsx，babel也通过插件来解决问题。这类用于解析源文件的插件统称为：Syntax Plugins。一般Transform插件会自动使用相应的Syntax插件，不需额外指定Syntax插件。</p>\n<p><strong>总结：Syntax插件+Transform插件共同组成了Babel的插件体系，Syntax用于第1阶段解析源码，Transform用于第2阶段转换源码</strong></p>\n<h3>Presets</h3>\n<p>上一节解释了Babel的插件机制，通过插件就可以把Babel所有的事情都干了，为什么还要引入Presets呢？</p>\n<p>原因很简单：逐个插件引入的效率比较低下。比如在项目开发中，开发者想要将所有ES6的代码转成ES5，插件逐个引入的方式比较麻烦（需要引入20+个插件），而且容易出错（少一个可能就会跪了）。</p>\n<p>这时候，就可以引入presets来解决这个麻烦。</p>\n<blockquote>\n<p>Don’t want to assemble your own set of plugins? No problem! Presets are sharable <a href=\"https://babeljs.io/docs/en/babelrc\"><code class=\"language-text\">.babelrc</code></a> configs or simply an array of babel plugins.</p>\n</blockquote>\n<p>官方把presets定义成可共享的babel配置，也可以简单把presets看成plugins数组。比如<code class=\"language-text\">babel-preset-es2015</code>包含了所有跟ES6转换有关的插件；可以理解为：<code class=\"language-text\">babel-preset-es2015 === [es2015-arrow-functions,es2015-classes,es2015-destructuring.....]</code></p>\n<p>可共享的babel配置，可以理解为配置了presets就可以省去配置一堆插件，而preset名可以替代这些插件名。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 配置了es2015 preset</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es2015-arrow-functions\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"es2015-classes\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"es2015-literals\"</span> <span class=\"token comment\">// ...]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>官方提供了12种Preset\n| Preset | 用途 | 备注 |\n| :----- | ------ | ------ |\n| env | 可以根据指定的环境自动配置Babel插件的preset | 这篇博客专门讲这个preset |\n| es2015/es2016/es2017 | 用于转ES2015,2016和2017 | 还有个latest，已经不用了 |\n| stage-0/1/2/3 | 用于转tc39处于各阶段的提案语法 |  |\n| flow | 用于将Flow书写的代码转成javascript |  |\n| react | 用于将React代码转成js(主要是jsx语法) |  |\n| minify | 用于将编译后的代码进行压缩 |  |</p>\n<h3>Plugin和Preset简写形式</h3>\n<p>如果plugin的名称以<code class=\"language-text\">babel-plugin-</code>开头，就可以在配置中省掉这个前缀。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"someplugin\"</span><span class=\"token punctuation\">]</span>\n等价于\n<span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"babel-plugin-someplugin\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>同样，preset的名称以<code class=\"language-text\">babel-preset-</code>开头，可以在配置中省掉这个前缀。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"somepreset\"</span><span class=\"token punctuation\">]</span>\n等价于\n<span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"babel-plugin-somepreset\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Plugin和Preset的执行顺序</h3>\n<p>可以同时指定多个plugin和preset，plugins和presets也可以同时存在。所以需要知道顺序：</p>\n<ul>\n<li>plugin执行先于preset（Plugins run before Presets）</li>\n<li>plugin按照配置的次序<strong>顺序</strong>执行（Plugin ordering is first to last）</li>\n<li>plugin按照配置的次序<strong>逆序</strong>执行（Preset ordering is last to first）</li>\n</ul>\n<h3>Plugin和Preset的选项配置</h3>\n<p>plugin和preset都支持各自进行配置，不同的插件和预设支持的选项不一样，需要具体查看其文档，但是指定选项的配置语法是相同的：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin1\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"someoption\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span>\n            ...\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//需要用一个数组来配置plugin和它的选项</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin2\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"someoption\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span>\n            <span class=\"token comment\">//...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"preset1\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"someoption\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span>\n            <span class=\"token comment\">//...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"preset2\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"someoption\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span>\n            <span class=\"token comment\">//...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Babel入门（1） - 基础知识","date":"August 17, 2018","description":"Babel入门（1） - 基础知识"}},"previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Babel入门（1） - 基础知识"}},"next":null},"pageContext":{"id":"2b745bd6-5de1-5e42-879f-8ce0171c7783","previousPostId":"b338b05f-45af-56ae-ad8e-938167b82bff","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}