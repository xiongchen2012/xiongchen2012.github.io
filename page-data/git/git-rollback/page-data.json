{"componentChunkName":"component---src-templates-blog-post-js","path":"/git/git-rollback/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"f9990ed3-84b2-56d0-b445-529e67681066","excerpt":"…","html":"<h5>撤销当前分支的变化</h5>\n<p>如果在某个分支上修改了代码并做了几次提交，结果突然发现放错了分支，这几个提交本应该放到另一个分支的时候。应该进行如下处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 从当前分支的最新的提交新建出一个分支（注意，这时依然停留在当前分支）</span>\n$ <span class=\"token function\">git</span> branch <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 切换到这几次提交之前的状态</span>\n$ <span class=\"token function\">git</span> reset --hard <span class=\"token operator\">&lt;</span>当前分支此前的最后一次提交Commit_ID<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 切换到第1步创建出来的分支</span>\n$ <span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 后续可以在这个分支上继续进行开发，或者是将其merge到正确的分支后在正确的分支上进行开发。</span></code></pre></div>\n<h5>撤消暂存区文件</h5>\n<p>如果已经把文档加到了暂存区（通过<code class=\"language-text\">git add</code>命令)，但是还没有提交。如果想反悔可以进行如下处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 用rm命令，适合单个文件，或文件不多的时候</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">rm</span> --cached <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 用reset HEAD命令也行，会恢复到最后一次commit时的状态</span>\n$ <span class=\"token function\">git</span> reset HEAD</code></pre></div>\n<p>以上两个都可以，区别是<code class=\"language-text\">rm</code>需要一个一个文件的撤消，<code class=\"language-text\">reset HEAD</code>命令可以一直性全部撤消</p>\n<h5>丢弃工作区文件的修改</h5>\n<p>如果发现代码改的不对，需要丢弃掉并且重头开始修改。可以进行如下处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 这样做的原理是先找暂存区，如果该文件有暂存的版本，则恢复该版本，否则就恢复上一次提交的版本。</span>\n$ <span class=\"token function\">git</span> checkout -- <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span></code></pre></div>\n<p><em>重要：工作区的文件变化一旦被撤销，就无法找回了。</em></p>\n<h5>丢弃提交（reset)</h5>\n<p>如果希望以前的提交在历史中彻底消失，可以使用<code class=\"language-text\">git reset</code>命令，丢弃掉某一次提交之后的所有提交。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 丢弃掉commit之后所有的提交，如果不加--hard参数，工作区不会丢弃，加了这个参数工作区也丢弃了</span>\n$ <span class=\"token function\">git</span> reset <span class=\"token operator\">&lt;</span>commit_id<span class=\"token operator\">></span> --hard\n\n<span class=\"token comment\"># 如果需要同步到远程，因为reset之后肯定是比远程落后的，所以要加上-f参数强制推送上去</span>\n$ <span class=\"token function\">git</span> push -f <span class=\"token operator\">&lt;</span>origin<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 如果之前没有推送到远程，可以不用加-f参数</span></code></pre></div>\n<p><em>重要：这个操作是很危险的，慎用</em></p>\n<h5>撤消提交(revert)</h5>\n<p>和丢弃提交的区别就是，撤消不会丢失历史，而是会产生一个新的commit去把之前某个commit的内容全部抵消掉。它不会改变过去的历史，所以是首选方式，没有任何丢失代码的风险。</p>\n<p><code class=\"language-text\">git revert</code> 命令只能抵消上一个提交，如果想抵消多个提交，必须在命令行依次指定提交。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> revert <span class=\"token operator\">&lt;</span>commit_id<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> <span class=\"token operator\">&lt;</span>commit_id<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> </code></pre></div>\n<p><code class=\"language-text\">git revert</code>命令还有两个参数。</p>\n<blockquote>\n<ul>\n<li><code class=\"language-text\">--no-edit</code>：执行时不打开默认编辑器，直接使用 Git 自动生成的提交信息。</li>\n<li><code class=\"language-text\">--no-commit</code>：只抵消暂存区和工作区的文件变化，不产生新的提交。</li>\n</ul>\n</blockquote>\n<h5>替换上一次提交</h5>\n<p>提交以后，发现提交信息写错了，这时可以使用<code class=\"language-text\">git commit</code>命令的<code class=\"language-text\">--amend</code>参数修改上一次的提交信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit --amend -m <span class=\"token string\">\"Fixes bug #42\"</span></code></pre></div>\n<p>它的原理是产生一个新的提交对象，替换掉上一次提交产生的提交对象。</p>\n<p>这时如果暂存区有发生变化的文件，会一起提交到仓库。所以，<code class=\"language-text\">--amend</code>不仅可以修改提交信息，还可以整个把上一次提交替换掉。</p>","frontmatter":{"title":"常用Git命令速查（2）- 操作后悔了怎么办？","date":"2021/05/25 16:14:03","description":"Git 版本管理时，往往需要撤销某些操作。本文介绍几种最主要的情况，给出详细的解释。"}},"previous":{"fields":{"slug":"/accelerate-vscode-download/"},"frontmatter":{"title":"国内加速VSCode下载"}},"next":{"fields":{"slug":"/a-visual-guide-to-react-mental-models/"},"frontmatter":{"title":"React心智模型"}}},"pageContext":{"id":"f9990ed3-84b2-56d0-b445-529e67681066","previousPostId":"bc0da155-8573-5f35-b15a-de7ed89303b7","nextPostId":"5b4bc664-a3ac-5b80-bef8-d07e3c4f74d0"}},"staticQueryHashes":["2355076697","2841359383"]}