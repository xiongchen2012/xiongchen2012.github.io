{"componentChunkName":"component---src-templates-blog-post-js","path":"/git/git-detached-head/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"c0b7d143-9cb1-5c0f-b5ae-70ccc210264c","excerpt":"什么是HEAD HEAD可以理解为一个指针，HEAD指针通常会指向一个分支（或者说指向一个分支指针），可以通过查看当前的指向 下图很好的表示了的指向 游离HEAD 如果用使用命令  切换分支，HEAD 就会移动到指定的分支上。但是也可以用将HEAD指向某个具体的Commit，此时HEAD…","html":"<h4>什么是HEAD</h4>\n<p>HEAD可以理解为一个指针，HEAD指针通常会指向一个分支（或者说指向一个分支指针），可以通过<code class=\"language-text\">cat .git/HEAD</code>查看当前的指向</p>\n<img src=\"https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210527192214805.png\" alt=\"image-20210527192214805\" style=\"zoom:50%;\">\n<p>下图很好的表示了<code class=\"language-text\">HEAD</code>的指向</p>\n<img src=\"https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210527192313864.png\" alt=\"image-20210527192313864\" style=\"zoom:50%;\">\n<h5>游离HEAD</h5>\n<p>如果用使用命令 <code class=\"language-text\">git checkout &lt;branch_name&gt;</code> 切换分支，HEAD 就会移动到指定的分支上。但是也可以用<code class=\"language-text\">git checkout &lt;commit_id&gt;</code>将HEAD指向某个具体的Commit，此时HEAD指针就会处于名为一种<code class=\"language-text\">detached</code>（游离）状态，这时HEAD不再指向分支而是某次提交。命令行会提示：<code class=\"language-text\">You are in ‘detached HEAD’ state.</code></p>\n<img src=\"https://obs-1d2f.oss-cn-hangzhou.aliyuncs.com/images/image-20210528163917798.png\" alt=\"image-20210528163917798\" style=\"zoom:50%;\">\n<h5>游离HEAD使用场景</h5>\n<p>从上文的返回信息中就能知道游离HEAD的使用场景，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> checkout 56e0e92a973344edad0eb7883daca0577c99dadf\nNote: switching to <span class=\"token string\">'56e0e92a973344edad0eb7883daca0577c99dadf'</span><span class=\"token builtin class-name\">.</span>\n\nYou are <span class=\"token keyword\">in</span> <span class=\"token string\">'detached HEAD'</span> state. You can <span class=\"token function\">look</span> around, <span class=\"token function\">make</span> experimental\nchanges and commit them, and you can discard any commits you <span class=\"token function\">make</span> <span class=\"token keyword\">in</span> this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\n<span class=\"token keyword\">do</span> so <span class=\"token punctuation\">(</span>now or later<span class=\"token punctuation\">)</span> by using -c with the switch command. Example:\n\n  <span class=\"token function\">git</span> switch -c <span class=\"token operator\">&lt;</span>new-branch-name<span class=\"token operator\">></span>\n\nOr undo this operation with:\n\n  <span class=\"token function\">git</span> switch -\n\nTurn off this advice by setting config variable advice.detachedHead to <span class=\"token boolean\">false</span></code></pre></div>\n<p>从上述返回信息我们可以得知，我们当前检出了<code class=\"language-text\">56e0e92a973344edad0eb7883daca0577c99dadf</code>这个提交，现在我们处于分离头的状态，git建议我们，在分离头的状态下，我们可以随便看看，可以按照我们的想法，对当前目录中的文件进行一些实验性的修改，并且将这些实验性的修改创建成一些提交（其实这些提交会组成一条匿名分支），如果你最后后悔了，觉得实验不成功，修改后的结果并不是你想要的，那么我们可以在不影响任何其他分支和提交的情况下，丢弃这些实验性的提交（丢弃这条匿名分支），如果你觉得这些实验性的提交让你很满意，那么你就可以创建一个新的分支（其实是给这个匿名分支一个固定的名字），来永久性的保存这些提交。</p>\n<h5>游离HEAD的后续处理</h5>\n<ul>\n<li>\n<p>丢弃这个匿名分支</p>\n<p>处于游离HEAD时，直接checkout到其它分支，就可以丢弃掉你在匿名分支上的所有改动。</p>\n</li>\n<li>\n<p>保留这个匿名分支</p>\n<p>有两种方法可以永久保存匿名分支的提交</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 创建一个新的分支以便来保存这些在分离头状态下创建的提交（HEAD会切换到新创建的分支）</span>\n$ <span class=\"token function\">git</span> checkout -b <span class=\"token operator\">&lt;</span>new_branch_name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 从指定提交创建新分支（HEAD不会切换到新创建的分支）</span>\n$ <span class=\"token function\">git</span> branch <span class=\"token operator\">&lt;</span>new_branch_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>commit_id<span class=\"token operator\">></span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"常用Git命令速查（3）- HEAD游离","date":"2021/05/27 13:50:03","description":"详解HEAD为什么会处于游离状态，有什么用，如何脱离游离状态"}},"previous":{"fields":{"slug":"/patch-package/"},"frontmatter":{"title":"团队协作项目中优雅的修改三方库"}},"next":{"fields":{"slug":"/git/git-rebase/"},"frontmatter":{"title":"常用Git命令速查（4）- Rebase"}}},"pageContext":{"id":"c0b7d143-9cb1-5c0f-b5ae-70ccc210264c","previousPostId":"8bab4a34-ee8b-5281-af10-e5c1b0de9eb2","nextPostId":"301949e1-1ea5-5061-973b-2278dcb90f4e"}},"staticQueryHashes":["2355076697","2841359383"]}