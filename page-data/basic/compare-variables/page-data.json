{"componentChunkName":"component---src-templates-blog-post-js","path":"/basic/compare-variables/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"d56a4d98-b373-5b7f-a77b-7375c2196ce4","excerpt":"TLDR https://www.zhihu.com/question/20348948/answer/1486703…","html":"<h3>TLDR</h3>\n<p><a href=\"https://www.zhihu.com/question/20348948/answer/14867031\">https://www.zhihu.com/question/20348948/answer/14867031</a></p>\n<p>绝大多数场合应该使用 <code class=\"language-text\">===</code> ，只有检测 <code class=\"language-text\">null/undefined</code> 的时候可以使用 <code class=\"language-text\">x == null</code>，因为通常我们不区分 <code class=\"language-text\">null</code>和 <code class=\"language-text\">undefined</code> ，即将 <code class=\"language-text\">x == null</code> 作为<code class=\"language-text\">x === null || x === undefined</code>的缩写。</p>\n<p><code class=\"language-text\">==</code>的比较看似会比较方便，比如 <code class=\"language-text\">1 == &#39;1&#39;</code>，但是会埋下隐患，比如可能对类型做出错误的假设。</p>\n<p>例子：<code class=\"language-text\">if (x == 10) x += 5</code></p>\n<p>如果传入的x是字符串’10’，x的结果会变成’105’。在后续运算中字符串’105’又可能被转型，从而引入隐蔽的错误。</p>","frontmatter":{"title":"使用===和==的建议","date":"2020/09/21 13:48:13","description":"什么时候使用===（严格比较），什么时候使用==（宽松比较，抽象比较）"}},"previous":null,"next":{"fields":{"slug":"/basic/promise-static-methid/"},"frontmatter":{"title":"Promise的静态方法"}}},"pageContext":{"id":"d56a4d98-b373-5b7f-a77b-7375c2196ce4","previousPostId":null,"nextPostId":"b2e9e572-602f-5379-96c8-f498920ecc82"}},"staticQueryHashes":["2355076697","2841359383"]}