{"componentChunkName":"component---src-templates-blog-post-js","path":"/basic/promise-static-methid/","result":{"data":{"site":{"siteMetadata":{"title":"Deathdealer's Blog"}},"markdownRemark":{"id":"b2e9e572-602f-5379-96c8-f498920ecc82","excerpt":"总结 方法 一句话总结 Promise.all 全部的全部才能resolve，只要有一个就直接了 Promise.allSettled 要等到所有promise都已敲定（settled），即每个promise都要或 Promise.any 只要promise中任何一个  变成状态，整个就了 Promise.race…","html":"<h3>总结</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>一句话总结</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Promise.all</td>\n<td>全部的<code class=\"language-text\">promise</code>全部<code class=\"language-text\">resolve</code>才能resolve，只要有一个<code class=\"language-text\">reject</code>就直接<code class=\"language-text\">reject</code>了</td>\n</tr>\n<tr>\n<td>Promise.allSettled</td>\n<td>要等到所有promise都已敲定（settled），即每个promise都要<code class=\"language-text\">resolve</code>或<code class=\"language-text\">reject</code></td>\n</tr>\n<tr>\n<td>Promise.any</td>\n<td>只要promise中任何一个 <code class=\"language-text\">promise</code> 变成<code class=\"language-text\">resolve</code>状态，整个就<code class=\"language-text\">resolve</code>了</td>\n</tr>\n<tr>\n<td>Promise.race</td>\n<td>任何promise中任何一个<code class=\"language-text\">resolve</code>就直接<code class=\"language-text\">resolved</code>，有一个<code class=\"language-text\">reject</code>就直接<code class=\"language-text\">rejected</code></td>\n</tr>\n<tr>\n<td>Promise.resolve</td>\n<td><code class=\"language-text\">new Promise((resolve,reject)=&gt;resolve())</code>的简单写法</td>\n</tr>\n<tr>\n<td>Promise.reject</td>\n<td><code class=\"language-text\">new Promise((resolve,reject)=&gt;reject())</code>的简单写法</td>\n</tr>\n</tbody>\n</table>\n<h3>Promise.resolve和Promise.reject</h3>\n<p>这两个比较简单：</p>\n<ul>\n<li><code class=\"language-text\">Promise.resolve()</code>是<code class=\"language-text\">new Promise((resolve,reject)=&gt;resolve())</code>的简单写法；</li>\n<li><code class=\"language-text\">Promise.reject()</code>是<code class=\"language-text\">new Promise((resolve,reject)=&gt;reject())</code>的简单写法；</li>\n</ul>\n<h3>Promise.all</h3>\n<p><strong>语法：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>运行机制：</strong></p>\n<ul>\n<li>如果参数是一个空的可迭代对象，直接返回一个<code class=\"language-text\">resolved</code>的Promise</li>\n<li>如果参数全部都不是<code class=\"language-text\">promise</code>，异步地返回一个<code class=\"language-text\">resolved</code>的Promise</li>\n<li>其它情况下返回一个 <strong>pending</strong> 的<code class=\"language-text\">promise</code>，之后当参数中所有的promise都<strong>resolve</strong>之后，这个<code class=\"language-text\">promise</code>就转为<code class=\"language-text\">resolved</code>。但是只有其中有一个 <code class=\"language-text\">promise</code> 失败则转为<code class=\"language-text\">rejected</code>。 </li>\n<li>返回值会按照参数内的 <code class=\"language-text\">promise</code> 顺序排列，而不是由调用 <code class=\"language-text\">promise</code> 的完成顺序决定。</li>\n</ul>\n<p><strong>一句话概括：</strong></p>\n<p>全部的promise<strong>全部resolve</strong>才能resolve，只要<strong>有一个reject</strong>就整个reject了</p>\n<h3>Promise.allSettled</h3>\n<p><strong>语法：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>运行机制：</strong></p>\n<ul>\n<li><code class=\"language-text\">iterable</code>里所有的promise每一个都必须<code class=\"language-text\">resolve</code>或<code class=\"language-text\">reject</code>才行</li>\n<li>每个结果对象都有一个 <code class=\"language-text\">status</code> 字符串。如果它的值为 <code class=\"language-text\">fulfilled</code>，则结果对象上存在一个 <code class=\"language-text\">value</code> 。如果值为 <code class=\"language-text\">rejected</code>，则存在一个 <code class=\"language-text\">reason</code> 。value（或 reason ）反映了每个 promise 的结果。</li>\n</ul>\n<p><strong>一句话概括：</strong></p>\n<p>每个promise都要<code class=\"language-text\">resolve</code>或<code class=\"language-text\">reject</code></p>\n<h3>Promise.race</h3>\n<p><strong>语法：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>运行机制：</strong></p>\n<ul>\n<li>如果参数是一个空的可迭代对象，将永远等待</li>\n<li>\n<p>如果参数里面有不是<code class=\"language-text\">promise</code>的，或者有已经<code class=\"language-text\">resolve/reject</code>的<code class=\"language-text\">promise</code>，就会直接返回第一个找到。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Promsie<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">,</span> promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">,</span>promise3<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// promise.resolve(obj)</span>\nPromsie<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>promise3<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// promise.reject(err)</span>\nPromsie<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">,</span>promise3<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正常流程</span></code></pre></div>\n</li>\n</ul>\n<p><strong>一句话概括：</strong></p>\n<p>任何promise中任何一个<code class=\"language-text\">resolve</code>就直接<code class=\"language-text\">resolved</code>，有一个<code class=\"language-text\">reject</code>就直接<code class=\"language-text\">rejected</code></p>\n<h3>Promise.any</h3>\n<p><strong>语法：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>运行机制：</strong></p>\n<ul>\n<li>和<code class=\"language-text\">Promise.all</code>正好相反</li>\n<li>如果参数是一个空的可迭代对象，则返回一个<code class=\"language-text\">reject</code>状态的 Promise</li>\n<li>如果参数不包含任何 <code class=\"language-text\">promise</code>，则返回一个<code class=\"language-text\">resvoled</code>状态的Promise</li>\n</ul>\n<p><strong>一句话概括：</strong></p>\n<p>只要promise中任何一个 <code class=\"language-text\">promise</code> 变成<code class=\"language-text\">resolve</code>状态，整个就<code class=\"language-text\">resolve</code>了。如果全部都不能<code class=\"language-text\">resolve</code>则返回<code class=\"language-text\">reject</code></p>","frontmatter":{"title":"Promise的静态方法","date":"2021/03/21 13:48:13","description":"整理Promise所有静态方法"}},"previous":{"fields":{"slug":"/basic/compare-variables/"},"frontmatter":{"title":"使用===和==的建议"}},"next":{"fields":{"slug":"/script-defer-async/"},"frontmatter":{"title":"script标签中的defer和async"}}},"pageContext":{"id":"b2e9e572-602f-5379-96c8-f498920ecc82","previousPostId":"d56a4d98-b373-5b7f-a77b-7375c2196ce4","nextPostId":"81077fb3-9584-5e06-9d04-e7d82587a925"}},"staticQueryHashes":["2355076697","2841359383"]}